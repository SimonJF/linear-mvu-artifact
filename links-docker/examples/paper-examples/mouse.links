open import LinearMvu;
open import LinearMvuHTML;
open import LinearMvuAttrs;
open import LinearMvuEvents;
open import LinearMvuSubscriptions;

typename Model = (Int, Int);
typename Msg = [| UpdateCoords:(Int, Int) |];

sig updt : (Msg, Model) ~> Model
fun updt(msg, _) {
  switch(msg) {
    case UpdateCoords((x, y)) -> (x, y)
  }
}

fun textPar((k, v)) {
  p(LinearMvuAttrs.empty, textNode(k ^^ ": " ^^ v))
}

sig view : (Model) ~> HTML(Msg)
fun view((x, y)) {
  vdom
    <div>{textNode(intToString(x))}, {textNode(intToString(y))}</div>
}

sig subscriptions : (Model) -> Sub(Msg)
fun subscriptions(model) {
  onMouseMove(fun(evt) {
      Just(UpdateCoords((evt.pageX, evt.pageY)))
  })
}


fun mainPage() {
  run("placeholder", (0, 0), view,
      fun(msg, model) { (updt(msg, model), LinearMvuCommands.empty) }, subscriptions);
  page
  <html>
    <head>
      <title>Mouse Subscriptions</title>
      <link rel="stylesheet" href="css/stopwatch.css" type="text/css" />
    </head>
    <body>
      <div id="placeholder"></div>
    </body>
  </html>
}

serveThis(mainPage)
