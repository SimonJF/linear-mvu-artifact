# Commands: Allow things to be processed asynchronously and produce messages

typename Command(a :: Type(Any, Any)) =
  [| NoCommand
   | CommandAppend : (Command(a), Command(a))
   | Spawn: (() {SessionFail:() {}-> [||]}~> a)
   | SpawnLinear: (() {SessionFail:() {}-> [||]}~@ a) |];


var empty = NoCommand;

sig spawnUnr :
  forall a :: Type(Any, Any) .
    (() {SessionFail:() {}-> [||]}~> a) {SessionFail:() {}-> [||]}~> Command(a)
fun spawnUnr(f) { Spawn(f) }

sig spawnLinear :
  forall a :: Type(Any, Any) .
    (() {SessionFail:() {}-> [||]}~@ a) {SessionFail:() {}-> [||]}~> Command(a)
fun spawnLinear(f) { SpawnLinear(f) }



sig append : forall a :: Type(Any, Any), e :: Row .
  (Command(a), Command(a)) -e-> Command(a)
fun append(a1, a2) {
  switch ((a1, a2)) {
    case (NoCommand, a2) -> a2
    case (a1, NoCommand) -> a1
    case (a1, a2) -> CommandAppend(a1, a2)
  }
}


sig +$ : forall a :: Type(Any, Any), e :: Row . (Command(a), Command(a)) -e-> Command(a)
op a1 +$ a2 { append(a1, a2) }

sig applySpawn: forall a :: Type(Any, Any) .
  (() {SessionFail:() {}-> [||]}~> a) {SessionFail:() {}-> [||]}~> a
fun applySpawn(f) { f() }

sig applySpawnLinear : forall a :: Type(Any, Any) .
  (() {SessionFail:() {}-> [||]}~@ a) {SessionFail:() {}-> [||]}~> a
fun applySpawnLinear(f) { f() }

sig processCommand :
  forall msg :: Type(Any, Any), e :: Row . (Command(msg), AP(?msg.End)) {SessionFail:() {}-> [||]}~> ()
fun processCommand(cmd, ap) {
  switch(cmd) {
    case NoCommand -> ()
    case CommandAppend(c1, c2) ->
      processCommand(c1, ap);
      processCommand(c2, ap)
    case Spawn(f) ->
      ignore(
        spawn {
          close(send(applySpawn(f), request(ap)))
        })
    case SpawnLinear(f) ->
      ignore(
        spawn {
          close(send(applySpawnLinear(f), request(ap)))
        })
  }
}
