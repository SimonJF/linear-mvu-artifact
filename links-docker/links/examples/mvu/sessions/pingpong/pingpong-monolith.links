import LinearMvuHTML;
import LinearMvuAttrs;
import LinearMvu;
import LinearMvuEvents;
import LinearMvuCommands;

typename Ping = [| Ping |];
typename Pong = [| Pong |];

typename PingPong = !Ping.?Pong.PingPong;

module ClientCommon {
  open LinearMvuHTML;
  open LinearMvuAttrs;

  fun makePage(isPinger, disabled) {
    var caption = if (isPinger) { "Send Ping!" } else { "Send Pong!" };
    var disabledAttr =
      if (disabled) { attr("disabled", "disabled") } else { LinearMvuAttrs.empty };

    vdom
      <div id="main" class="container marketing">
        <div class="row featurette pagination-centered">
          <button type="button" class="btn btn-lg" id="pingButton"
            e:onClick="{ fun() { ButtonPressed } }" { disabledAttr } >
            { textNode(caption) }
          </button>
        </div>
      </div>
  }

  var template =
    page
      <html>
        <head>
          <title>Links Ping Pong example</title>
          <link href="http://fonts.googleapis.com/css?family=Merriweather:400,300italic,300" rel="stylesheet" type="text/css"></link>
          <link href="http://fonts.googleapis.com/css?family=Kotta+One" rel="stylesheet" type="text/css"></link>
          <link href="http://fonts.googleapis.com/css?family=Lora" rel="stylesheet" type="text/css"></link>
          <link href="css/bootstrap.min.css" rel="stylesheet"></link>
          <link href="css/abcd.css" rel="stylesheet"></link>
        </head>

        <body>
          <div class ="jumbotron">
            <div class="container">
              <h1>PingPong Example</h1>
            </div>
          </div>

          <div id="placeholder"></div>
        </body>
      </html>;
}

module Pinger {
  typename Message = [| ButtonPressed | Ponged:PingPong |];
  typename Model = [| Pinging:PingPong | Waiting |];
  typename UnrModel = (waiting: Bool);

  var emptyCmd = LinearMvuCommands.empty;

  sig view : (UnrModel) {SessionFail:() {}-> [||]}~> LinearMvuHTML.HTML(Message)
  fun view(uModel) {
    ClientCommon.makePage(true, uModel.waiting)
  }

  sig updt : (Message, Model) {SessionFail:() {}-> [||]}~> (Model, LinearMvuCommands.Command(Message))
  fun updt(msg, model) {
    switch(msg) {
      case ButtonPressed ->
        switch(model) {
          case Pinging(c) ->
            var c = send(Ping, c);
            (Waiting,
               LinearMvuCommands.spawnLinear(linfun() { var (_, c) = receive(c); Ponged(c) }))
          case Waiting -> (Waiting, emptyCmd)
        }
      case Ponged(c) ->
        switch(model) {
          case Pinging(mC) ->
            # This should never arise.
            cancel(mC); (Pinging(c), emptyCmd)
          case Waiting -> (Pinging(c), emptyCmd)
        }
    }
  }

  sig extract : (Model) {SessionFail:() {}-> [||]}~> (Model, UnrModel)
  fun extract(model) {
    switch(model) {
      case Pinging(c) -> (Pinging(c), (waiting=false))
      case Waiting -> (Waiting, (waiting=true))
    }
  }

  sig setup : (AP(PingPong)) {}~> Page
  fun setup(srvAP) {
    # Spawn a thread on the client to request a channel from
    # srvAP, and handle communication.
    var clPid = spawnClient {
      var c = accept(srvAP);
      LinearMvu.runLinear("placeholder", Pinging(c), view, updt,
        fun(_) { LinearMvuSubscriptions.empty }, extract,
        LinearMvuCommands.empty);
    };
    ClientCommon.template
  }

}

module Ponger {
  typename Ponger = !Pong.?Ping.Ponger;
  typename Message = [| ButtonPressed | Pinged:Ponger |];
  typename Model = [| Ponging:Ponger | Waiting |];
  typename UnrModel = (waiting: Bool);

  var emptyCmd = LinearMvuCommands.empty;

  sig view : (UnrModel) {SessionFail:() {}-> [||]}~> LinearMvuHTML.HTML(Message)
  fun view(uModel) {
    ClientCommon.makePage(false, uModel.waiting)
  }

  sig updt : (Message, Model) {SessionFail:() {}-> [||]}~> (Model, LinearMvuCommands.Command(Message))
  fun updt(msg, model) {
    switch(msg) {
      case ButtonPressed ->
        switch(model) {
          case Ponging(c) ->
            var c = send(Pong, c);
            (Waiting,
               LinearMvuCommands.spawnLinear(linfun() { var (_, c) = receive(c); Pinged(c) }))
          case Waiting -> (Waiting, emptyCmd)
        }
      case Pinged(c) ->
        switch(model) {
          case Ponging(mC) ->
            # This should never arise.
            cancel(mC); (Ponging(c), emptyCmd)
          case Waiting -> (Ponging(c), emptyCmd)
        }
    }
  }

  fun extract(model) {
    switch(model) {
      case Ponging(c) -> (Ponging(c), (waiting=false))
      case Waiting -> (Waiting, (waiting=true))
    }
  }

  fun setup(srvAP) {
    # Spawn a thread on the client to request a channel from
    # srvAP, and handle communication.
    var clPid = spawnClient {
      var c = request(srvAP);
      LinearMvu.runLinear("placeholder", Waiting, view, updt,
        fun(_) { LinearMvuSubscriptions.empty }, extract,
        LinearMvuCommands.spawnLinear(linfun() { var (_, c) = receive(c); Pinged(c) }))
    };
    ClientCommon.template
  }
}


fun main() {
  var (srvAP: AP(PingPong)) = new();
  addRoute("/pinger", fun(_) { Pinger.setup(srvAP) });
  addRoute("/ponger", fun(_) { Ponger.setup(srvAP) });
  addStaticRoute("/css", "css", [("css", "text/css")]);
  serveWebsockets();
  servePages();
}

main()

