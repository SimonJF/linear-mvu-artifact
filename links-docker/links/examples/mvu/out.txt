registering driver for null
Post-Frontend AST:
([(Sugartypes.Fun
     { Sugartypes.fun_binder = ("assert", (Bool, String) ~> ());
       fun_linearity = CommonTypes.DeclaredLinearity.Unl;
       fun_definition =
       ([a::Row],
        ([[(Sugartypes.Pattern.Variable ("ok", Bool));
            (Sugartypes.Pattern.Variable ("msg", String))]
           ],
         (Sugartypes.Block
            ([(Sugartypes.Exp
                 (Sugartypes.Conditional (
                    (Sugartypes.FnAppl (
                       (Sugartypes.TAppl ((Sugartypes.FreezeVar "not"),
                          [((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { |wild|_ }))]
                          )),
                       [(Sugartypes.Var "ok")])),
                    (Sugartypes.FnAppl (
                       (Sugartypes.TAppl ((Sugartypes.FreezeVar "debug"),
                          [((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { |_ }))]
                          )),
                       [(Sugartypes.InfixAppl (
                           ([{ |wild|_ }], (Operators.BinaryOp.Name "^^")),
                           (Sugartypes.Constant
                              (CommonTypes.Constant.String
                                 "assertion failed: ")),
                           (Sugartypes.Var "msg")))
                         ]
                       )),
                    (Sugartypes.RecordLit ([], None)))))
               ],
             (Sugartypes.RecordLit ([], None))))));
       fun_location = CommonTypes.Location.Unknown; fun_signature = None;
       fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("ignore", (_) -> ());
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[Sugartypes.Pattern.Any]],
          (Sugartypes.Block ([], (Sugartypes.RecordLit ([], None))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  Sugartypes.Datatype.Unit)),
               (Some (_) -> ())));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("println", (String) ~> ());
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("msg", String))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "print"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |_ }))]
                    )),
                 [(Sugartypes.InfixAppl (
                     ([{ |wild|_ }], (Operators.BinaryOp.Name "^^")),
                     (Sugartypes.Var "msg"),
                     (Sugartypes.Constant (CommonTypes.Constant.String "\n"))
                     ))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder = ("concatMap", ((a) -b-> [c], [a]) -b-> [c]);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a::Row; a],
           (Some (((a) -b-> [c], [a]) -b-> [c], [None; None; None]))),
          ([[(Sugartypes.Pattern.Variable ("f", (_) ~> [_]));
              (Sugartypes.Pattern.Variable ("l", [_]))]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "l"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block
                       ([], (Sugartypes.ListLit ([], (Some _))))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Variable ("hd", _)),
                        (Sugartypes.Pattern.Variable ("tl", [_])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.InfixAppl (
                            ([_; { |wild|_ }], (Operators.BinaryOp.Name "++")),
                            (Sugartypes.FnAppl ((Sugartypes.Var "f"),
                               [(Sugartypes.Var "hd")])),
                            (Sugartypes.FnAppl (
                               (Sugartypes.TAppl (
                                  (Sugartypes.FreezeVar "concatMap"),
                                  [((Sugartypes.Datatype.Type
                                       (Sugartypes.Datatype.TypeVar
                                          ("$none", None, `Rigid))),
                                    (Some _));
                                    ((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some { |_ }));
                                    ((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some _))
                                    ]
                                  )),
                               [(Sugartypes.Var "f"); (Sugartypes.Var "tl")]
                               ))
                            )))))
                    ],
                  (Some [_])))))));
         rec_location = CommonTypes.Location.Unknown;
         rec_signature =
         (Some ((Sugartypes.Datatype.Function (
                   [(Sugartypes.Datatype.Function (
                       [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                       ([], (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                       (Sugartypes.Datatype.List
                          (Sugartypes.Datatype.TypeVar ("c", None, `Rigid)))
                       ));
                     (Sugartypes.Datatype.List
                        (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                     ],
                   ([], (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                   (Sugartypes.Datatype.List
                      (Sugartypes.Datatype.TypeVar ("c", None, `Rigid)))
                   )),
                (Some ((a) -b-> [c], [a]) -b-> [c])));
         rec_unsafe_signature = true; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 15, column 20, to line 332, column 437
         }
        ]);
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder = ("map", ((a) -b-> c, [a]) -b-> [c]);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a::Row; a],
           (Some (((a) -b-> c, [a]) -b-> [c], [None; None; None]))),
          ([[(Sugartypes.Pattern.Variable ("f", (_) ~> _));
              (Sugartypes.Pattern.Variable ("l", [_]))]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "l"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block
                       ([], (Sugartypes.ListLit ([], (Some _))))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Variable ("hd", _)),
                        (Sugartypes.Pattern.Variable ("tl", [_])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.InfixAppl (
                            ([_; { |wild|_ }], Operators.BinaryOp.Cons),
                            (Sugartypes.FnAppl ((Sugartypes.Var "f"),
                               [(Sugartypes.Var "hd")])),
                            (Sugartypes.FnAppl (
                               (Sugartypes.TAppl (
                                  (Sugartypes.FreezeVar "map"),
                                  [((Sugartypes.Datatype.Type
                                       (Sugartypes.Datatype.TypeVar
                                          ("$none", None, `Rigid))),
                                    (Some _));
                                    ((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some { |_ }));
                                    ((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some _))
                                    ]
                                  )),
                               [(Sugartypes.Var "f"); (Sugartypes.Var "tl")]
                               ))
                            )))))
                    ],
                  (Some [_])))))));
         rec_location = CommonTypes.Location.Unknown;
         rec_signature =
         (Some ((Sugartypes.Datatype.Function (
                   [(Sugartypes.Datatype.Function (
                       [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                       ([], (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                       (Sugartypes.Datatype.TypeVar ("c", None, `Rigid))));
                     (Sugartypes.Datatype.List
                        (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                     ],
                   ([], (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                   (Sugartypes.Datatype.List
                      (Sugartypes.Datatype.TypeVar ("c", None, `Rigid)))
                   )),
                (Some ((a) -b-> c, [a]) -b-> [c])));
         rec_unsafe_signature = true; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 23, column 28, to line 483, column 579
         }
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("filter", ((a) -b-> Bool, [a]) -b-> [a]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("p", (_) -> Bool));
             (Sugartypes.Pattern.Variable ("l", [_]))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "concatMap"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some _))
                      ]
                    )),
                 [(Sugartypes.Block
                     ([(Sugartypes.Fun
                          { Sugartypes.fun_binder = ("_fun__g18", (a) -> [a]);
                            fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                            fun_definition =
                            ([],
                             ([[(Sugartypes.Pattern.Variable ("x", _))]],
                              (Sugartypes.Block
                                 ([],
                                  (Sugartypes.Conditional (
                                     (Sugartypes.FnAppl (
                                        (Sugartypes.Var "p"),
                                        [(Sugartypes.Var "x")])),
                                     (Sugartypes.ListLit (
                                        [(Sugartypes.Var "x")], (Some _))),
                                     (Sugartypes.ListLit ([], (Some _)))))))));
                            fun_location = CommonTypes.Location.Unknown;
                            fun_signature = None;
                            fun_unsafe_signature = false; fun_frozen = true })
                        ],
                      (Sugartypes.FreezeVar "_fun__g18")));
                   (Sugartypes.Var "l")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder =
         ("iter", ((a::Any) ~b~> _, [a::Any]) ~b~> ());
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a::(Any,Any); a::Row; a],
           (Some (((a::Any) ~b~> _, [a::Any]) ~b~> (), [None; None; None]))),
          ([[(Sugartypes.Pattern.Variable ("f", (_::Any) ~> _));
              (Sugartypes.Pattern.Variable ("xs", [_::Any]))]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "xs"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block ([], (Sugartypes.RecordLit ([], None)))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Variable ("x", _::Any)),
                        (Sugartypes.Pattern.Variable ("xs", [_::Any])))),
                     (Sugartypes.Block
                        ([(Sugartypes.Exp
                             (Sugartypes.FnAppl (
                                (Sugartypes.TAppl (
                                   (Sugartypes.FreezeVar "ignore"),
                                   [((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some _));
                                     ((Sugartypes.Datatype.Type
                                         (Sugartypes.Datatype.TypeVar
                                            ("$none", None, `Rigid))),
                                      (Some { |wild|_ }))
                                     ]
                                   )),
                                [(Sugartypes.FnAppl ((Sugartypes.Var "f"),
                                    [(Sugartypes.Var "x")]))
                                  ]
                                )))
                           ],
                         (Sugartypes.FnAppl (
                            (Sugartypes.TAppl ((Sugartypes.FreezeVar "iter"),
                               [((Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("$none", None, `Rigid))),
                                 (Some _::Any));
                                 ((Sugartypes.Datatype.Type
                                     (Sugartypes.Datatype.TypeVar
                                        ("$none", None, `Rigid))),
                                  (Some { |_ }));
                                 ((Sugartypes.Datatype.Type
                                     (Sugartypes.Datatype.TypeVar
                                        ("$none", None, `Rigid))),
                                  (Some _))
                                 ]
                               )),
                            [(Sugartypes.Var "f"); (Sugartypes.Var "xs")])))))
                    ],
                  (Some ())))))));
         rec_location = CommonTypes.Location.Unknown; rec_signature = None;
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 34, column 39, to line 651, column 754
         }
        ]);
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder = ("sortBy", ((a) ~b~> _, [a]) ~b~> [a]);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a::Row; a],
           (Some (((a) ~b~> _, [a]) ~b~> [a], [None; None; None]))),
          ([[(Sugartypes.Pattern.Variable ("f", (_) ~> _));
              (Sugartypes.Pattern.Variable ("l", [_]))]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "l"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block
                       ([], (Sugartypes.ListLit ([], (Some _))))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Variable ("x", _)),
                        (Sugartypes.Pattern.Variable ("xs", [_])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.Block
                            ([(Sugartypes.Val (
                                 (Sugartypes.Pattern.Variable ("lt", [_])),
                                 ([],
                                  (Sugartypes.FnAppl (
                                     (Sugartypes.TAppl (
                                        (Sugartypes.FreezeVar "filter"),
                                        [((Sugartypes.Datatype.Type
                                             (Sugartypes.Datatype.TypeVar
                                                ("$none", None, `Rigid))),
                                          (Some _));
                                          ((Sugartypes.Datatype.Type
                                              (Sugartypes.Datatype.TypeVar
                                                 ("$none", None, `Rigid))),
                                           (Some { |wild|_ }))
                                          ]
                                        )),
                                     [(Sugartypes.Block
                                         ([(Sugartypes.Fun
                                              { Sugartypes.fun_binder =
                                                ("_fun__g19", (_) ~> Bool);
                                                fun_linearity =
                                                CommonTypes.DeclaredLinearity.Unl;
                                                fun_definition =
                                                ([],
                                                 ([[(Sugartypes.Pattern.Variable
                                                       ("y", _))
                                                     ]
                                                    ],
                                                  (Sugartypes.Block
                                                     ([],
                                                      (Sugartypes.InfixAppl (
                                                         ([_; { |wild|_ }],
                                                          (Operators.BinaryOp.Name
                                                             "<")),
                                                         (Sugartypes.FnAppl (
                                                            (Sugartypes.Var
                                                               "f"),
                                                            [(Sugartypes.Var
                                                                "y")
                                                              ]
                                                            )),
                                                         (Sugartypes.FnAppl (
                                                            (Sugartypes.Var
                                                               "f"),
                                                            [(Sugartypes.Var
                                                                "x")
                                                              ]
                                                            ))
                                                         ))))));
                                                fun_location =
                                                CommonTypes.Location.Unknown;
                                                fun_signature = None;
                                                fun_unsafe_signature = false;
                                                fun_frozen = true })
                                            ],
                                          (Sugartypes.FreezeVar "_fun__g19")));
                                       (Sugartypes.Var "xs")]
                                     ))),
                                 CommonTypes.Location.Unknown, None));
                               (Sugartypes.Val (
                                  (Sugartypes.Pattern.Variable ("ge", [_])),
                                  ([],
                                   (Sugartypes.FnAppl (
                                      (Sugartypes.TAppl (
                                         (Sugartypes.FreezeVar "filter"),
                                         [((Sugartypes.Datatype.Type
                                              (Sugartypes.Datatype.TypeVar
                                                 ("$none", None, `Rigid))),
                                           (Some _));
                                           ((Sugartypes.Datatype.Type
                                               (Sugartypes.Datatype.TypeVar
                                                  ("$none", None, `Rigid))),
                                            (Some { |wild|_ }))
                                           ]
                                         )),
                                      [(Sugartypes.Block
                                          ([(Sugartypes.Fun
                                               { Sugartypes.fun_binder =
                                                 ("_fun__g20", (_) ~> Bool);
                                                 fun_linearity =
                                                 CommonTypes.DeclaredLinearity.Unl;
                                                 fun_definition =
                                                 ([],
                                                  ([[(Sugartypes.Pattern.Variable
                                                        ("y", _))
                                                      ]
                                                     ],
                                                   (Sugartypes.Block
                                                      ([],
                                                       (Sugartypes.InfixAppl (
                                                          ([_; { |wild|_ }],
                                                           (Operators.BinaryOp.Name
                                                              ">=")),
                                                          (Sugartypes.FnAppl (
                                                             (Sugartypes.Var
                                                                "f"),
                                                             [(Sugartypes.Var
                                                                 "y")
                                                               ]
                                                             )),
                                                          (Sugartypes.FnAppl (
                                                             (Sugartypes.Var
                                                                "f"),
                                                             [(Sugartypes.Var
                                                                 "x")
                                                               ]
                                                             ))
                                                          ))))));
                                                 fun_location =
                                                 CommonTypes.Location.Unknown;
                                                 fun_signature = None;
                                                 fun_unsafe_signature = false;
                                                 fun_frozen = true })
                                             ],
                                           (Sugartypes.FreezeVar "_fun__g20")));
                                        (Sugartypes.Var "xs")]
                                      ))),
                                  CommonTypes.Location.Unknown, None))
                               ],
                             (Sugartypes.InfixAppl (
                                ([_; { |wild|_ }],
                                 (Operators.BinaryOp.Name "++")),
                                (Sugartypes.FnAppl (
                                   (Sugartypes.TAppl (
                                      (Sugartypes.FreezeVar "sortBy"),
                                      [((Sugartypes.Datatype.Type
                                           (Sugartypes.Datatype.TypeVar
                                              ("$none", None, `Rigid))),
                                        (Some _));
                                        ((Sugartypes.Datatype.Type
                                            (Sugartypes.Datatype.TypeVar
                                               ("$none", None, `Rigid))),
                                         (Some { |_ }));
                                        ((Sugartypes.Datatype.Type
                                            (Sugartypes.Datatype.TypeVar
                                               ("$none", None, `Rigid))),
                                         (Some _))
                                        ]
                                      )),
                                   [(Sugartypes.Var "f");
                                     (Sugartypes.Var "lt")]
                                   )),
                                (Sugartypes.InfixAppl (
                                   ([_; { |wild|_ }],
                                    (Operators.BinaryOp.Name "++")),
                                   (Sugartypes.ListLit (
                                      [(Sugartypes.Var "x")], (Some _))),
                                   (Sugartypes.FnAppl (
                                      (Sugartypes.TAppl (
                                         (Sugartypes.FreezeVar "sortBy"),
                                         [((Sugartypes.Datatype.Type
                                              (Sugartypes.Datatype.TypeVar
                                                 ("$none", None, `Rigid))),
                                           (Some _));
                                           ((Sugartypes.Datatype.Type
                                               (Sugartypes.Datatype.TypeVar
                                                  ("$none", None, `Rigid))),
                                            (Some { |_ }));
                                           ((Sugartypes.Datatype.Type
                                               (Sugartypes.Datatype.TypeVar
                                                  ("$none", None, `Rigid))),
                                            (Some _))
                                           ]
                                         )),
                                      [(Sugartypes.Var "f");
                                        (Sugartypes.Var "ge")]
                                      ))
                                   ))
                                )))))))
                    ],
                  (Some [_])))))));
         rec_location = CommonTypes.Location.Unknown;
         rec_signature =
         (Some ((Sugartypes.Datatype.Function (
                   [(Sugartypes.Datatype.Function (
                       [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                       ([("wild",
                          (Sugartypes.Datatype.Present
                             Sugartypes.Datatype.Unit))
                          ],
                        (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                       (Sugartypes.Datatype.TypeVar ("c", None, `Rigid))));
                     (Sugartypes.Datatype.List
                        (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                     ],
                   ([("wild",
                      (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                      ],
                    (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                   (Sugartypes.Datatype.List
                      (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                   )),
                (Some ((a) ~b~> _, [a]) ~b~> [a])));
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 43, column 52, to line 849, column 1080
         }
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("sortByBase", ((a) -b-> (|_::Base), [a]) -b-> [a]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row; a::Row(Unl,Base)],
         ([[(Sugartypes.Pattern.Variable ("f", (_) ~> (|_::Base)));
             (Sugartypes.Pattern.Variable ("l", [_]))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "sortBy"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some (|_::Base)))
                      ]
                    )),
                 [(Sugartypes.Var "f"); (Sugartypes.Var "l")]))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Function (
                      [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                      ([], (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                      (Sugartypes.Datatype.Record
                         ([],
                          (Sugartypes.Datatype.Open
                             ("$",
                              (Some (CommonTypes.Linearity.Unl,
                                     CommonTypes.Restriction.Base)),
                              `Rigid))))
                      ));
                    (Sugartypes.Datatype.List
                       (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                    ],
                  ([], (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                  (Sugartypes.Datatype.List
                     (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                  )),
               (Some ((a) -b-> (|_::Base), [a]) -b-> [a])));
        fun_unsafe_signature = true; fun_frozen = true });
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder =
         ("all", ((a::Any) ~b~> Bool, [a::Any]) ~b~> Bool);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a::(Any,Any); a::Row],
           (Some (((a::Any) ~b~> Bool, [a::Any]) ~b~> Bool, [None; None]))),
          ([[(Sugartypes.Pattern.Variable ("p", (_::Any) ~> Bool));
              (Sugartypes.Pattern.Variable ("l", [_::Any]))]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "l"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.Constant (CommonTypes.Constant.Bool true)))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Variable ("x", _::Any)),
                        (Sugartypes.Pattern.Variable ("xs", [_::Any])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.InfixAppl (
                            ([{ |wild|_ }], Operators.BinaryOp.And),
                            (Sugartypes.FnAppl ((Sugartypes.Var "p"),
                               [(Sugartypes.Var "x")])),
                            (Sugartypes.FnAppl (
                               (Sugartypes.TAppl (
                                  (Sugartypes.FreezeVar "all"),
                                  [((Sugartypes.Datatype.Type
                                       (Sugartypes.Datatype.TypeVar
                                          ("$none", None, `Rigid))),
                                    (Some _::Any));
                                    ((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some { |_ }))
                                    ]
                                  )),
                               [(Sugartypes.Var "p"); (Sugartypes.Var "xs")]
                               ))
                            )))))
                    ],
                  (Some Bool)))))));
         rec_location = CommonTypes.Location.Unknown; rec_signature = None;
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 59, column 64, to line 1278, column 1378
         }
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("and", ([Bool]) ~> Bool);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("l", [Bool]))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "all"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some Bool));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Block
                     ([(Sugartypes.Fun
                          { Sugartypes.fun_binder =
                            ("_fun__g21", (Bool) ~> Bool);
                            fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                            fun_definition =
                            ([],
                             ([[(Sugartypes.Pattern.Variable ("x", Bool))]],
                              (Sugartypes.Block ([], (Sugartypes.Var "x")))));
                            fun_location = CommonTypes.Location.Unknown;
                            fun_signature = None;
                            fun_unsafe_signature = false; fun_frozen = true })
                        ],
                      (Sugartypes.FreezeVar "_fun__g21")));
                   (Sugartypes.Var "l")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder = ("or", ([Bool]) ~> Bool);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a::Row], (Some (([Bool]) ~> Bool, [None]))),
          ([[(Sugartypes.Pattern.Variable ("l", [Bool]))]],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "l"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.Constant
                           (CommonTypes.Constant.Bool false)))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Variable ("x", Bool)),
                        (Sugartypes.Pattern.Variable ("xs", [Bool])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.InfixAppl (
                            ([{ |wild|_ }], Operators.BinaryOp.Or),
                            (Sugartypes.Var "x"),
                            (Sugartypes.FnAppl (
                               (Sugartypes.TAppl (
                                  (Sugartypes.FreezeVar "or"),
                                  [((Sugartypes.Datatype.Type
                                       (Sugartypes.Datatype.TypeVar
                                          ("$none", None, `Rigid))),
                                    (Some { |_ }))]
                                  )),
                               [(Sugartypes.Var "xs")]))
                            )))))
                    ],
                  (Some Bool)))))));
         rec_location = CommonTypes.Location.Unknown; rec_signature = None;
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 70, column 75, to line 1419, column 1506
         }
        ]);
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder =
         ("any", ((a::Any) ~b~> Bool, [a::Any]) ~b~> Bool);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a::(Any,Any); a::Row],
           (Some (((a::Any) ~b~> Bool, [a::Any]) ~b~> Bool, [None; None]))),
          ([[(Sugartypes.Pattern.Variable ("p", (_::Any) ~> Bool));
              (Sugartypes.Pattern.Variable ("l", [_::Any]))]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "l"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.Constant
                           (CommonTypes.Constant.Bool false)))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Variable ("x", _::Any)),
                        (Sugartypes.Pattern.Variable ("xs", [_::Any])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.InfixAppl (
                            ([{ |wild|_ }], Operators.BinaryOp.Or),
                            (Sugartypes.FnAppl ((Sugartypes.Var "p"),
                               [(Sugartypes.Var "x")])),
                            (Sugartypes.FnAppl (
                               (Sugartypes.TAppl (
                                  (Sugartypes.FreezeVar "any"),
                                  [((Sugartypes.Datatype.Type
                                       (Sugartypes.Datatype.TypeVar
                                          ("$none", None, `Rigid))),
                                    (Some _::Any));
                                    ((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some { |_ }))
                                    ]
                                  )),
                               [(Sugartypes.Var "p"); (Sugartypes.Var "xs")]
                               ))
                            )))))
                    ],
                  (Some Bool)))))));
         rec_location = CommonTypes.Location.Unknown; rec_signature = None;
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 77, column 82, to line 1508, column 1606
         }
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("the", ([a]) ~> a);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("l", [_]))]],
          (Sugartypes.Block
             ([(Sugartypes.Val ((Sugartypes.Pattern.Variable ("x", _)),
                  ([],
                   (Sugartypes.FnAppl (
                      (Sugartypes.TAppl ((Sugartypes.FreezeVar "hd"),
                         [((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some _));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { |_ }))
                           ]
                         )),
                      [(Sugartypes.Var "l")]))),
                  CommonTypes.Location.Unknown, None))
                ],
              (Sugartypes.Conditional (
                 (Sugartypes.FnAppl (
                    (Sugartypes.TAppl ((Sugartypes.FreezeVar "all"),
                       [((Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeVar
                               ("$none", None, `Rigid))),
                         (Some _));
                         ((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some { |_ }))
                         ]
                       )),
                    [(Sugartypes.Block
                        ([(Sugartypes.Fun
                             { Sugartypes.fun_binder =
                               ("_fun__g22", (_) ~> Bool);
                               fun_linearity =
                               CommonTypes.DeclaredLinearity.Unl;
                               fun_definition =
                               ([],
                                ([[(Sugartypes.Pattern.Variable ("y", _))]],
                                 (Sugartypes.Block
                                    ([],
                                     (Sugartypes.InfixAppl (
                                        ([_; { |wild|_ }],
                                         (Operators.BinaryOp.Name "==")),
                                        (Sugartypes.Var "x"),
                                        (Sugartypes.Var "y")))))));
                               fun_location = CommonTypes.Location.Unknown;
                               fun_signature = None;
                               fun_unsafe_signature = false;
                               fun_frozen = true })
                           ],
                         (Sugartypes.FreezeVar "_fun__g22")));
                      (Sugartypes.Var "l")]
                    )),
                 (Sugartypes.Var "x"),
                 (Sugartypes.FnAppl (
                    (Sugartypes.TAppl ((Sugartypes.FreezeVar "error"),
                       [((Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeVar
                               ("$none", None, `Rigid))),
                         (Some { |_ }));
                         ((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some _))
                         ]
                       )),
                    [(Sugartypes.Constant
                        (CommonTypes.Constant.String
                           "list argument to 'the' had varying values."))
                      ]
                    ))
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder = ("elem", (a, [a]) ~> Bool);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a::Row], (Some ((a, [a]) ~> Bool, [None; None]))),
          ([[(Sugartypes.Pattern.Variable ("x", _));
              (Sugartypes.Pattern.Variable ("l", [_]))]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.InfixAppl (
                  ([{ |wild|_ }], Operators.BinaryOp.And),
                  (Sugartypes.FnAppl (
                     (Sugartypes.TAppl ((Sugartypes.FreezeVar "not"),
                        [((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some { |wild|_ }))]
                        )),
                     [(Sugartypes.InfixAppl (
                         ([[_]; { |wild|_ }], (Operators.BinaryOp.Name "==")),
                         (Sugartypes.Var "l"),
                         (Sugartypes.ListLit ([], (Some _)))))
                       ]
                     )),
                  (Sugartypes.TupleLit
                     [(Sugartypes.InfixAppl (
                         ([{ |wild|_ }], Operators.BinaryOp.Or),
                         (Sugartypes.InfixAppl (
                            ([_; { |wild|_ }], (Operators.BinaryOp.Name "==")),
                            (Sugartypes.Var "x"),
                            (Sugartypes.FnAppl (
                               (Sugartypes.TAppl (
                                  (Sugartypes.FreezeVar "hd"),
                                  [((Sugartypes.Datatype.Type
                                       (Sugartypes.Datatype.TypeVar
                                          ("$none", None, `Rigid))),
                                    (Some _));
                                    ((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some { |_ }))
                                    ]
                                  )),
                               [(Sugartypes.Var "l")]))
                            )),
                         (Sugartypes.InfixAppl (
                            ([_; { |_ }], (Operators.BinaryOp.Name "elem")),
                            (Sugartypes.Var "x"),
                            (Sugartypes.FnAppl (
                               (Sugartypes.TAppl (
                                  (Sugartypes.FreezeVar "tl"),
                                  [((Sugartypes.Datatype.Type
                                       (Sugartypes.Datatype.TypeVar
                                          ("$none", None, `Rigid))),
                                    (Some _));
                                    ((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some { |_ }))
                                    ]
                                  )),
                               [(Sugartypes.Var "l")]))
                            ))
                         ))
                       ])
                  ))))));
         rec_location = CommonTypes.Location.Unknown; rec_signature = None;
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 92, column 94, to line 1744, column 1809
         }
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("odd", (Int) -> Bool);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("i", Int))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.InfixAppl (
                 ([Int; { |_ }], (Operators.BinaryOp.Name "==")),
                 (Sugartypes.InfixAppl (
                    ([{ |_ }], (Operators.BinaryOp.Name "mod")),
                    (Sugartypes.Var "i"),
                    (Sugartypes.Constant (CommonTypes.Constant.Int 2)))),
                 (Sugartypes.Constant (CommonTypes.Constant.Int 1))))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("even", (Int) -> Bool);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("i", Int))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.InfixAppl (
                 ([Int; { |_ }], (Operators.BinaryOp.Name "==")),
                 (Sugartypes.InfixAppl (
                    ([{ |_ }], (Operators.BinaryOp.Name "mod")),
                    (Sugartypes.Var "i"),
                    (Sugartypes.Constant (CommonTypes.Constant.Int 2)))),
                 (Sugartypes.Constant (CommonTypes.Constant.Int 0))))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("intRange", (Int, Int) ~> [Int]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("m", Int));
             (Sugartypes.Pattern.Variable ("n", Int))]
            ],
          (Sugartypes.Block
             ([(Sugartypes.Funs
                  [{ Sugartypes.rec_binder =
                     ("intRangeAux", (Int, Int, [Int]) ~> [Int]);
                     rec_linearity = CommonTypes.DeclaredLinearity.Unl;
                     rec_definition =
                     (([a::Row], (Some ((Int, Int, [Int]) ~> [Int], [None]))),
                      ([[(Sugartypes.Pattern.Variable ("m", Int));
                          (Sugartypes.Pattern.Variable ("n", Int));
                          (Sugartypes.Pattern.Variable ("result", [Int]))]
                         ],
                       (Sugartypes.Block
                          ([],
                           (Sugartypes.Conditional (
                              (Sugartypes.InfixAppl (
                                 ([Int; { |wild|_ }],
                                  (Operators.BinaryOp.Name ">")),
                                 (Sugartypes.Var "m"), (Sugartypes.Var "n"))),
                              (Sugartypes.Var "result"),
                              (Sugartypes.FnAppl (
                                 (Sugartypes.TAppl (
                                    (Sugartypes.FreezeVar "intRangeAux"),
                                    [((Sugartypes.Datatype.Type
                                         (Sugartypes.Datatype.TypeVar
                                            ("$none", None, `Rigid))),
                                      (Some { |_ }))]
                                    )),
                                 [(Sugartypes.Var "m");
                                   (Sugartypes.InfixAppl (
                                      ([{ |wild|_ }],
                                       Operators.BinaryOp.Minus),
                                      (Sugartypes.Var "n"),
                                      (Sugartypes.Constant
                                         (CommonTypes.Constant.Int 1))
                                      ));
                                   (Sugartypes.InfixAppl (
                                      ([Int; { |wild|_ }],
                                       Operators.BinaryOp.Cons),
                                      (Sugartypes.Var "n"),
                                      (Sugartypes.Var "result")))
                                   ]
                                 ))
                              ))))));
                     rec_location = CommonTypes.Location.Unknown;
                     rec_signature = None; rec_unsafe_signature = false;
                     rec_frozen = true;
                     rec_pos =
                     File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 100, column 103, to line 1896, column 1991
                     }
                    ])
                ],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "intRangeAux"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |_ }))]
                    )),
                 [(Sugartypes.Var "m"); (Sugartypes.Var "n");
                   (Sugartypes.ListLit ([], (Some Int)))]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("selectElem", ([a], Int) ~> a);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("xs", [_]));
             (Sugartypes.Pattern.Variable ("i", Int))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "hd"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.FnAppl (
                     (Sugartypes.TAppl ((Sugartypes.FreezeVar "drop"),
                        [((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some _));
                          ((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some { |_ }))
                          ]
                        )),
                     [(Sugartypes.Var "i"); (Sugartypes.Var "xs")]))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("!!", ([a], Int) ~> a);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("xs", [_]));
             (Sugartypes.Pattern.Variable ("n", Int))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "selectElem"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Var "xs"); (Sugartypes.Var "n")]))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("swap", ([a], a, a) -> [a]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("xs", [_]));
             (Sugartypes.Pattern.Variable ("x1", _));
             (Sugartypes.Pattern.Variable ("x2", _))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "concatMap"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some _))
                      ]
                    )),
                 [(Sugartypes.Block
                     ([(Sugartypes.Fun
                          { Sugartypes.fun_binder = ("_fun__g23", (a) -> [a]);
                            fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                            fun_definition =
                            ([],
                             ([[(Sugartypes.Pattern.As (("_for__g1", _),
                                   (Sugartypes.Pattern.Variable ("x", _))))
                                 ]
                                ],
                              (Sugartypes.Block
                                 ([],
                                  (Sugartypes.Conditional (
                                     (Sugartypes.InfixAppl (
                                        ([_; { |_ }],
                                         (Operators.BinaryOp.Name "==")),
                                        (Sugartypes.Var "x"),
                                        (Sugartypes.Var "x1"))),
                                     (Sugartypes.ListLit (
                                        [(Sugartypes.Var "x2")], (Some _))),
                                     (Sugartypes.Conditional (
                                        (Sugartypes.InfixAppl (
                                           ([_; { |_ }],
                                            (Operators.BinaryOp.Name "==")),
                                           (Sugartypes.Var "x"),
                                           (Sugartypes.Var "x2"))),
                                        (Sugartypes.ListLit (
                                           [(Sugartypes.Var "x1")], (Some _)
                                           )),
                                        (Sugartypes.ListLit (
                                           [(Sugartypes.Var "x")], (Some _)))
                                        ))
                                     ))))));
                            fun_location = CommonTypes.Location.Unknown;
                            fun_signature = None;
                            fun_unsafe_signature = false; fun_frozen = true })
                        ],
                      (Sugartypes.FreezeVar "_fun__g23")));
                   (Sugartypes.Var "xs")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder =
         ("fold_left",
          ((a::Any, b::Any) ~c~> a::Any, a::Any, [b::Any]) ~c~> a::Any);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a::(Any,Any); a::(Any,Any); a::Row],
           (Some (((a::Any, b::Any) ~c~> a::Any, a::Any, [b::Any]) ~c~> a::Any,
                  [None; None; None]))),
          ([[(Sugartypes.Pattern.Variable ("p", (a::Any, _::Any) ~> a::Any));
              (Sugartypes.Pattern.Variable ("u", _::Any));
              (Sugartypes.Pattern.Variable ("l", [_::Any]))]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "l"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block ([], (Sugartypes.Var "u"))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Variable ("x", _::Any)),
                        (Sugartypes.Pattern.Variable ("xs", [_::Any])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.FnAppl (
                            (Sugartypes.TAppl (
                               (Sugartypes.FreezeVar "fold_left"),
                               [((Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("$none", None, `Rigid))),
                                 (Some _::Any));
                                 ((Sugartypes.Datatype.Type
                                     (Sugartypes.Datatype.TypeVar
                                        ("$none", None, `Rigid))),
                                  (Some _::Any));
                                 ((Sugartypes.Datatype.Type
                                     (Sugartypes.Datatype.TypeVar
                                        ("$none", None, `Rigid))),
                                  (Some { |_ }))
                                 ]
                               )),
                            [(Sugartypes.Var "p");
                              (Sugartypes.FnAppl ((Sugartypes.Var "p"),
                                 [(Sugartypes.Var "u"); (Sugartypes.Var "x")]
                                 ));
                              (Sugartypes.Var "xs")]
                            )))))
                    ],
                  (Some _::Any)))))));
         rec_location = CommonTypes.Location.Unknown; rec_signature = None;
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 126, column 131, to line 2332, column 2438
         }
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("fold_left1", ((a, a) ~b~> a, [a]) ~b~> a);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("p", (a, a) ~> a));
             (Sugartypes.Pattern.Variable ("l", [_]))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "fold_left"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some _));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Var "p");
                   (Sugartypes.FnAppl (
                      (Sugartypes.TAppl ((Sugartypes.FreezeVar "hd"),
                         [((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some _));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { |_ }))
                           ]
                         )),
                      [(Sugartypes.Var "l")]));
                   (Sugartypes.FnAppl (
                      (Sugartypes.TAppl ((Sugartypes.FreezeVar "tl"),
                         [((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some _));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { |_ }))
                           ]
                         )),
                      [(Sugartypes.Var "l")]))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder =
         ("fold_right",
          ((a::Any, b::Any) ~c~> b::Any, b::Any, [a::Any]) ~c~> b::Any);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a::(Any,Any); a::(Any,Any); a::Row],
           (Some (((a::Any, b::Any) ~c~> b::Any, b::Any, [a::Any]) ~c~> b::Any,
                  [None; None; None]))),
          ([[(Sugartypes.Pattern.Variable ("f", (_::Any, b::Any) ~> b::Any));
              (Sugartypes.Pattern.Variable ("u", _::Any));
              (Sugartypes.Pattern.Variable ("l", [_::Any]))]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "l"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block ([], (Sugartypes.Var "u"))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Variable ("x", _::Any)),
                        (Sugartypes.Pattern.Variable ("xs", [_::Any])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.FnAppl ((Sugartypes.Var "f"),
                            [(Sugartypes.Var "x");
                              (Sugartypes.FnAppl (
                                 (Sugartypes.TAppl (
                                    (Sugartypes.FreezeVar "fold_right"),
                                    [((Sugartypes.Datatype.Type
                                         (Sugartypes.Datatype.TypeVar
                                            ("$none", None, `Rigid))),
                                      (Some _::Any));
                                      ((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some _::Any));
                                      ((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some { |_ }))
                                      ]
                                    )),
                                 [(Sugartypes.Var "f"); (Sugartypes.Var "u");
                                   (Sugartypes.Var "xs")]
                                 ))
                              ]
                            )))))
                    ],
                  (Some _::Any)))))));
         rec_location = CommonTypes.Location.Unknown; rec_signature = None;
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 137, column 142, to line 2495, column 2601
         }
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("fold_right1", ((a, a) ~b~> a, [a]) ~b~> a);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("f", (a, a) ~> a));
             (Sugartypes.Pattern.Variable ("l", [_]))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "fold_right"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some _));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Var "f");
                   (Sugartypes.FnAppl (
                      (Sugartypes.TAppl ((Sugartypes.FreezeVar "hd"),
                         [((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some _));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { |_ }))
                           ]
                         )),
                      [(Sugartypes.Var "l")]));
                   (Sugartypes.FnAppl (
                      (Sugartypes.TAppl ((Sugartypes.FreezeVar "tl"),
                         [((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some _));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { |_ }))
                           ]
                         )),
                      [(Sugartypes.Var "l")]))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder = ("unzip", ([(a, b)]) ~> ([a], [b]));
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a; a::Row],
           (Some (([(a, b)]) ~> ([a], [b]), [None; None; None]))),
          ([[(Sugartypes.Pattern.Variable ("l", [(_, _)]))]],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "l"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.TupleLit
                           [(Sugartypes.ListLit ([], (Some _)));
                             (Sugartypes.ListLit ([], (Some _)))]))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Tuple
                           [(Sugartypes.Pattern.Variable ("a", _));
                             (Sugartypes.Pattern.Variable ("b", _))]),
                        (Sugartypes.Pattern.Variable ("xs", [(_, _)])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.Block
                            ([(Sugartypes.Val (
                                 (Sugartypes.Pattern.Tuple
                                    [(Sugartypes.Pattern.Variable ("c", [_]));
                                      (Sugartypes.Pattern.Variable ("d", [_]))
                                      ]),
                                 ([],
                                  (Sugartypes.FnAppl (
                                     (Sugartypes.TAppl (
                                        (Sugartypes.FreezeVar "unzip"),
                                        [((Sugartypes.Datatype.Type
                                             (Sugartypes.Datatype.TypeVar
                                                ("$none", None, `Rigid))),
                                          (Some _));
                                          ((Sugartypes.Datatype.Type
                                              (Sugartypes.Datatype.TypeVar
                                                 ("$none", None, `Rigid))),
                                           (Some _));
                                          ((Sugartypes.Datatype.Type
                                              (Sugartypes.Datatype.TypeVar
                                                 ("$none", None, `Rigid))),
                                           (Some { |_ }))
                                          ]
                                        )),
                                     [(Sugartypes.Var "xs")]))),
                                 CommonTypes.Location.Unknown, None))
                               ],
                             (Sugartypes.TupleLit
                                [(Sugartypes.InfixAppl (
                                    ([_; { |wild|_ }],
                                     Operators.BinaryOp.Cons),
                                    (Sugartypes.Var "a"),
                                    (Sugartypes.Var "c")));
                                  (Sugartypes.InfixAppl (
                                     ([_; { |wild|_ }],
                                      Operators.BinaryOp.Cons),
                                     (Sugartypes.Var "b"),
                                     (Sugartypes.Var "d")))
                                  ]))))))
                    ],
                  (Some ([_], [_]))))))));
         rec_location = CommonTypes.Location.Unknown; rec_signature = None;
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 148, column 156, to line 2660, column 2799
         }
        ]);
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder = ("zip", ([a], [b]) ~> [(a, b)]);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a; a::Row],
           (Some (([a], [b]) ~> [(a, b)], [None; None; None]))),
          ([[(Sugartypes.Pattern.Variable ("l", [_]));
              (Sugartypes.Pattern.Variable ("r", [_]))]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch (
                  (Sugartypes.TupleLit
                     [(Sugartypes.Var "l"); (Sugartypes.Var "r")]),
                  [((Sugartypes.Pattern.Tuple
                       [Sugartypes.Pattern.Nil; Sugartypes.Pattern.Nil]),
                    (Sugartypes.Block
                       ([], (Sugartypes.ListLit ([], (Some (_, _)))))));
                    ((Sugartypes.Pattern.Tuple
                        [(Sugartypes.Pattern.Cons (
                            (Sugartypes.Pattern.Variable ("lh", _)),
                            (Sugartypes.Pattern.Variable ("lt", [_]))));
                          (Sugartypes.Pattern.Cons (
                             (Sugartypes.Pattern.Variable ("rh", _)),
                             (Sugartypes.Pattern.Variable ("rt", [_]))))
                          ]),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.InfixAppl (
                            ([(_, _); { |wild|_ }], Operators.BinaryOp.Cons),
                            (Sugartypes.TupleLit
                               [(Sugartypes.Var "lh"); (Sugartypes.Var "rh")]),
                            (Sugartypes.FnAppl (
                               (Sugartypes.TAppl (
                                  (Sugartypes.FreezeVar "zip"),
                                  [((Sugartypes.Datatype.Type
                                       (Sugartypes.Datatype.TypeVar
                                          ("$none", None, `Rigid))),
                                    (Some _));
                                    ((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some _));
                                    ((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some { |_ }))
                                    ]
                                  )),
                               [(Sugartypes.Var "lt"); (Sugartypes.Var "rt")]
                               ))
                            )))));
                    ((Sugartypes.Pattern.Tuple
                        [Sugartypes.Pattern.Any; Sugartypes.Pattern.Any]),
                     (Sugartypes.Block
                        ([], (Sugartypes.ListLit ([], (Some (_, _)))))))
                    ],
                  (Some [(_, _)])))))));
         rec_location = CommonTypes.Location.Unknown;
         rec_signature =
         (Some ((Sugartypes.Datatype.Function (
                   [(Sugartypes.Datatype.List
                       (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)));
                     (Sugartypes.Datatype.List
                        (Sugartypes.Datatype.TypeVar ("b", None, `Rigid)))
                     ],
                   ([("wild",
                      (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                      ],
                    (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                   (Sugartypes.Datatype.List
                      (Sugartypes.Datatype.Tuple
                         [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                           (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))]))
                   )),
                (Some ([a], [b]) ~> [(a, b)])));
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 159, column 166, to line 2834, column 2983
         }
        ]);
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder = ("replicate", (Int, a) ~> [a]);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a::Row], (Some ((Int, a) ~> [a], [None; None]))),
          ([[(Sugartypes.Pattern.Variable ("n", Int));
              (Sugartypes.Pattern.Variable ("item", _))]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.Conditional (
                  (Sugartypes.InfixAppl (
                     ([Int; { |wild|_ }], (Operators.BinaryOp.Name "==")),
                     (Sugartypes.Var "n"),
                     (Sugartypes.Constant (CommonTypes.Constant.Int 0)))),
                  (Sugartypes.ListLit ([], (Some _))),
                  (Sugartypes.InfixAppl (
                     ([_; { |wild|_ }], Operators.BinaryOp.Cons),
                     (Sugartypes.Var "item"),
                     (Sugartypes.FnAppl (
                        (Sugartypes.TAppl (
                           (Sugartypes.FreezeVar "replicate"),
                           [((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some _));
                             ((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some { |_ }))
                             ]
                           )),
                        [(Sugartypes.InfixAppl (
                            ([{ |wild|_ }], Operators.BinaryOp.Minus),
                            (Sugartypes.Var "n"),
                            (Sugartypes.Constant (CommonTypes.Constant.Int 1))
                            ));
                          (Sugartypes.Var "item")]
                        ))
                     ))
                  ))))));
         rec_location = CommonTypes.Location.Unknown; rec_signature = None;
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 168, column 171, to line 2985, column 3064
         }
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("flip",
         ((a::Any, b::Any) -c-> d::Any) -> (b::Any, a::Any) -c-> d::Any);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::(Any,Any); a::Row; a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("f", (_::Any, _::Any) -> _::Any))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.Block
                 ([(Sugartypes.Fun
                      { Sugartypes.fun_binder =
                        ("_fun__g24", (_::Any, _::Any) -> _::Any);
                        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                        fun_definition =
                        ([],
                         ([[(Sugartypes.Pattern.Variable ("x", _::Any));
                             (Sugartypes.Pattern.Variable ("y", _::Any))]
                            ],
                          (Sugartypes.Block
                             ([],
                              (Sugartypes.FnAppl ((Sugartypes.Var "f"),
                                 [(Sugartypes.Var "y"); (Sugartypes.Var "x")]
                                 ))))));
                        fun_location = CommonTypes.Location.Unknown;
                        fun_signature = None; fun_unsafe_signature = false;
                        fun_frozen = true })
                    ],
                  (Sugartypes.FreezeVar "_fun__g24")))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("curry", ((a, b) -c-> d) -> (a) -> (b) -c-> d);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a; a::Row; a; a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("f", (_, _) -> _))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.Block
                 ([(Sugartypes.Fun
                      { Sugartypes.fun_binder =
                        ("_fun__g25", (_) -> (_) -> _);
                        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                        fun_definition =
                        ([],
                         ([[(Sugartypes.Pattern.Variable ("x", _))]],
                          (Sugartypes.Block
                             ([(Sugartypes.Fun
                                  { Sugartypes.fun_binder =
                                    ("_fun__g26", (_) -> _);
                                    fun_linearity =
                                    CommonTypes.DeclaredLinearity.Unl;
                                    fun_definition =
                                    ([],
                                     ([[(Sugartypes.Pattern.Variable ("y", _))
                                         ]
                                        ],
                                      (Sugartypes.Block
                                         ([],
                                          (Sugartypes.FnAppl (
                                             (Sugartypes.Var "f"),
                                             [(Sugartypes.Var "x");
                                               (Sugartypes.Var "y")]
                                             ))))));
                                    fun_location =
                                    CommonTypes.Location.Unknown;
                                    fun_signature = None;
                                    fun_unsafe_signature = false;
                                    fun_frozen = false })
                                ],
                              (Sugartypes.FreezeVar "_fun__g26")))));
                        fun_location = CommonTypes.Location.Unknown;
                        fun_signature = None; fun_unsafe_signature = false;
                        fun_frozen = true })
                    ],
                  (Sugartypes.FreezeVar "_fun__g25")))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Function (
                      [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                        (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))],
                      ([], (Sugartypes.Datatype.Open ("d", None, `Rigid))),
                      (Sugartypes.Datatype.TypeVar ("c", None, `Rigid))))
                    ],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                     ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                     (Sugartypes.Datatype.Function (
                        [(Sugartypes.Datatype.TypeVar ("b", None, `Rigid))],
                        ([], (Sugartypes.Datatype.Open ("d", None, `Rigid))),
                        (Sugartypes.Datatype.TypeVar ("c", None, `Rigid))))
                     ))
                  )),
               (Some ((a, b) -c-> d) -> (a) -> (b) -c-> d)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("uncurry",
         ((a::Any) -b-> (c::Any) -b-> d::Any) -> (a::Any, c::Any) -b-> d::Any);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::(Any,Any); a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable
               ("f", (_::Any) -b-> (_::Any) -b-> _::Any))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.Block
                 ([(Sugartypes.Fun
                      { Sugartypes.fun_binder =
                        ("_fun__g27", (_::Any, _::Any) -> _::Any);
                        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                        fun_definition =
                        ([],
                         ([[(Sugartypes.Pattern.Variable ("x", _::Any));
                             (Sugartypes.Pattern.Variable ("y", _::Any))]
                            ],
                          (Sugartypes.Block
                             ([],
                              (Sugartypes.FnAppl (
                                 (Sugartypes.FnAppl ((Sugartypes.Var "f"),
                                    [(Sugartypes.Var "x")])),
                                 [(Sugartypes.Var "y")]))))));
                        fun_location = CommonTypes.Location.Unknown;
                        fun_signature = None; fun_unsafe_signature = false;
                        fun_frozen = true })
                    ],
                  (Sugartypes.FreezeVar "_fun__g27")))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("compose",
         ((a::Any) -b-> c::Any, (d::Any) -b-> a::Any) -> (d::Any) -b-> c::Any);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::(Any,Any); a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("f", (_::Any) -> _::Any));
             (Sugartypes.Pattern.Variable ("g", (_::Any) -> _::Any))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.Block
                 ([(Sugartypes.Fun
                      { Sugartypes.fun_binder =
                        ("_fun__g28", (_::Any) -> _::Any);
                        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                        fun_definition =
                        ([],
                         ([[(Sugartypes.Pattern.Variable ("x", _::Any))]],
                          (Sugartypes.Block
                             ([],
                              (Sugartypes.FnAppl ((Sugartypes.Var "f"),
                                 [(Sugartypes.FnAppl ((Sugartypes.Var "g"),
                                     [(Sugartypes.Var "x")]))
                                   ]
                                 ))))));
                        fun_location = CommonTypes.Location.Unknown;
                        fun_signature = None; fun_unsafe_signature = false;
                        fun_frozen = true })
                    ],
                  (Sugartypes.FreezeVar "_fun__g28")))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("id", (a::Any) -> a::Any);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("x", _::Any))]],
          (Sugartypes.Block ([], (Sugartypes.Var "x")))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("first", ((1:a::Any|_)) -> a::Any);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("p", (1:_::Any|_)))]],
          (Sugartypes.Block
             ([], (Sugartypes.Projection ((Sugartypes.Var "p"), "1"))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("second", ((2:a::Any|_)) -> a::Any);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("p", (2:_::Any|_)))]],
          (Sugartypes.Block
             ([], (Sugartypes.Projection ((Sugartypes.Var "p"), "2"))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("third", ((3:a::Any|_)) -> a::Any);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("p", (3:_::Any|_)))]],
          (Sugartypes.Block
             ([], (Sugartypes.Projection ((Sugartypes.Var "p"), "3"))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("fourth", ((4:a::Any|_)) -> a::Any);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("p", (4:_::Any|_)))]],
          (Sugartypes.Block
             ([], (Sugartypes.Projection ((Sugartypes.Var "p"), "4"))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("fifth", ((5:a::Any|_)) -> a::Any);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("p", (5:_::Any|_)))]],
          (Sugartypes.Block
             ([], (Sugartypes.Projection ((Sugartypes.Var "p"), "5"))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("sixth", ((6:a::Any|_)) -> a::Any);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("p", (6:_::Any|_)))]],
          (Sugartypes.Block
             ([], (Sugartypes.Projection ((Sugartypes.Var "p"), "6"))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("seventh", ((7:a::Any|_)) -> a::Any);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("p", (7:_::Any|_)))]],
          (Sugartypes.Block
             ([], (Sugartypes.Projection ((Sugartypes.Var "p"), "7"))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("eighth", ((8:a::Any|_)) -> a::Any);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("p", (8:_::Any|_)))]],
          (Sugartypes.Block
             ([], (Sugartypes.Projection ((Sugartypes.Var "p"), "8"))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("ninth", ((9:a::Any|_)) -> a::Any);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("p", (9:_::Any|_)))]],
          (Sugartypes.Block
             ([], (Sugartypes.Projection ((Sugartypes.Var "p"), "9"))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("tenth", ((10:a::Any|_)) -> a::Any);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("p", (10:_::Any|_)))]],
          (Sugartypes.Block
             ([], (Sugartypes.Projection ((Sugartypes.Var "p"), "10"))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("sum", ([Int]) ~> Int);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("ns", [Int]))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "fold_left"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some Int));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some Int));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.TAppl (
                     (Sugartypes.FreezeSection (Operators.Section.Name "+")),
                     [((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |wild|_ }))]
                     ));
                   (Sugartypes.Constant (CommonTypes.Constant.Int 0));
                   (Sugartypes.Var "ns")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("product", ([Int]) ~> Int);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("ns", [Int]))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "fold_left"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some Int));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some Int));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.TAppl (
                     (Sugartypes.FreezeSection (Operators.Section.Name "*")),
                     [((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |wild|_ }))]
                     ));
                   (Sugartypes.Constant (CommonTypes.Constant.Int 1));
                   (Sugartypes.Var "ns")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("mapi", ((a::Any, Int) ~b~> c, [a::Any]) ~b~> [c]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a],
         ([[(Sugartypes.Pattern.Variable ("f", (_::Any, Int) ~> _));
             (Sugartypes.Pattern.Variable ("xs", [_::Any]))]
            ],
          (Sugartypes.Block
             ([(Sugartypes.Funs
                  [{ Sugartypes.rec_binder = ("mi", (Int, [_::Any]) ~> [_]);
                     rec_linearity = CommonTypes.DeclaredLinearity.Unl;
                     rec_definition =
                     (([], (Some ((Int, [_::Any]) ~> [_], []))),
                      ([[(Sugartypes.Pattern.Variable ("i", Int));
                          (Sugartypes.Pattern.Variable ("xs", [_::Any]))]
                         ],
                       (Sugartypes.Block
                          ([],
                           (Sugartypes.Switch ((Sugartypes.Var "xs"),
                              [(Sugartypes.Pattern.Nil,
                                (Sugartypes.Block
                                   ([], (Sugartypes.ListLit ([], (Some _))))));
                                ((Sugartypes.Pattern.Cons (
                                    (Sugartypes.Pattern.Variable
                                       ("x", _::Any)),
                                    (Sugartypes.Pattern.Variable
                                       ("xs", [_::Any]))
                                    )),
                                 (Sugartypes.Block
                                    ([],
                                     (Sugartypes.InfixAppl (
                                        ([_; { |wild|_ }],
                                         Operators.BinaryOp.Cons),
                                        (Sugartypes.FnAppl (
                                           (Sugartypes.Var "f"),
                                           [(Sugartypes.Var "x");
                                             (Sugartypes.Var "i")]
                                           )),
                                        (Sugartypes.FnAppl (
                                           (Sugartypes.FreezeVar "mi"),
                                           [(Sugartypes.InfixAppl (
                                               ([{ |wild|_ }],
                                                (Operators.BinaryOp.Name "+")),
                                               (Sugartypes.Var "i"),
                                               (Sugartypes.Constant
                                                  (CommonTypes.Constant.Int 1))
                                               ));
                                             (Sugartypes.Var "xs")]
                                           ))
                                        )))))
                                ],
                              (Some [_])))))));
                     rec_location = CommonTypes.Location.Unknown;
                     rec_signature = None; rec_unsafe_signature = false;
                     rec_frozen = true;
                     rec_pos =
                     File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 213, column 218, to line 3642, column 3751
                     }
                    ])
                ],
              (Sugartypes.FnAppl ((Sugartypes.Var "mi"),
                 [(Sugartypes.Constant (CommonTypes.Constant.Int 0));
                   (Sugartypes.Var "xs")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder = ("substAt", ([a], Int, a) ~> [a]);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a::Row], (Some (([a], Int, a) ~> [a], [None; None]))),
          ([[(Sugartypes.Pattern.Variable ("xs", [_]));
              (Sugartypes.Pattern.Variable ("i", Int));
              (Sugartypes.Pattern.Variable ("y", _))]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "xs"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block
                       ([], (Sugartypes.ListLit ([], (Some _))))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Variable ("x", _)),
                        (Sugartypes.Pattern.Variable ("xs", [_])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.Conditional (
                            (Sugartypes.InfixAppl (
                               ([Int; { |wild|_ }],
                                (Operators.BinaryOp.Name "<=")),
                               (Sugartypes.Var "i"),
                               (Sugartypes.Constant
                                  (CommonTypes.Constant.Int 0))
                               )),
                            (Sugartypes.Block
                               ([],
                                (Sugartypes.InfixAppl (
                                   ([_; { |wild|_ }], Operators.BinaryOp.Cons),
                                   (Sugartypes.Var "y"),
                                   (Sugartypes.Var "xs"))))),
                            (Sugartypes.Block
                               ([],
                                (Sugartypes.InfixAppl (
                                   ([_; { |wild|_ }], Operators.BinaryOp.Cons),
                                   (Sugartypes.Var "x"),
                                   (Sugartypes.FnAppl (
                                      (Sugartypes.TAppl (
                                         (Sugartypes.FreezeVar "substAt"),
                                         [((Sugartypes.Datatype.Type
                                              (Sugartypes.Datatype.TypeVar
                                                 ("$none", None, `Rigid))),
                                           (Some _));
                                           ((Sugartypes.Datatype.Type
                                               (Sugartypes.Datatype.TypeVar
                                                  ("$none", None, `Rigid))),
                                            (Some { |_ }))
                                           ]
                                         )),
                                      [(Sugartypes.Var "xs");
                                        (Sugartypes.InfixAppl (
                                           ([{ |wild|_ }],
                                            Operators.BinaryOp.Minus),
                                           (Sugartypes.Var "i"),
                                           (Sugartypes.Constant
                                              (CommonTypes.Constant.Int 1))
                                           ));
                                        (Sugartypes.Var "y")]
                                      ))
                                   ))))
                            )))))
                    ],
                  (Some [_])))))));
         rec_location = CommonTypes.Location.Unknown;
         rec_signature =
         (Some ((Sugartypes.Datatype.Function (
                   [(Sugartypes.Datatype.List
                       (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)));
                     (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int);
                     (Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                   ([("wild",
                      (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                      ],
                    (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                   (Sugartypes.Datatype.List
                      (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                   )),
                (Some ([a], Int, a) ~> [a])));
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 223, column 229, to line 3802, column 3955
         }
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("reverse", ([a]) ~> [a]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("l", [_]))]],
          (Sugartypes.Block
             ([(Sugartypes.Funs
                  [{ Sugartypes.rec_binder = ("aux", ([a], [a]) ~> [a]);
                     rec_linearity = CommonTypes.DeclaredLinearity.Unl;
                     rec_definition =
                     (([a; a::Row], (Some (([a], [a]) ~> [a], [None; None]))),
                      ([[(Sugartypes.Pattern.Variable ("l", [_]));
                          (Sugartypes.Pattern.Variable ("o", [_]))]
                         ],
                       (Sugartypes.Block
                          ([],
                           (Sugartypes.Switch ((Sugartypes.Var "l"),
                              [(Sugartypes.Pattern.Nil,
                                (Sugartypes.Block ([], (Sugartypes.Var "o"))));
                                ((Sugartypes.Pattern.Cons (
                                    (Sugartypes.Pattern.Variable ("x", _)),
                                    (Sugartypes.Pattern.Variable ("xs", [_]))
                                    )),
                                 (Sugartypes.Block
                                    ([],
                                     (Sugartypes.FnAppl (
                                        (Sugartypes.TAppl (
                                           (Sugartypes.FreezeVar "aux"),
                                           [((Sugartypes.Datatype.Type
                                                (Sugartypes.Datatype.TypeVar
                                                   ("$none", None, `Rigid))),
                                             (Some _));
                                             ((Sugartypes.Datatype.Type
                                                 (Sugartypes.Datatype.TypeVar
                                                    ("$none", None, `Rigid))),
                                              (Some { |_ }))
                                             ]
                                           )),
                                        [(Sugartypes.Var "xs");
                                          (Sugartypes.InfixAppl (
                                             ([_; { |wild|_ }],
                                              Operators.BinaryOp.Cons),
                                             (Sugartypes.Var "x"),
                                             (Sugartypes.Var "o")))
                                          ]
                                        )))))
                                ],
                              (Some [_])))))));
                     rec_location = CommonTypes.Location.Unknown;
                     rec_signature = None; rec_unsafe_signature = false;
                     rec_frozen = true;
                     rec_pos =
                     File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 232, column 237, to line 3976, column 4070
                     }
                    ])
                ],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "aux"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Var "l"); (Sugartypes.ListLit ([], (Some _)))]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder = ("concat", ([[a]]) ~> [a]);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a::Row], (Some (([[a]]) ~> [a], [None; None]))),
          ([[(Sugartypes.Pattern.Variable ("list", [[_]]))]],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "list"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block
                       ([], (Sugartypes.ListLit ([], (Some _))))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Variable ("x", [_])),
                        (Sugartypes.Pattern.Variable ("xs", [[_]])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.InfixAppl (
                            ([_; { |wild|_ }], (Operators.BinaryOp.Name "++")),
                            (Sugartypes.Var "x"),
                            (Sugartypes.FnAppl (
                               (Sugartypes.TAppl (
                                  (Sugartypes.FreezeVar "concat"),
                                  [((Sugartypes.Datatype.Type
                                       (Sugartypes.Datatype.TypeVar
                                          ("$none", None, `Rigid))),
                                    (Some _));
                                    ((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some { |_ }))
                                    ]
                                  )),
                               [(Sugartypes.Var "xs")]))
                            )))))
                    ],
                  (Some [_])))))));
         rec_location = CommonTypes.Location.Unknown; rec_signature = None;
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 242, column 247, to line 4088, column 4184
         }
        ]);
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder = ("join", ([a], [[a]]) ~> [a]);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a::Row], (Some (([a], [[a]]) ~> [a], [None; None]))),
          ([[(Sugartypes.Pattern.Variable ("glue", [_]));
              (Sugartypes.Pattern.Variable ("list", [[_]]))]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "list"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block
                       ([], (Sugartypes.ListLit ([], (Some _))))));
                    ((Sugartypes.Pattern.List
                        [(Sugartypes.Pattern.Variable ("x", [_]))]),
                     (Sugartypes.Block ([], (Sugartypes.Var "x"))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Variable ("x", [_])),
                        (Sugartypes.Pattern.Variable ("xs", [[_]])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.InfixAppl (
                            ([_; { |wild|_ }], (Operators.BinaryOp.Name "++")),
                            (Sugartypes.Var "x"),
                            (Sugartypes.InfixAppl (
                               ([_; { |wild|_ }],
                                (Operators.BinaryOp.Name "++")),
                               (Sugartypes.Var "glue"),
                               (Sugartypes.FnAppl (
                                  (Sugartypes.TAppl (
                                     (Sugartypes.FreezeVar "join"),
                                     [((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some _));
                                       ((Sugartypes.Datatype.Type
                                           (Sugartypes.Datatype.TypeVar
                                              ("$none", None, `Rigid))),
                                        (Some { |_ }))
                                       ]
                                     )),
                                  [(Sugartypes.Var "glue");
                                    (Sugartypes.Var "xs")]
                                  ))
                               ))
                            )))))
                    ],
                  (Some [_])))))));
         rec_location = CommonTypes.Location.Unknown; rec_signature = None;
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 249, column 255, to line 4186, column 4314
         }
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("span", ((a) ~b~> Bool, [a]) ~b~> ([a], [a]));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("p", (_) ~> Bool));
             (Sugartypes.Pattern.Variable ("xs", [_]))]
            ],
          (Sugartypes.Block
             ([(Sugartypes.Funs
                  [{ Sugartypes.rec_binder =
                     ("go", ([a], [a], (a) ~b~> Bool) ~b~> ([a], [a]));
                     rec_linearity = CommonTypes.DeclaredLinearity.Unl;
                     rec_definition =
                     (([a; a::Row],
                       (Some (([a], [a], (a) ~b~> Bool) ~b~> ([a], [a]),
                              [None; None]))),
                      ([[(Sugartypes.Pattern.Variable ("acc", [_]));
                          (Sugartypes.Pattern.Variable ("xs", [_]));
                          (Sugartypes.Pattern.Variable ("p", (_) ~> Bool))]
                         ],
                       (Sugartypes.Block
                          ([],
                           (Sugartypes.Switch ((Sugartypes.Var "xs"),
                              [(Sugartypes.Pattern.Nil,
                                (Sugartypes.Block
                                   ([],
                                    (Sugartypes.TupleLit
                                       [(Sugartypes.Var "acc");
                                         (Sugartypes.ListLit ([], (Some _)))]))));
                                ((Sugartypes.Pattern.Cons (
                                    (Sugartypes.Pattern.Variable ("x", _)),
                                    (Sugartypes.Pattern.Variable ("xs", [_]))
                                    )),
                                 (Sugartypes.Block
                                    ([],
                                     (Sugartypes.Conditional (
                                        (Sugartypes.FnAppl (
                                           (Sugartypes.Var "p"),
                                           [(Sugartypes.Var "x")])),
                                        (Sugartypes.Block
                                           ([],
                                            (Sugartypes.FnAppl (
                                               (Sugartypes.TAppl (
                                                  (Sugartypes.FreezeVar "go"),
                                                  [((Sugartypes.Datatype.Type
                                                       (Sugartypes.Datatype.TypeVar
                                                          ("$none", None,
                                                           `Rigid))),
                                                    (Some _));
                                                    ((Sugartypes.Datatype.Type
                                                        (Sugartypes.Datatype.TypeVar
                                                           ("$none", None,
                                                            `Rigid))),
                                                     (Some { |_ }))
                                                    ]
                                                  )),
                                               [(Sugartypes.InfixAppl (
                                                   ([_; { |wild|_ }],
                                                    Operators.BinaryOp.Cons),
                                                   (Sugartypes.Var "x"),
                                                   (Sugartypes.Var "acc")));
                                                 (Sugartypes.Var "xs");
                                                 (Sugartypes.Var "p")]
                                               )))),
                                        (Sugartypes.Block
                                           ([],
                                            (Sugartypes.TupleLit
                                               [(Sugartypes.FnAppl (
                                                   (Sugartypes.TAppl (
                                                      (Sugartypes.FreezeVar
                                                         "reverse"),
                                                      [((Sugartypes.Datatype.Type
                                                           (Sugartypes.Datatype.TypeVar
                                                              ("$none", None,
                                                               `Rigid))),
                                                        (Some _));
                                                        ((Sugartypes.Datatype.Type
                                                            (Sugartypes.Datatype.TypeVar
                                                               ("$none",
                                                                None, `Rigid))),
                                                         (Some { |_ }))
                                                        ]
                                                      )),
                                                   [(Sugartypes.Var "acc")]));
                                                 (Sugartypes.InfixAppl (
                                                    ([_; { |wild|_ }],
                                                     Operators.BinaryOp.Cons),
                                                    (Sugartypes.Var "x"),
                                                    (Sugartypes.Var "xs")))
                                                 ])))
                                        )))))
                                ],
                              (Some ([a], [a]))))))));
                     rec_location = CommonTypes.Location.Unknown;
                     rec_signature = None; rec_unsafe_signature = false;
                     rec_frozen = true;
                     rec_pos =
                     File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 265, column 275, to line 4653, column 4860
                     }
                    ])
                ],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "go"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.ListLit ([], (Some _))); (Sugartypes.Var "xs");
                   (Sugartypes.Var "p")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Function (
                      [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                      ([("wild",
                         (Sugartypes.Datatype.Present
                            Sugartypes.Datatype.Unit))
                         ],
                       (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                      (Sugartypes.Datatype.Primitive
                         CommonTypes.Primitive.Bool)
                      ));
                    (Sugartypes.Datatype.List
                       (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                  (Sugartypes.Datatype.Tuple
                     [(Sugartypes.Datatype.List
                         (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)));
                       (Sugartypes.Datatype.List
                          (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                       ])
                  )),
               (Some ((a) ~b~> Bool, [a]) ~b~> ([a], [a]))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("takeWhile", ((a) ~b~> Bool, [a]) ~b~> [a]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("pred", (_) ~> Bool));
             (Sugartypes.Pattern.Variable ("list", [_]))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "first"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some [_]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |2:[_] }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |wild|_ }))
                      ]
                    )),
                 [(Sugartypes.FnAppl (
                     (Sugartypes.TAppl ((Sugartypes.FreezeVar "span"),
                        [((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some _));
                          ((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some { |_ }))
                          ]
                        )),
                     [(Sugartypes.Var "pred"); (Sugartypes.Var "list")]))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Function (
                      [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                      ([("wild",
                         (Sugartypes.Datatype.Present
                            Sugartypes.Datatype.Unit))
                         ],
                       (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                      (Sugartypes.Datatype.Primitive
                         CommonTypes.Primitive.Bool)
                      ));
                    (Sugartypes.Datatype.List
                       (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                  (Sugartypes.Datatype.List
                     (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                  )),
               (Some ((a) ~b~> Bool, [a]) ~b~> [a])));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("dropWhile", ((a) ~b~> Bool, [a]) ~b~> [a]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("pred", (_) ~> Bool));
             (Sugartypes.Pattern.Variable ("list", [_]))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "second"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some [_]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |1:[_] }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |wild|_ }))
                      ]
                    )),
                 [(Sugartypes.FnAppl (
                     (Sugartypes.TAppl ((Sugartypes.FreezeVar "span"),
                        [((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some _));
                          ((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some { |_ }))
                          ]
                        )),
                     [(Sugartypes.Var "pred"); (Sugartypes.Var "list")]))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Function (
                      [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                      ([("wild",
                         (Sugartypes.Datatype.Present
                            Sugartypes.Datatype.Unit))
                         ],
                       (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                      (Sugartypes.Datatype.Primitive
                         CommonTypes.Primitive.Bool)
                      ));
                    (Sugartypes.Datatype.List
                       (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                  (Sugartypes.Datatype.List
                     (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                  )),
               (Some ((a) ~b~> Bool, [a]) ~b~> [a])));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("abs", (Int) -> Int);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("i", Int))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.Conditional (
                 (Sugartypes.InfixAppl (
                    ([Int; { |_ }], (Operators.BinaryOp.Name "<")),
                    (Sugartypes.Var "i"),
                    (Sugartypes.Constant (CommonTypes.Constant.Int 0)))),
                 (Sugartypes.UnaryAppl (([{ |_ }], Operators.UnaryOp.Minus),
                    (Sugartypes.Var "i"))),
                 (Sugartypes.Var "i")))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int))),
               (Some (Int) -> Int)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder = ("init", ([a]) ~> [a]);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a::Row], (Some (([a]) ~> [a], [None; None]))),
          ([[(Sugartypes.Pattern.Variable ("list", [_]))]],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "list"),
                  [((Sugartypes.Pattern.List
                       [(Sugartypes.Pattern.Variable ("y", _))]),
                    (Sugartypes.Block
                       ([], (Sugartypes.ListLit ([], (Some _))))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Variable ("h", _)),
                        (Sugartypes.Pattern.Variable ("t", [_])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.InfixAppl (
                            ([_; { |wild|_ }], Operators.BinaryOp.Cons),
                            (Sugartypes.Var "h"),
                            (Sugartypes.FnAppl (
                               (Sugartypes.TAppl (
                                  (Sugartypes.FreezeVar "init"),
                                  [((Sugartypes.Datatype.Type
                                       (Sugartypes.Datatype.TypeVar
                                          ("$none", None, `Rigid))),
                                    (Some _));
                                    ((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some { |_ }))
                                    ]
                                  )),
                               [(Sugartypes.Var "t")]))
                            )))))
                    ],
                  (Some [_])))))));
         rec_location = CommonTypes.Location.Unknown;
         rec_signature =
         (Some ((Sugartypes.Datatype.Function (
                   [(Sugartypes.Datatype.List
                       (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                     ],
                   ([("wild",
                      (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                      ],
                    (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                   (Sugartypes.Datatype.List
                      (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                   )),
                (Some ([a]) ~> [a])));
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 313, column 318, to line 5588, column 5677
         }
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("curtail", ([a]) ~> [a]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("list", [_]))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "init"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Var "list")]))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder = ("last", ([a]) ~> a);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a::Row], (Some (([a]) ~> a, [None; None]))),
          ([[(Sugartypes.Pattern.Variable ("list", [_]))]],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "list"),
                  [((Sugartypes.Pattern.List
                       [(Sugartypes.Pattern.Variable ("x", _))]),
                    (Sugartypes.Block ([], (Sugartypes.Var "x"))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Variable ("h", _)),
                        (Sugartypes.Pattern.Variable ("t", [_])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.FnAppl (
                            (Sugartypes.TAppl ((Sugartypes.FreezeVar "last"),
                               [((Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("$none", None, `Rigid))),
                                 (Some _));
                                 ((Sugartypes.Datatype.Type
                                     (Sugartypes.Datatype.TypeVar
                                        ("$none", None, `Rigid))),
                                  (Some { |_ }))
                                 ]
                               )),
                            [(Sugartypes.Var "t")])))))
                    ],
                  (Some _)))))));
         rec_location = CommonTypes.Location.Unknown;
         rec_signature =
         (Some ((Sugartypes.Datatype.Function (
                   [(Sugartypes.Datatype.List
                       (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                     ],
                   ([("wild",
                      (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                      ],
                    (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                   (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))),
                (Some ([a]) ~> a)));
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 323, column 328, to line 5735, column 5820
         }
        ]);
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder = ("intercalate", ([a], [[a]]) ~> [a]);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a::Row], (Some (([a], [[a]]) ~> [a], [None; None]))),
          ([[(Sugartypes.Pattern.Variable ("bone", [_]));
              (Sugartypes.Pattern.Variable ("rushes", [[_]]))]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "rushes"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block
                       ([], (Sugartypes.ListLit ([], (Some _))))));
                    ((Sugartypes.Pattern.List
                        [(Sugartypes.Pattern.Variable ("x", [_]))]),
                     (Sugartypes.Block ([], (Sugartypes.Var "x"))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Variable ("x", [_])),
                        (Sugartypes.Pattern.Variable ("xs", [[_]])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.InfixAppl (
                            ([_; { |wild|_ }], (Operators.BinaryOp.Name "++")),
                            (Sugartypes.Var "x"),
                            (Sugartypes.InfixAppl (
                               ([_; { |wild|_ }],
                                (Operators.BinaryOp.Name "++")),
                               (Sugartypes.Var "bone"),
                               (Sugartypes.FnAppl (
                                  (Sugartypes.TAppl (
                                     (Sugartypes.FreezeVar "intercalate"),
                                     [((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some _));
                                       ((Sugartypes.Datatype.Type
                                           (Sugartypes.Datatype.TypeVar
                                              ("$none", None, `Rigid))),
                                        (Some { |_ }))
                                       ]
                                     )),
                                  [(Sugartypes.Var "bone");
                                    (Sugartypes.Var "xs")]
                                  ))
                               ))
                            )))))
                    ],
                  (Some [_])))))));
         rec_location = CommonTypes.Location.Unknown; rec_signature = None;
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 330, column 336, to line 5822, column 5968
         }
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("unlines", ([String]) ~> String);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("ws", [String]))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "implode"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |_ }))]
                    )),
                 [(Sugartypes.FnAppl (
                     (Sugartypes.TAppl ((Sugartypes.FreezeVar "intercalate"),
                        [((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some Char));
                          ((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some { |_ }))
                          ]
                        )),
                     [(Sugartypes.FnAppl (
                         (Sugartypes.TAppl ((Sugartypes.FreezeVar "explode"),
                            [((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some { |_ }))]
                            )),
                         [(Sugartypes.Constant
                             (CommonTypes.Constant.String "\n"))
                           ]
                         ));
                       (Sugartypes.FnAppl (
                          (Sugartypes.TAppl ((Sugartypes.FreezeVar "map"),
                             [((Sugartypes.Datatype.Type
                                  (Sugartypes.Datatype.TypeVar
                                     ("$none", None, `Rigid))),
                               (Some String));
                               ((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { |wild|_ }));
                               ((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some [Char]))
                               ]
                             )),
                          [(Sugartypes.TAppl (
                              (Sugartypes.FreezeVar "explode"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { |_ }))]
                              ));
                            (Sugartypes.Var "ws")]
                          ))
                       ]
                     ))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.List
                      (Sugartypes.Datatype.Primitive
                         CommonTypes.Primitive.String))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.Primitive CommonTypes.Primitive.String)
                  )),
               (Some ([String]) ~> String)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("unwords", ([String]) ~> String);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("ws", [String]))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "implode"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |_ }))]
                    )),
                 [(Sugartypes.FnAppl (
                     (Sugartypes.TAppl ((Sugartypes.FreezeVar "intercalate"),
                        [((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some Char));
                          ((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some { |_ }))
                          ]
                        )),
                     [(Sugartypes.FnAppl (
                         (Sugartypes.TAppl ((Sugartypes.FreezeVar "explode"),
                            [((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some { |_ }))]
                            )),
                         [(Sugartypes.Constant
                             (CommonTypes.Constant.String " "))
                           ]
                         ));
                       (Sugartypes.FnAppl (
                          (Sugartypes.TAppl ((Sugartypes.FreezeVar "map"),
                             [((Sugartypes.Datatype.Type
                                  (Sugartypes.Datatype.TypeVar
                                     ("$none", None, `Rigid))),
                               (Some String));
                               ((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { |wild|_ }));
                               ((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some [Char]))
                               ]
                             )),
                          [(Sugartypes.TAppl (
                              (Sugartypes.FreezeVar "explode"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { |_ }))]
                              ));
                            (Sugartypes.Var "ws")]
                          ))
                       ]
                     ))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.List
                      (Sugartypes.Datatype.Primitive
                         CommonTypes.Primitive.String))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.Primitive CommonTypes.Primitive.String)
                  )),
               (Some ([String]) ~> String)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Typenames
      [("Maybe", [(("a", (None, None), `Rigid), (Some a))],
        ((Sugartypes.Datatype.Variant
            ([("Nothing",
               (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit));
               ("Just",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.TypeVar ("a", None, `Rigid))))
               ],
             Sugartypes.Datatype.Closed)),
         (Some [|Just:_|Nothing|])),
        File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 375, columns 6867 to 6908)
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("isJust", (Maybe (_)) -> Bool);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("x", Maybe (_)))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.Switch ((Sugartypes.Var "x"),
                 [((Sugartypes.Pattern.Variant ("Just",
                      (Some (Sugartypes.Pattern.Variable ("x", _))))),
                   (Sugartypes.Block
                      ([],
                       (Sugartypes.Constant (CommonTypes.Constant.Bool true)))));
                   ((Sugartypes.Pattern.Variant ("Nothing", None)),
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.Constant
                           (CommonTypes.Constant.Bool false)))))
                   ],
                 (Some Bool)))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Maybe",
                      [(Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                        ]
                      ))
                    ],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Bool)
                  )),
               (Some (Maybe (_)) -> Bool)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder =
         ("search", ((a) ~b~> Bool, [a]) ~b~> Maybe (a));
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a::Row],
           (Some (((a) ~b~> Bool, [a]) ~b~> Maybe (a), [None; None]))),
          ([[(Sugartypes.Pattern.Variable ("p", (_) ~> Bool));
              (Sugartypes.Pattern.Variable ("l", [_]))]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "l"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.ConstructorLit ("Nothing", None,
                           (Some [|Nothing|Just:_|]))))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Variable ("x", _)),
                        (Sugartypes.Pattern.Variable ("xs", [_])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.Conditional (
                            (Sugartypes.FnAppl ((Sugartypes.Var "p"),
                               [(Sugartypes.Var "x")])),
                            (Sugartypes.ConstructorLit ("Just",
                               (Some (Sugartypes.TupleLit
                                        [(Sugartypes.Var "x")])),
                               (Some [|Just:_|Nothing|]))),
                            (Sugartypes.FnAppl (
                               (Sugartypes.TAppl (
                                  (Sugartypes.FreezeVar "search"),
                                  [((Sugartypes.Datatype.Type
                                       (Sugartypes.Datatype.TypeVar
                                          ("$none", None, `Rigid))),
                                    (Some _));
                                    ((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some { |_ }))
                                    ]
                                  )),
                               [(Sugartypes.Var "p"); (Sugartypes.Var "xs")]
                               ))
                            )))))
                    ],
                  (Some [|Just:_|Nothing|])))))));
         rec_location = CommonTypes.Location.Unknown;
         rec_signature =
         (Some ((Sugartypes.Datatype.Function (
                   [(Sugartypes.Datatype.Function (
                       [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                       ([("wild",
                          (Sugartypes.Datatype.Present
                             Sugartypes.Datatype.Unit))
                          ],
                        (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                       (Sugartypes.Datatype.Primitive
                          CommonTypes.Primitive.Bool)
                       ));
                     (Sugartypes.Datatype.List
                        (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                     ],
                   ([("wild",
                      (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                      ],
                    (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                   (Sugartypes.Datatype.TypeApplication ("Maybe",
                      [(Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                        ]
                      ))
                   )),
                (Some ((a) ~b~> Bool, [a]) ~b~> Maybe (a))));
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 386, column 392, to line 7083, column 7216
         }
        ]);
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder = ("find", ((a) ~b~> Bool, [a]) ~b~> a);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a::Row], (Some (((a) ~b~> Bool, [a]) ~b~> a, [None; None]))),
          ([[(Sugartypes.Pattern.Variable ("p", (_) ~> Bool));
              (Sugartypes.Pattern.Variable ("l", [_]))]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "l"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.FnAppl (
                           (Sugartypes.TAppl ((Sugartypes.FreezeVar "error"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { |_ }));
                                ((Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("$none", None, `Rigid))),
                                 (Some _))
                                ]
                              )),
                           [(Sugartypes.Constant
                               (CommonTypes.Constant.String "Not_found"))
                             ]
                           )))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Variable ("x", _)),
                        (Sugartypes.Pattern.Variable ("xs", [_])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.Conditional (
                            (Sugartypes.FnAppl ((Sugartypes.Var "p"),
                               [(Sugartypes.Var "x")])),
                            (Sugartypes.Var "x"),
                            (Sugartypes.FnAppl (
                               (Sugartypes.TAppl (
                                  (Sugartypes.FreezeVar "find"),
                                  [((Sugartypes.Datatype.Type
                                       (Sugartypes.Datatype.TypeVar
                                          ("$none", None, `Rigid))),
                                    (Some _));
                                    ((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some { |_ }))
                                    ]
                                  )),
                               [(Sugartypes.Var "p"); (Sugartypes.Var "xs")]
                               ))
                            )))))
                    ],
                  (Some _)))))));
         rec_location = CommonTypes.Location.Unknown;
         rec_signature =
         (Some ((Sugartypes.Datatype.Function (
                   [(Sugartypes.Datatype.Function (
                       [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                       ([("wild",
                          (Sugartypes.Datatype.Present
                             Sugartypes.Datatype.Unit))
                          ],
                        (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                       (Sugartypes.Datatype.Primitive
                          CommonTypes.Primitive.Bool)
                       ));
                     (Sugartypes.Datatype.List
                        (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                     ],
                   ([("wild",
                      (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                      ],
                    (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                   (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))),
                (Some ((a) ~b~> Bool, [a]) ~b~> a)));
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 395, column 401, to line 7257, column 7391
         }
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("fromJust", (Maybe (a)) ~> a);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("x", Maybe (_)))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.Switch ((Sugartypes.Var "x"),
                 [((Sugartypes.Pattern.Variant ("Just",
                      (Some (Sugartypes.Pattern.Variable ("x", _))))),
                   (Sugartypes.Block ([], (Sugartypes.Var "x"))));
                   ((Sugartypes.Pattern.Variant ("Nothing", None)),
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.FnAppl (
                           (Sugartypes.TAppl ((Sugartypes.FreezeVar "error"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { |_ }));
                                ((Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("$none", None, `Rigid))),
                                 (Some _))
                                ]
                              )),
                           [(Sugartypes.Constant
                               (CommonTypes.Constant.String "fromJust failed"))
                             ]
                           )))))
                   ],
                 (Some _)))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Maybe",
                      [(Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                        ]
                      ))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))),
               (Some (Maybe (a)) ~> a)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("fromMaybe", (Maybe (a), a) -> a);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("x", Maybe (_)));
             (Sugartypes.Pattern.Variable ("y", _))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.Switch ((Sugartypes.Var "x"),
                 [((Sugartypes.Pattern.Variant ("Just",
                      (Some (Sugartypes.Pattern.Variable ("x", _))))),
                   (Sugartypes.Block ([], (Sugartypes.Var "x"))));
                   ((Sugartypes.Pattern.Variant ("Nothing", None)),
                    (Sugartypes.Block ([], (Sugartypes.Var "y"))))
                   ],
                 (Some _)))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Maybe",
                      [(Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                        ]
                      ));
                    (Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))),
               (Some (Maybe (a), a) -> a)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("empty", ([_]) -> Bool);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("l", [_]))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.Switch ((Sugartypes.Var "l"),
                 [(Sugartypes.Pattern.Nil,
                   (Sugartypes.Block
                      ([],
                       (Sugartypes.Constant (CommonTypes.Constant.Bool true)))));
                   (Sugartypes.Pattern.Any,
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.Constant
                           (CommonTypes.Constant.Bool false)))))
                   ],
                 (Some Bool)))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.List
                      (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                    ],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Bool)
                  )),
               (Some ([_]) -> Bool)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder = ("memassoc", (a, [(a, _)]) ~> Bool);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a; a::Row], (Some ((a, [(a, _)]) ~> Bool, [None; None; None]))),
          ([[(Sugartypes.Pattern.Variable ("x", _));
              (Sugartypes.Pattern.Variable ("l", [(_, _)]))]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "l"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.Constant
                           (CommonTypes.Constant.Bool false)))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Tuple
                           [(Sugartypes.Pattern.Variable ("k", _));
                             (Sugartypes.Pattern.Variable ("v", _))]),
                        (Sugartypes.Pattern.Variable ("xs", [(_, _)])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.InfixAppl (
                            ([{ |wild|_ }], Operators.BinaryOp.Or),
                            (Sugartypes.InfixAppl (
                               ([_; { |wild|_ }],
                                (Operators.BinaryOp.Name "==")),
                               (Sugartypes.Var "k"), (Sugartypes.Var "x"))),
                            (Sugartypes.FnAppl (
                               (Sugartypes.TAppl (
                                  (Sugartypes.FreezeVar "memassoc"),
                                  [((Sugartypes.Datatype.Type
                                       (Sugartypes.Datatype.TypeVar
                                          ("$none", None, `Rigid))),
                                    (Some _));
                                    ((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some _));
                                    ((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some { |_ }))
                                    ]
                                  )),
                               [(Sugartypes.Var "x"); (Sugartypes.Var "xs")]
                               ))
                            )))))
                    ],
                  (Some Bool)))))));
         rec_location = CommonTypes.Location.Unknown;
         rec_signature =
         (Some ((Sugartypes.Datatype.Function (
                   [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                     (Sugartypes.Datatype.List
                        (Sugartypes.Datatype.Tuple
                           [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                             (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))
                             ]))
                     ],
                   ([("wild",
                      (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                      ],
                    (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Bool)
                   )),
                (Some (a, [(a, _)]) ~> Bool)));
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 433, column 438, to line 7997, column 8109
         }
        ]);
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder = ("lookup", (a, [(a, b)]) ~> Maybe (b));
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a; a::Row],
           (Some ((a, [(a, b)]) ~> Maybe (b), [None; None; None]))),
          ([[(Sugartypes.Pattern.Variable ("x", _));
              (Sugartypes.Pattern.Variable ("l", [(_, _)]))]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "l"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.ConstructorLit ("Nothing", None,
                           (Some [|Nothing|Just:_|]))))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Tuple
                           [(Sugartypes.Pattern.Variable ("a", _));
                             (Sugartypes.Pattern.Variable ("b", _))]),
                        (Sugartypes.Pattern.Variable ("xs", [(_, _)])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.Conditional (
                            (Sugartypes.InfixAppl (
                               ([_; { |wild|_ }],
                                (Operators.BinaryOp.Name "==")),
                               (Sugartypes.Var "a"), (Sugartypes.Var "x"))),
                            (Sugartypes.ConstructorLit ("Just",
                               (Some (Sugartypes.TupleLit
                                        [(Sugartypes.Var "b")])),
                               (Some [|Just:_|Nothing|]))),
                            (Sugartypes.FnAppl (
                               (Sugartypes.TAppl (
                                  (Sugartypes.FreezeVar "lookup"),
                                  [((Sugartypes.Datatype.Type
                                       (Sugartypes.Datatype.TypeVar
                                          ("$none", None, `Rigid))),
                                    (Some _));
                                    ((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some _));
                                    ((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some { |_ }))
                                    ]
                                  )),
                               [(Sugartypes.Var "x"); (Sugartypes.Var "xs")]
                               ))
                            )))))
                    ],
                  (Some [|Just:_|Nothing|])))))));
         rec_location = CommonTypes.Location.Unknown;
         rec_signature =
         (Some ((Sugartypes.Datatype.Function (
                   [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                     (Sugartypes.Datatype.List
                        (Sugartypes.Datatype.Tuple
                           [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                             (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))
                             ]))
                     ],
                   ([("wild",
                      (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                      ],
                    (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                   (Sugartypes.Datatype.TypeApplication ("Maybe",
                      [(Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar ("b", None, `Rigid)))
                        ]
                      ))
                   )),
                (Some (a, [(a, b)]) ~> Maybe (b))));
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 441, column 447, to line 8149, column 8292
         }
        ]);
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder = ("assoc", (String, [(String, a)]) ~> a);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a::Row], (Some ((String, [(String, a)]) ~> a, [None; None]))),
          ([[(Sugartypes.Pattern.Variable ("x", String));
              (Sugartypes.Pattern.Variable ("l", [(String, _)]))]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "l"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.FnAppl (
                           (Sugartypes.TAppl ((Sugartypes.FreezeVar "error"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { |_ }));
                                ((Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("$none", None, `Rigid))),
                                 (Some _))
                                ]
                              )),
                           [(Sugartypes.InfixAppl (
                               ([{ |wild|_ }], (Operators.BinaryOp.Name "^^")),
                               (Sugartypes.Constant
                                  (CommonTypes.Constant.String "Not found ")),
                               (Sugartypes.Var "x")))
                             ]
                           )))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Tuple
                           [(Sugartypes.Pattern.Variable ("k", String));
                             (Sugartypes.Pattern.Variable ("v", _))]),
                        (Sugartypes.Pattern.Variable ("xs", [(String, _)])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.Conditional (
                            (Sugartypes.InfixAppl (
                               ([String; { |wild|_ }],
                                (Operators.BinaryOp.Name "==")),
                               (Sugartypes.Var "k"), (Sugartypes.Var "x"))),
                            (Sugartypes.Var "v"),
                            (Sugartypes.FnAppl (
                               (Sugartypes.TAppl (
                                  (Sugartypes.FreezeVar "assoc"),
                                  [((Sugartypes.Datatype.Type
                                       (Sugartypes.Datatype.TypeVar
                                          ("$none", None, `Rigid))),
                                    (Some _));
                                    ((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some { |_ }))
                                    ]
                                  )),
                               [(Sugartypes.Var "x"); (Sugartypes.Var "xs")]
                               ))
                            )))))
                    ],
                  (Some _)))))));
         rec_location = CommonTypes.Location.Unknown;
         rec_signature =
         (Some ((Sugartypes.Datatype.Function (
                   [(Sugartypes.Datatype.Primitive
                       CommonTypes.Primitive.String);
                     (Sugartypes.Datatype.List
                        (Sugartypes.Datatype.Tuple
                           [(Sugartypes.Datatype.Primitive
                               CommonTypes.Primitive.String);
                             (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))
                             ]))
                     ],
                   ([("wild",
                      (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                      ],
                    (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                   (Sugartypes.Datatype.TypeVar ("b", None, `Rigid)))),
                (Some (String, [(String, a)]) ~> a)));
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 450, column 456, to line 8333, column 8489
         }
        ]);
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder = ("removeAssoc", (a, [(a, b)]) ~> [(a, b)]);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a; a::Row],
           (Some ((a, [(a, b)]) ~> [(a, b)], [None; None; None]))),
          ([[(Sugartypes.Pattern.Variable ("x", _));
              (Sugartypes.Pattern.Variable ("l", [(_, _)]))]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "l"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block
                       ([], (Sugartypes.ListLit ([], (Some (_, _)))))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Tuple
                           [(Sugartypes.Pattern.Variable ("k", _));
                             (Sugartypes.Pattern.Variable ("v", _))]),
                        (Sugartypes.Pattern.Variable ("xs", [(_, _)])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.Conditional (
                            (Sugartypes.InfixAppl (
                               ([_; { |wild|_ }],
                                (Operators.BinaryOp.Name "==")),
                               (Sugartypes.Var "k"), (Sugartypes.Var "x"))),
                            (Sugartypes.Var "xs"),
                            (Sugartypes.InfixAppl (
                               ([(_, _); { |wild|_ }],
                                Operators.BinaryOp.Cons),
                               (Sugartypes.TupleLit
                                  [(Sugartypes.Var "k"); (Sugartypes.Var "v")
                                    ]),
                               (Sugartypes.FnAppl (
                                  (Sugartypes.TAppl (
                                     (Sugartypes.FreezeVar "removeAssoc"),
                                     [((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some _));
                                       ((Sugartypes.Datatype.Type
                                           (Sugartypes.Datatype.TypeVar
                                              ("$none", None, `Rigid))),
                                        (Some _));
                                       ((Sugartypes.Datatype.Type
                                           (Sugartypes.Datatype.TypeVar
                                              ("$none", None, `Rigid))),
                                        (Some { |_ }))
                                       ]
                                     )),
                                  [(Sugartypes.Var "x");
                                    (Sugartypes.Var "xs")]
                                  ))
                               ))
                            )))))
                    ],
                  (Some [(_, _)])))))));
         rec_location = CommonTypes.Location.Unknown;
         rec_signature =
         (Some ((Sugartypes.Datatype.Function (
                   [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                     (Sugartypes.Datatype.List
                        (Sugartypes.Datatype.Tuple
                           [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                             (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))
                             ]))
                     ],
                   ([("wild",
                      (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                      ],
                    (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                   (Sugartypes.Datatype.List
                      (Sugartypes.Datatype.Tuple
                         [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                           (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))]))
                   )),
                (Some (a, [(a, b)]) ~> [(a, b)])));
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 459, column 465, to line 8532, column 8682
         }
        ]);
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder = ("assocAll", (String, [(String, a)]) ~> [a]);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a::Row], (Some ((String, [(String, a)]) ~> [a], [None; None]))),
          ([[(Sugartypes.Pattern.Variable ("x", String));
              (Sugartypes.Pattern.Variable ("l", [(String, _)]))]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "l"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block
                       ([], (Sugartypes.ListLit ([], (Some _))))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Tuple
                           [(Sugartypes.Pattern.Variable ("k", String));
                             (Sugartypes.Pattern.Variable ("v", _))]),
                        (Sugartypes.Pattern.Variable ("xs", [(String, _)])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.Conditional (
                            (Sugartypes.InfixAppl (
                               ([String; { |wild|_ }],
                                (Operators.BinaryOp.Name "==")),
                               (Sugartypes.Var "k"), (Sugartypes.Var "x"))),
                            (Sugartypes.TupleLit
                               [(Sugartypes.InfixAppl (
                                   ([_; { |wild|_ }], Operators.BinaryOp.Cons),
                                   (Sugartypes.Var "v"),
                                   (Sugartypes.FnAppl (
                                      (Sugartypes.TAppl (
                                         (Sugartypes.FreezeVar "assocAll"),
                                         [((Sugartypes.Datatype.Type
                                              (Sugartypes.Datatype.TypeVar
                                                 ("$none", None, `Rigid))),
                                           (Some _));
                                           ((Sugartypes.Datatype.Type
                                               (Sugartypes.Datatype.TypeVar
                                                  ("$none", None, `Rigid))),
                                            (Some { |_ }))
                                           ]
                                         )),
                                      [(Sugartypes.Var "x");
                                        (Sugartypes.Var "xs")]
                                      ))
                                   ))
                                 ]),
                            (Sugartypes.FnAppl (
                               (Sugartypes.TAppl (
                                  (Sugartypes.FreezeVar "assocAll"),
                                  [((Sugartypes.Datatype.Type
                                       (Sugartypes.Datatype.TypeVar
                                          ("$none", None, `Rigid))),
                                    (Some _));
                                    ((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some { |_ }))
                                    ]
                                  )),
                               [(Sugartypes.Var "x"); (Sugartypes.Var "xs")]
                               ))
                            )))))
                    ],
                  (Some [_])))))));
         rec_location = CommonTypes.Location.Unknown;
         rec_signature =
         (Some ((Sugartypes.Datatype.Function (
                   [(Sugartypes.Datatype.Primitive
                       CommonTypes.Primitive.String);
                     (Sugartypes.Datatype.List
                        (Sugartypes.Datatype.Tuple
                           [(Sugartypes.Datatype.Primitive
                               CommonTypes.Primitive.String);
                             (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))
                             ]))
                     ],
                   ([("wild",
                      (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                      ],
                    (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                   (Sugartypes.Datatype.List
                      (Sugartypes.Datatype.TypeVar ("b", None, `Rigid)))
                   )),
                (Some (String, [(String, a)]) ~> [a])));
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 468, column 476, to line 8728, column 8933
         }
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("isInt", (String) -> Bool);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("x", String))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "tilde"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |_ }))]
                    )),
                 [(Sugartypes.Var "x");
                   (Sugartypes.Block
                      ([],
                       (Sugartypes.ConstructorLit ("Seq",
                          (Some (Sugartypes.ListLit (
                                   [(Sugartypes.ConstructorLit ("Repeat",
                                       (Some (Sugartypes.TupleLit
                                                [(Sugartypes.ConstructorLit (
                                                    "Question", None,
                                                    (Some Regex)));
                                                  (Sugartypes.ConstructorLit (
                                                     "Simply",
                                                     (Some (Sugartypes.Constant
                                                              (CommonTypes.Constant.String
                                                                 "-"))),
                                                     (Some Regex)))
                                                  ])),
                                       (Some Regex)));
                                     (Sugartypes.ConstructorLit ("Repeat",
                                        (Some (Sugartypes.TupleLit
                                                 [(Sugartypes.ConstructorLit (
                                                     "Plus", None,
                                                     (Some Regex)));
                                                   (Sugartypes.ConstructorLit (
                                                      "Range",
                                                      (Some (Sugartypes.TupleLit
                                                               [(Sugartypes.Constant
                                                                   (CommonTypes.Constant.Char
                                                                    '0'));
                                                                 (Sugartypes.Constant
                                                                    (
                                                                    CommonTypes.Constant.Char
                                                                    '9'))
                                                                 ])),
                                                      (Some Regex)))
                                                   ])),
                                        (Some Regex)));
                                     (Sugartypes.ConstructorLit ("EndAnchor",
                                        None, (Some Regex)))
                                     ],
                                   (Some [Regex])))),
                          (Some Regex)))))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.String)
                    ],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Bool)
                  )),
               (Some (String) -> Bool)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("isFloat", (String) -> Bool);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("x", String))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "tilde"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |_ }))]
                    )),
                 [(Sugartypes.Var "x");
                   (Sugartypes.Block
                      ([],
                       (Sugartypes.ConstructorLit ("Seq",
                          (Some (Sugartypes.ListLit (
                                   [(Sugartypes.ConstructorLit ("Repeat",
                                       (Some (Sugartypes.TupleLit
                                                [(Sugartypes.ConstructorLit (
                                                    "Question", None,
                                                    (Some Regex)));
                                                  (Sugartypes.ConstructorLit (
                                                     "Simply",
                                                     (Some (Sugartypes.Constant
                                                              (CommonTypes.Constant.String
                                                                 "-"))),
                                                     (Some Regex)))
                                                  ])),
                                       (Some Regex)));
                                     (Sugartypes.ConstructorLit ("Repeat",
                                        (Some (Sugartypes.TupleLit
                                                 [(Sugartypes.ConstructorLit (
                                                     "Plus", None,
                                                     (Some Regex)));
                                                   (Sugartypes.ConstructorLit (
                                                      "Range",
                                                      (Some (Sugartypes.TupleLit
                                                               [(Sugartypes.Constant
                                                                   (CommonTypes.Constant.Char
                                                                    '0'));
                                                                 (Sugartypes.Constant
                                                                    (
                                                                    CommonTypes.Constant.Char
                                                                    '9'))
                                                                 ])),
                                                      (Some Regex)))
                                                   ])),
                                        (Some Regex)));
                                     (Sugartypes.ConstructorLit ("Repeat",
                                        (Some (Sugartypes.TupleLit
                                                 [(Sugartypes.ConstructorLit (
                                                     "Question", None,
                                                     (Some Regex)));
                                                   (Sugartypes.ConstructorLit (
                                                      "Group",
                                                      (Some (Sugartypes.ConstructorLit (
                                                               "Seq",
                                                               (Some (
                                                               Sugartypes.ListLit (
                                                                 [(Sugartypes.ConstructorLit (
                                                                    "Quote",
                                                                    (Some (
                                                                    Sugartypes.ConstructorLit (
                                                                    "Simply",
                                                                    (Some (
                                                                    Sugartypes.Constant
                                                                    (CommonTypes.Constant.String
                                                                    "."))),
                                                                    (Some Regex)
                                                                    ))),
                                                                    (Some Regex)
                                                                    ));
                                                                   (Sugartypes.ConstructorLit (
                                                                    "Repeat",
                                                                    (Some (
                                                                    Sugartypes.TupleLit
                                                                    [(Sugartypes.ConstructorLit (
                                                                    "Plus",
                                                                    None,
                                                                    (Some Regex)
                                                                    ));
                                                                    (Sugartypes.ConstructorLit (
                                                                    "Range",
                                                                    (Some (
                                                                    Sugartypes.TupleLit
                                                                    [(Sugartypes.Constant
                                                                    (CommonTypes.Constant.Char
                                                                    '0'));
                                                                    (Sugartypes.Constant
                                                                    (CommonTypes.Constant.Char
                                                                    '9'))])),
                                                                    (Some Regex)
                                                                    ))])),
                                                                    (Some Regex)
                                                                    ))
                                                                   ],
                                                                 (Some [Regex])
                                                                 ))),
                                                               (Some Regex)))),
                                                      (Some Regex)))
                                                   ])),
                                        (Some Regex)));
                                     (Sugartypes.ConstructorLit ("EndAnchor",
                                        None, (Some Regex)))
                                     ],
                                   (Some [Regex])))),
                          (Some Regex)))))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.String)
                    ],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Bool)
                  )),
               (Some (String) -> Bool)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("asList",
         (TableHandle((|a::Base),(|_::Base),(|_::Base))) -> [(|a::Base)]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row(Unl,Base); a::Row(Unl,Base); a::Row(Unl,Base); a::Row],
         ([[(Sugartypes.Pattern.Variable
               ("t", TableHandle((|_::Base),(|_::Base),(|_::Base))))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.Query (None,
                 (Sugartypes.FnAppl (
                    (Sugartypes.TAppl ((Sugartypes.FreezeVar "concatMap"),
                       [((Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeVar
                               ("$none", None, `Rigid))),
                         (Some (|_::Base)));
                         ((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some {  }));
                         ((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some (|_::Base)))
                         ]
                       )),
                    [(Sugartypes.Block
                        ([(Sugartypes.Fun
                             { Sugartypes.fun_binder =
                               ("_fun__g29", ((|a::Base)) {}-> [(|a::Base)]);
                               fun_linearity =
                               CommonTypes.DeclaredLinearity.Unl;
                               fun_definition =
                               ([],
                                ([[(Sugartypes.Pattern.As (
                                      ("_for__g2",
                                       TableHandle((|_::Base),(|_::Base),(|_::Base))),
                                      (Sugartypes.Pattern.Variable
                                         ("x", (|_::Base)))
                                      ))
                                    ]
                                   ],
                                 (Sugartypes.ListLit ([(Sugartypes.Var "x")],
                                    (Some (|_::Base))))));
                               fun_location = CommonTypes.Location.Unknown;
                               fun_signature = None;
                               fun_unsafe_signature = false;
                               fun_frozen = true })
                           ],
                         (Sugartypes.FreezeVar "_fun__g29")));
                      (Sugartypes.FnAppl (
                         (Sugartypes.TAppl ((Sugartypes.FreezeVar "AsList"),
                            [((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some (|_::Base)));
                              ((Sugartypes.Datatype.Type
                                  (Sugartypes.Datatype.TypeVar
                                     ("$none", None, `Rigid))),
                               (Some (|_::Base)));
                              ((Sugartypes.Datatype.Type
                                  (Sugartypes.Datatype.TypeVar
                                     ("$none", None, `Rigid))),
                               (Some (|_::Base)))
                              ]
                            )),
                         [(Sugartypes.Var "t")]))
                      ]
                    )),
                 (Some [(|_::Base)])))))));
        fun_location = CommonTypes.Location.Server; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("appendChild", (XmlItem, Xml) ~> XmlItem);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("item", XmlItem));
             (Sugartypes.Pattern.Variable ("child", Xml))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.Switch (
                 (Sugartypes.FnAppl (
                    (Sugartypes.TAppl (
                       (Sugartypes.FreezeVar "xmlItemToVariant"),
                       [((Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeVar
                               ("$none", None, `Rigid))),
                         (Some { |_ }))]
                       )),
                    [(Sugartypes.Var "item")])),
                 [((Sugartypes.Pattern.Variant ("Node",
                      (Some (Sugartypes.Pattern.Tuple
                               [(Sugartypes.Pattern.Variable ("n", String));
                                 (Sugartypes.Pattern.Variable
                                    ("c",
                                     [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]]))
                                 ]))
                      )),
                   (Sugartypes.Block
                      ([],
                       (Sugartypes.FnAppl (
                          (Sugartypes.TAppl (
                             (Sugartypes.FreezeVar "variantToXmlItem"),
                             [((Sugartypes.Datatype.Type
                                  (Sugartypes.Datatype.TypeVar
                                     ("$none", None, `Rigid))),
                               (Some { |_ }))]
                             )),
                          [(Sugartypes.ConstructorLit ("Node",
                              (Some (Sugartypes.TupleLit
                                       [(Sugartypes.Var "n");
                                         (Sugartypes.InfixAppl (
                                            ([mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|];
                                               { |wild|_ }],
                                             (Operators.BinaryOp.Name "++")),
                                            (Sugartypes.Var "c"),
                                            (Sugartypes.FnAppl (
                                               (Sugartypes.TAppl (
                                                  (Sugartypes.FreezeVar
                                                     "xmlToVariant"),
                                                  [((Sugartypes.Datatype.Type
                                                       (Sugartypes.Datatype.TypeVar
                                                          ("$none", None,
                                                           `Rigid))),
                                                    (Some { |_ }))]
                                                  )),
                                               [(Sugartypes.Var "child")]))
                                            ))
                                         ])),
                              (Some [|Node:(String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|Attr:(String, String)|NsAttr:(String, String, String)|NsNode:(String, String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|Text:String|])
                              ))
                            ]
                          )))));
                   ((Sugartypes.Pattern.Variant ("NsNode",
                       (Some (Sugartypes.Pattern.Tuple
                                [(Sugartypes.Pattern.Variable ("ns", String));
                                  (Sugartypes.Pattern.Variable ("n", String));
                                  (Sugartypes.Pattern.Variable
                                     ("c",
                                      [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]]))
                                  ]))
                       )),
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.FnAppl (
                           (Sugartypes.TAppl (
                              (Sugartypes.FreezeVar "variantToXmlItem"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { |_ }))]
                              )),
                           [(Sugartypes.ConstructorLit ("NsNode",
                               (Some (Sugartypes.TupleLit
                                        [(Sugartypes.Var "ns");
                                          (Sugartypes.Var "n");
                                          (Sugartypes.InfixAppl (
                                             ([mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|];
                                                { |wild|_ }],
                                              (Operators.BinaryOp.Name "++")),
                                             (Sugartypes.Var "c"),
                                             (Sugartypes.FnAppl (
                                                (Sugartypes.TAppl (
                                                   (Sugartypes.FreezeVar
                                                      "xmlToVariant"),
                                                   [((Sugartypes.Datatype.Type
                                                        (Sugartypes.Datatype.TypeVar
                                                           ("$none", None,
                                                            `Rigid))),
                                                     (Some { |_ }))]
                                                   )),
                                                [(Sugartypes.Var "child")]))
                                             ))
                                          ])),
                               (Some [|NsNode:(String, String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|Attr:(String, String)|Node:(String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|NsAttr:(String, String, String)|Text:String|])
                               ))
                             ]
                           )))));
                   (Sugartypes.Pattern.Any,
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.FnAppl (
                           (Sugartypes.TAppl ((Sugartypes.FreezeVar "error"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { |_ }));
                                ((Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("$none", None, `Rigid))),
                                 (Some XmlItem))
                                ]
                              )),
                           [(Sugartypes.InfixAppl (
                               ([{ |wild|_ }], (Operators.BinaryOp.Name "^^")),
                               (Sugartypes.Constant
                                  (CommonTypes.Constant.String
                                     "Cannot append to ")),
                               (Sugartypes.FnAppl (
                                  (Sugartypes.TAppl (
                                     (Sugartypes.FreezeVar "show"),
                                     [((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some XmlItem));
                                       ((Sugartypes.Datatype.Type
                                           (Sugartypes.Datatype.TypeVar
                                              ("$none", None, `Rigid))),
                                        (Some { |_ }))
                                       ]
                                     )),
                                  [(Sugartypes.Var "item")]))
                               ))
                             ]
                           )))))
                   ],
                 (Some XmlItem)))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.XmlItem);
                    (Sugartypes.Datatype.TypeApplication ("Xml", []))],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.Primitive
                     CommonTypes.Primitive.XmlItem)
                  )),
               (Some (XmlItem, Xml) ~> XmlItem)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("setAttribute", (XmlItem, String, String) ~> XmlItem);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("item", XmlItem));
             (Sugartypes.Pattern.Variable ("name", String));
             (Sugartypes.Pattern.Variable ("value", String))]
            ],
          (Sugartypes.Block
             ([(Sugartypes.Funs
                  [{ Sugartypes.rec_binder =
                     ("helper",
                      ([[|Attr:(String, String)|a|]], [[|Attr:(String, String)|a|]]) ~> [[|Attr:(String, String)|a|]]);
                     rec_linearity = CommonTypes.DeclaredLinearity.Unl;
                     rec_definition =
                     (([a::Row; a::Row],
                       (Some (([[|Attr:(String, String)|a|]], [[|Attr:(String, String)|a|]]) ~> [[|Attr:(String, String)|a|]],
                              [None; None]))),
                      ([[(Sugartypes.Pattern.Variable
                            ("i", [[|Attr:(String, String)|_|]]));
                          (Sugartypes.Pattern.Variable
                             ("o", [[|Attr:(String, String)|_|]]))
                          ]
                         ],
                       (Sugartypes.Block
                          ([],
                           (Sugartypes.Switch ((Sugartypes.Var "i"),
                              [(Sugartypes.Pattern.Nil,
                                (Sugartypes.Block
                                   ([],
                                    (Sugartypes.FnAppl (
                                       (Sugartypes.TAppl (
                                          (Sugartypes.FreezeVar "reverse"),
                                          [((Sugartypes.Datatype.Type
                                               (Sugartypes.Datatype.TypeVar
                                                  ("$none", None, `Rigid))),
                                            (Some [|Attr:(String, String)|_|]));
                                            ((Sugartypes.Datatype.Type
                                                (Sugartypes.Datatype.TypeVar
                                                   ("$none", None, `Rigid))),
                                             (Some { |_ }))
                                            ]
                                          )),
                                       [(Sugartypes.InfixAppl (
                                           ([[|Attr:(String, String)|_|];
                                              { |wild|_ }],
                                            Operators.BinaryOp.Cons),
                                           (Sugartypes.ConstructorLit (
                                              "Attr",
                                              (Some (Sugartypes.TupleLit
                                                       [(Sugartypes.Var
                                                           "name");
                                                         (Sugartypes.Var
                                                            "value")
                                                         ])),
                                              (Some [|Attr:(String, String)|_|])
                                              )),
                                           (Sugartypes.Var "o")))
                                         ]
                                       )))));
                                ((Sugartypes.Pattern.Cons (
                                    (Sugartypes.Pattern.Variant ("Attr",
                                       (Some (Sugartypes.Pattern.Tuple
                                                [(Sugartypes.Pattern.Variable
                                                    ("n", String));
                                                  (Sugartypes.Pattern.Variable
                                                     ("v", String))
                                                  ]))
                                       )),
                                    (Sugartypes.Pattern.Variable
                                       ("t", [[|Attr:(String, String)|_|]]))
                                    )),
                                 (Sugartypes.Block
                                    ([],
                                     (Sugartypes.Conditional (
                                        (Sugartypes.InfixAppl (
                                           ([String; { |wild|_ }],
                                            (Operators.BinaryOp.Name "==")),
                                           (Sugartypes.Var "n"),
                                           (Sugartypes.Var "name"))),
                                        (Sugartypes.Block
                                           ([],
                                            (Sugartypes.FnAppl (
                                               (Sugartypes.TAppl (
                                                  (Sugartypes.FreezeVar
                                                     "reverse"),
                                                  [((Sugartypes.Datatype.Type
                                                       (Sugartypes.Datatype.TypeVar
                                                          ("$none", None,
                                                           `Rigid))),
                                                    (Some [|Attr:(String, String)|_|]));
                                                    ((Sugartypes.Datatype.Type
                                                        (Sugartypes.Datatype.TypeVar
                                                           ("$none", None,
                                                            `Rigid))),
                                                     (Some { |_ }))
                                                    ]
                                                  )),
                                               [(Sugartypes.InfixAppl (
                                                   ([[|Attr:(String, String)|_|];
                                                      { |wild|_ }],
                                                    Operators.BinaryOp.Cons),
                                                   (Sugartypes.ConstructorLit (
                                                      "Attr",
                                                      (Some (Sugartypes.TupleLit
                                                               [(Sugartypes.Var
                                                                   "n");
                                                                 (Sugartypes.Var
                                                                    "value")
                                                                 ])),
                                                      (Some [|Attr:(String, String)|_|])
                                                      )),
                                                   (Sugartypes.Var "o")))
                                                 ]
                                               )))),
                                        (Sugartypes.Block
                                           ([],
                                            (Sugartypes.FnAppl (
                                               (Sugartypes.TAppl (
                                                  (Sugartypes.FreezeVar
                                                     "helper"),
                                                  [((Sugartypes.Datatype.Type
                                                       (Sugartypes.Datatype.TypeVar
                                                          ("$none", None,
                                                           `Rigid))),
                                                    (Some { |_ }));
                                                    ((Sugartypes.Datatype.Type
                                                        (Sugartypes.Datatype.TypeVar
                                                           ("$none", None,
                                                            `Rigid))),
                                                     (Some { |_ }))
                                                    ]
                                                  )),
                                               [(Sugartypes.Var "t");
                                                 (Sugartypes.InfixAppl (
                                                    ([[|Attr:(String, String)|_|];
                                                       { |wild|_ }],
                                                     Operators.BinaryOp.Cons),
                                                    (Sugartypes.ConstructorLit (
                                                       "Attr",
                                                       (Some (Sugartypes.TupleLit
                                                                [(Sugartypes.Var
                                                                    "n");
                                                                  (Sugartypes.Var
                                                                    "v")
                                                                  ])),
                                                       (Some [|Attr:(String, String)|_|])
                                                       )),
                                                    (Sugartypes.Var "o")))
                                                 ]
                                               ))))
                                        )))));
                                ((Sugartypes.Pattern.Cons (
                                    (Sugartypes.Pattern.Variable
                                       ("other", [|Attr:(String, String)|_|])),
                                    (Sugartypes.Pattern.Variable
                                       ("t", [[|Attr:(String, String)|_|]]))
                                    )),
                                 (Sugartypes.Block
                                    ([],
                                     (Sugartypes.FnAppl (
                                        (Sugartypes.TAppl (
                                           (Sugartypes.FreezeVar "helper"),
                                           [((Sugartypes.Datatype.Type
                                                (Sugartypes.Datatype.TypeVar
                                                   ("$none", None, `Rigid))),
                                             (Some { |_ }));
                                             ((Sugartypes.Datatype.Type
                                                 (Sugartypes.Datatype.TypeVar
                                                    ("$none", None, `Rigid))),
                                              (Some { |_ }))
                                             ]
                                           )),
                                        [(Sugartypes.Var "t");
                                          (Sugartypes.InfixAppl (
                                             ([[|Attr:(String, String)|_|];
                                                { |wild|_ }],
                                              Operators.BinaryOp.Cons),
                                             (Sugartypes.Var "other"),
                                             (Sugartypes.Var "o")))
                                          ]
                                        )))))
                                ],
                              (Some [[|Attr:(String, String)|_|]])))))));
                     rec_location = CommonTypes.Location.Unknown;
                     rec_signature = None; rec_unsafe_signature = false;
                     rec_frozen = true;
                     rec_pos =
                     File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 508, column 518, to line 9874, column 10155
                     }
                    ])
                ],
              (Sugartypes.Conditional (
                 (Sugartypes.FnAppl (
                    (Sugartypes.TAppl ((Sugartypes.FreezeVar "strContains"),
                       [((Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeVar
                               ("$none", None, `Rigid))),
                         (Some { |_ }))]
                       )),
                    [(Sugartypes.Var "name");
                      (Sugartypes.Constant (CommonTypes.Constant.Char ':'))]
                    )),
                 (Sugartypes.Block
                    ([],
                     (Sugartypes.FnAppl (
                        (Sugartypes.TAppl ((Sugartypes.FreezeVar "error"),
                           [((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some { |_ }));
                             ((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some XmlItem))
                             ]
                           )),
                        [(Sugartypes.Constant
                            (CommonTypes.Constant.String
                               "Attribute names cannot contain colons. Use setAttributeNS instead."))
                          ]
                        )))),
                 (Sugartypes.Block
                    ([],
                     (Sugartypes.Switch (
                        (Sugartypes.FnAppl (
                           (Sugartypes.TAppl (
                              (Sugartypes.FreezeVar "xmlItemToVariant"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { |_ }))]
                              )),
                           [(Sugartypes.Var "item")])),
                        [((Sugartypes.Pattern.Variant ("Node",
                             (Some (Sugartypes.Pattern.Tuple
                                      [(Sugartypes.Pattern.Variable
                                          ("n", String));
                                        (Sugartypes.Pattern.Variable
                                           ("c",
                                            [[|Attr:(String, String)|Node:(String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|NsAttr:(String, String, String)|NsNode:(String, String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|Text:String|]]))
                                        ]))
                             )),
                          (Sugartypes.Block
                             ([],
                              (Sugartypes.FnAppl (
                                 (Sugartypes.TAppl (
                                    (Sugartypes.FreezeVar "variantToXmlItem"),
                                    [((Sugartypes.Datatype.Type
                                         (Sugartypes.Datatype.TypeVar
                                            ("$none", None, `Rigid))),
                                      (Some { |_ }))]
                                    )),
                                 [(Sugartypes.ConstructorLit ("Node",
                                     (Some (Sugartypes.TupleLit
                                              [(Sugartypes.Var "n");
                                                (Sugartypes.FnAppl (
                                                   (Sugartypes.TAppl (
                                                      (Sugartypes.FreezeVar
                                                         "helper"),
                                                      [((Sugartypes.Datatype.Type
                                                           (Sugartypes.Datatype.TypeVar
                                                              ("$none", None,
                                                               `Rigid))),
                                                        (Some { |Node:(String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]]),NsAttr:(String, String, String),NsNode:(String, String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]]),Text:String }));
                                                        ((Sugartypes.Datatype.Type
                                                            (Sugartypes.Datatype.TypeVar
                                                               ("$none",
                                                                None, `Rigid))),
                                                         (Some { |_ }))
                                                        ]
                                                      )),
                                                   [(Sugartypes.Var "c");
                                                     (Sugartypes.ListLit (
                                                        [],
                                                        (Some [|Attr:(String, String)|Node:(String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|NsAttr:(String, String, String)|NsNode:(String, String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|Text:String|])
                                                        ))
                                                     ]
                                                   ))
                                                ])),
                                     (Some [|Node:(String, [[|Attr:(String, String)|Node:(String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|NsAttr:(String, String, String)|NsNode:(String, String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|Text:String|]])|Attr:(String, String)|NsAttr:(String, String, String)|NsNode:(String, String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|Text:String|])
                                     ))
                                   ]
                                 )))));
                          ((Sugartypes.Pattern.Variant ("NsNode",
                              (Some (Sugartypes.Pattern.Tuple
                                       [(Sugartypes.Pattern.Variable
                                           ("ns", String));
                                         (Sugartypes.Pattern.Variable
                                            ("n", String));
                                         (Sugartypes.Pattern.Variable
                                            ("c",
                                             [[|Attr:(String, String)|Node:(String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|NsAttr:(String, String, String)|NsNode:(String, String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|Text:String|]]))
                                         ]))
                              )),
                           (Sugartypes.Block
                              ([],
                               (Sugartypes.FnAppl (
                                  (Sugartypes.TAppl (
                                     (Sugartypes.FreezeVar "variantToXmlItem"),
                                     [((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some { |_ }))]
                                     )),
                                  [(Sugartypes.ConstructorLit ("NsNode",
                                      (Some (Sugartypes.TupleLit
                                               [(Sugartypes.Var "ns");
                                                 (Sugartypes.Var "n");
                                                 (Sugartypes.FnAppl (
                                                    (Sugartypes.TAppl (
                                                       (Sugartypes.FreezeVar
                                                          "helper"),
                                                       [((Sugartypes.Datatype.Type
                                                            (Sugartypes.Datatype.TypeVar
                                                               ("$none",
                                                                None, `Rigid))),
                                                         (Some { |Node:(String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]]),NsAttr:(String, String, String),NsNode:(String, String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]]),Text:String }));
                                                         ((Sugartypes.Datatype.Type
                                                             (Sugartypes.Datatype.TypeVar
                                                                ("$none",
                                                                 None, `Rigid))),
                                                          (Some { |_ }))
                                                         ]
                                                       )),
                                                    [(Sugartypes.Var "c");
                                                      (Sugartypes.ListLit (
                                                         [],
                                                         (Some [|Attr:(String, String)|Node:(String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|NsAttr:(String, String, String)|NsNode:(String, String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|Text:String|])
                                                         ))
                                                      ]
                                                    ))
                                                 ])),
                                      (Some [|NsNode:(String, String, [[|Attr:(String, String)|Node:(String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|NsAttr:(String, String, String)|NsNode:(String, String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|Text:String|]])|Attr:(String, String)|Node:(String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|NsAttr:(String, String, String)|Text:String|])
                                      ))
                                    ]
                                  )))));
                          (Sugartypes.Pattern.Any,
                           (Sugartypes.Block
                              ([],
                               (Sugartypes.FnAppl (
                                  (Sugartypes.TAppl (
                                     (Sugartypes.FreezeVar "error"),
                                     [((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some { |_ }));
                                       ((Sugartypes.Datatype.Type
                                           (Sugartypes.Datatype.TypeVar
                                              ("$none", None, `Rigid))),
                                        (Some XmlItem))
                                       ]
                                     )),
                                  [(Sugartypes.InfixAppl (
                                      ([{ |wild|_ }],
                                       (Operators.BinaryOp.Name "^^")),
                                      (Sugartypes.Constant
                                         (CommonTypes.Constant.String
                                            "Cannot set attribute of ")),
                                      (Sugartypes.FnAppl (
                                         (Sugartypes.TAppl (
                                            (Sugartypes.FreezeVar "show"),
                                            [((Sugartypes.Datatype.Type
                                                 (Sugartypes.Datatype.TypeVar
                                                    ("$none", None, `Rigid))),
                                              (Some XmlItem));
                                              ((Sugartypes.Datatype.Type
                                                  (Sugartypes.Datatype.TypeVar
                                                     ("$none", None, `Rigid))),
                                               (Some { |_ }))
                                              ]
                                            )),
                                         [(Sugartypes.Var "item")]))
                                      ))
                                    ]
                                  )))))
                          ],
                        (Some XmlItem)))))
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.XmlItem);
                    (Sugartypes.Datatype.Primitive
                       CommonTypes.Primitive.String);
                    (Sugartypes.Datatype.Primitive
                       CommonTypes.Primitive.String)
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.Primitive
                     CommonTypes.Primitive.XmlItem)
                  )),
               (Some (XmlItem, String, String) ~> XmlItem)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("setAttributeNS", (XmlItem, String, String, String) ~> XmlItem);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("item", XmlItem));
             (Sugartypes.Pattern.Variable ("namespace", String));
             (Sugartypes.Pattern.Variable ("name", String));
             (Sugartypes.Pattern.Variable ("value", String))]
            ],
          (Sugartypes.Block
             ([(Sugartypes.Funs
                  [{ Sugartypes.rec_binder =
                     ("helper",
                      ([[|NsAttr:(String, String, String)|a|]], [[|NsAttr:(String, String, String)|a|]]) ~> [[|NsAttr:(String, String, String)|a|]]);
                     rec_linearity = CommonTypes.DeclaredLinearity.Unl;
                     rec_definition =
                     (([a::Row; a::Row],
                       (Some (([[|NsAttr:(String, String, String)|a|]], [[|NsAttr:(String, String, String)|a|]]) ~> [[|NsAttr:(String, String, String)|a|]],
                              [None; None]))),
                      ([[(Sugartypes.Pattern.Variable
                            ("i", [[|NsAttr:(String, String, String)|_|]]));
                          (Sugartypes.Pattern.Variable
                             ("o", [[|NsAttr:(String, String, String)|_|]]))
                          ]
                         ],
                       (Sugartypes.Block
                          ([],
                           (Sugartypes.Switch ((Sugartypes.Var "i"),
                              [(Sugartypes.Pattern.Nil,
                                (Sugartypes.Block
                                   ([],
                                    (Sugartypes.FnAppl (
                                       (Sugartypes.TAppl (
                                          (Sugartypes.FreezeVar "reverse"),
                                          [((Sugartypes.Datatype.Type
                                               (Sugartypes.Datatype.TypeVar
                                                  ("$none", None, `Rigid))),
                                            (Some [|NsAttr:(String, String, String)|_|]));
                                            ((Sugartypes.Datatype.Type
                                                (Sugartypes.Datatype.TypeVar
                                                   ("$none", None, `Rigid))),
                                             (Some { |_ }))
                                            ]
                                          )),
                                       [(Sugartypes.InfixAppl (
                                           ([[|NsAttr:(String, String, String)|_|];
                                              { |wild|_ }],
                                            Operators.BinaryOp.Cons),
                                           (Sugartypes.ConstructorLit (
                                              "NsAttr",
                                              (Some (Sugartypes.TupleLit
                                                       [(Sugartypes.Var
                                                           "namespace");
                                                         (Sugartypes.Var
                                                            "name");
                                                         (Sugartypes.Var
                                                            "value")
                                                         ])),
                                              (Some [|NsAttr:(String, String, String)|_|])
                                              )),
                                           (Sugartypes.Var "o")))
                                         ]
                                       )))));
                                ((Sugartypes.Pattern.Cons (
                                    (Sugartypes.Pattern.Variant ("NsAttr",
                                       (Some (Sugartypes.Pattern.Tuple
                                                [(Sugartypes.Pattern.Variable
                                                    ("ns", String));
                                                  (Sugartypes.Pattern.Variable
                                                     ("n", String));
                                                  (Sugartypes.Pattern.Variable
                                                     ("v", String))
                                                  ]))
                                       )),
                                    (Sugartypes.Pattern.Variable
                                       ("t",
                                        [[|NsAttr:(String, String, String)|_|]]))
                                    )),
                                 (Sugartypes.Block
                                    ([],
                                     (Sugartypes.Conditional (
                                        (Sugartypes.InfixAppl (
                                           ([{ |wild|_ }],
                                            Operators.BinaryOp.And),
                                           (Sugartypes.InfixAppl (
                                              ([String; { |wild|_ }],
                                               (Operators.BinaryOp.Name "==")),
                                              (Sugartypes.Var "ns"),
                                              (Sugartypes.Var "namespace"))),
                                           (Sugartypes.InfixAppl (
                                              ([String; { |wild|_ }],
                                               (Operators.BinaryOp.Name "==")),
                                              (Sugartypes.Var "n"),
                                              (Sugartypes.Var "name")))
                                           )),
                                        (Sugartypes.Block
                                           ([],
                                            (Sugartypes.FnAppl (
                                               (Sugartypes.TAppl (
                                                  (Sugartypes.FreezeVar
                                                     "reverse"),
                                                  [((Sugartypes.Datatype.Type
                                                       (Sugartypes.Datatype.TypeVar
                                                          ("$none", None,
                                                           `Rigid))),
                                                    (Some [|NsAttr:(String, String, String)|_|]));
                                                    ((Sugartypes.Datatype.Type
                                                        (Sugartypes.Datatype.TypeVar
                                                           ("$none", None,
                                                            `Rigid))),
                                                     (Some { |_ }))
                                                    ]
                                                  )),
                                               [(Sugartypes.InfixAppl (
                                                   ([[|NsAttr:(String, String, String)|_|];
                                                      { |wild|_ }],
                                                    Operators.BinaryOp.Cons),
                                                   (Sugartypes.ConstructorLit (
                                                      "NsAttr",
                                                      (Some (Sugartypes.TupleLit
                                                               [(Sugartypes.Var
                                                                   "ns");
                                                                 (Sugartypes.Var
                                                                    "n");
                                                                 (Sugartypes.Var
                                                                    "value")
                                                                 ])),
                                                      (Some [|NsAttr:(String, String, String)|_|])
                                                      )),
                                                   (Sugartypes.Var "o")))
                                                 ]
                                               )))),
                                        (Sugartypes.Block
                                           ([],
                                            (Sugartypes.FnAppl (
                                               (Sugartypes.TAppl (
                                                  (Sugartypes.FreezeVar
                                                     "helper"),
                                                  [((Sugartypes.Datatype.Type
                                                       (Sugartypes.Datatype.TypeVar
                                                          ("$none", None,
                                                           `Rigid))),
                                                    (Some { |_ }));
                                                    ((Sugartypes.Datatype.Type
                                                        (Sugartypes.Datatype.TypeVar
                                                           ("$none", None,
                                                            `Rigid))),
                                                     (Some { |_ }))
                                                    ]
                                                  )),
                                               [(Sugartypes.Var "t");
                                                 (Sugartypes.InfixAppl (
                                                    ([[|NsAttr:(String, String, String)|_|];
                                                       { |wild|_ }],
                                                     Operators.BinaryOp.Cons),
                                                    (Sugartypes.ConstructorLit (
                                                       "NsAttr",
                                                       (Some (Sugartypes.TupleLit
                                                                [(Sugartypes.Var
                                                                    "ns");
                                                                  (Sugartypes.Var
                                                                    "n");
                                                                  (Sugartypes.Var
                                                                    "v")
                                                                  ])),
                                                       (Some [|NsAttr:(String, String, String)|_|])
                                                       )),
                                                    (Sugartypes.Var "o")))
                                                 ]
                                               ))))
                                        )))));
                                ((Sugartypes.Pattern.Cons (
                                    (Sugartypes.Pattern.Variable
                                       ("other",
                                        [|NsAttr:(String, String, String)|_|])),
                                    (Sugartypes.Pattern.Variable
                                       ("t",
                                        [[|NsAttr:(String, String, String)|_|]]))
                                    )),
                                 (Sugartypes.Block
                                    ([],
                                     (Sugartypes.FnAppl (
                                        (Sugartypes.TAppl (
                                           (Sugartypes.FreezeVar "helper"),
                                           [((Sugartypes.Datatype.Type
                                                (Sugartypes.Datatype.TypeVar
                                                   ("$none", None, `Rigid))),
                                             (Some { |_ }));
                                             ((Sugartypes.Datatype.Type
                                                 (Sugartypes.Datatype.TypeVar
                                                    ("$none", None, `Rigid))),
                                              (Some { |_ }))
                                             ]
                                           )),
                                        [(Sugartypes.Var "t");
                                          (Sugartypes.InfixAppl (
                                             ([[|NsAttr:(String, String, String)|_|];
                                                { |wild|_ }],
                                              Operators.BinaryOp.Cons),
                                             (Sugartypes.Var "other"),
                                             (Sugartypes.Var "o")))
                                          ]
                                        )))))
                                ],
                              (Some [[|NsAttr:(String, String, String)|_|]])
                              ))))));
                     rec_location = CommonTypes.Location.Unknown;
                     rec_signature = None; rec_unsafe_signature = false;
                     rec_frozen = true;
                     rec_pos =
                     File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 538, column 548, to line 10901, column 11232
                     }
                    ])
                ],
              (Sugartypes.Conditional (
                 (Sugartypes.FnAppl (
                    (Sugartypes.TAppl ((Sugartypes.FreezeVar "strContains"),
                       [((Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeVar
                               ("$none", None, `Rigid))),
                         (Some { |_ }))]
                       )),
                    [(Sugartypes.Var "name");
                      (Sugartypes.Constant (CommonTypes.Constant.Char ':'))]
                    )),
                 (Sugartypes.Block
                    ([],
                     (Sugartypes.FnAppl (
                        (Sugartypes.TAppl ((Sugartypes.FreezeVar "error"),
                           [((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some { |_ }));
                             ((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some XmlItem))
                             ]
                           )),
                        [(Sugartypes.Constant
                            (CommonTypes.Constant.String
                               "Attribute names cannot contain colons."))
                          ]
                        )))),
                 (Sugartypes.Block
                    ([],
                     (Sugartypes.Switch (
                        (Sugartypes.FnAppl (
                           (Sugartypes.TAppl (
                              (Sugartypes.FreezeVar "xmlItemToVariant"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { |_ }))]
                              )),
                           [(Sugartypes.Var "item")])),
                        [((Sugartypes.Pattern.Variant ("Node",
                             (Some (Sugartypes.Pattern.Tuple
                                      [(Sugartypes.Pattern.Variable
                                          ("n", String));
                                        (Sugartypes.Pattern.Variable
                                           ("c",
                                            [[|NsAttr:(String, String, String)|Attr:(String, String)|Node:(String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|NsNode:(String, String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|Text:String|]]))
                                        ]))
                             )),
                          (Sugartypes.Block
                             ([],
                              (Sugartypes.FnAppl (
                                 (Sugartypes.TAppl (
                                    (Sugartypes.FreezeVar "variantToXmlItem"),
                                    [((Sugartypes.Datatype.Type
                                         (Sugartypes.Datatype.TypeVar
                                            ("$none", None, `Rigid))),
                                      (Some { |_ }))]
                                    )),
                                 [(Sugartypes.ConstructorLit ("Node",
                                     (Some (Sugartypes.TupleLit
                                              [(Sugartypes.Var "n");
                                                (Sugartypes.FnAppl (
                                                   (Sugartypes.TAppl (
                                                      (Sugartypes.FreezeVar
                                                         "helper"),
                                                      [((Sugartypes.Datatype.Type
                                                           (Sugartypes.Datatype.TypeVar
                                                              ("$none", None,
                                                               `Rigid))),
                                                        (Some { |Attr:(String, String),Node:(String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]]),NsNode:(String, String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]]),Text:String }));
                                                        ((Sugartypes.Datatype.Type
                                                            (Sugartypes.Datatype.TypeVar
                                                               ("$none",
                                                                None, `Rigid))),
                                                         (Some { |_ }))
                                                        ]
                                                      )),
                                                   [(Sugartypes.Var "c");
                                                     (Sugartypes.ListLit (
                                                        [],
                                                        (Some [|NsAttr:(String, String, String)|Attr:(String, String)|Node:(String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|NsNode:(String, String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|Text:String|])
                                                        ))
                                                     ]
                                                   ))
                                                ])),
                                     (Some [|Node:(String, [[|NsAttr:(String, String, String)|Attr:(String, String)|Node:(String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|NsNode:(String, String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|Text:String|]])|Attr:(String, String)|NsAttr:(String, String, String)|NsNode:(String, String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|Text:String|])
                                     ))
                                   ]
                                 )))));
                          ((Sugartypes.Pattern.Variant ("NsNode",
                              (Some (Sugartypes.Pattern.Tuple
                                       [(Sugartypes.Pattern.Variable
                                           ("ns", String));
                                         (Sugartypes.Pattern.Variable
                                            ("n", String));
                                         (Sugartypes.Pattern.Variable
                                            ("c",
                                             [[|NsAttr:(String, String, String)|Attr:(String, String)|Node:(String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|NsNode:(String, String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|Text:String|]]))
                                         ]))
                              )),
                           (Sugartypes.Block
                              ([],
                               (Sugartypes.FnAppl (
                                  (Sugartypes.TAppl (
                                     (Sugartypes.FreezeVar "variantToXmlItem"),
                                     [((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some { |_ }))]
                                     )),
                                  [(Sugartypes.ConstructorLit ("NsNode",
                                      (Some (Sugartypes.TupleLit
                                               [(Sugartypes.Var "ns");
                                                 (Sugartypes.Var "n");
                                                 (Sugartypes.FnAppl (
                                                    (Sugartypes.TAppl (
                                                       (Sugartypes.FreezeVar
                                                          "helper"),
                                                       [((Sugartypes.Datatype.Type
                                                            (Sugartypes.Datatype.TypeVar
                                                               ("$none",
                                                                None, `Rigid))),
                                                         (Some { |Attr:(String, String),Node:(String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]]),NsNode:(String, String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]]),Text:String }));
                                                         ((Sugartypes.Datatype.Type
                                                             (Sugartypes.Datatype.TypeVar
                                                                ("$none",
                                                                 None, `Rigid))),
                                                          (Some { |_ }))
                                                         ]
                                                       )),
                                                    [(Sugartypes.Var "c");
                                                      (Sugartypes.ListLit (
                                                         [],
                                                         (Some [|NsAttr:(String, String, String)|Attr:(String, String)|Node:(String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|NsNode:(String, String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|Text:String|])
                                                         ))
                                                      ]
                                                    ))
                                                 ])),
                                      (Some [|NsNode:(String, String, [[|NsAttr:(String, String, String)|Attr:(String, String)|Node:(String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|NsNode:(String, String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|Text:String|]])|Attr:(String, String)|Node:(String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|NsAttr:(String, String, String)|Text:String|])
                                      ))
                                    ]
                                  )))));
                          (Sugartypes.Pattern.Any,
                           (Sugartypes.Block
                              ([],
                               (Sugartypes.FnAppl (
                                  (Sugartypes.TAppl (
                                     (Sugartypes.FreezeVar "error"),
                                     [((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some { |_ }));
                                       ((Sugartypes.Datatype.Type
                                           (Sugartypes.Datatype.TypeVar
                                              ("$none", None, `Rigid))),
                                        (Some XmlItem))
                                       ]
                                     )),
                                  [(Sugartypes.InfixAppl (
                                      ([{ |wild|_ }],
                                       (Operators.BinaryOp.Name "^^")),
                                      (Sugartypes.Constant
                                         (CommonTypes.Constant.String
                                            "Cannot set attribute of ")),
                                      (Sugartypes.FnAppl (
                                         (Sugartypes.TAppl (
                                            (Sugartypes.FreezeVar "show"),
                                            [((Sugartypes.Datatype.Type
                                                 (Sugartypes.Datatype.TypeVar
                                                    ("$none", None, `Rigid))),
                                              (Some XmlItem));
                                              ((Sugartypes.Datatype.Type
                                                  (Sugartypes.Datatype.TypeVar
                                                     ("$none", None, `Rigid))),
                                               (Some { |_ }))
                                              ]
                                            )),
                                         [(Sugartypes.Var "item")]))
                                      ))
                                    ]
                                  )))))
                          ],
                        (Some XmlItem)))))
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.XmlItem);
                    (Sugartypes.Datatype.Primitive
                       CommonTypes.Primitive.String);
                    (Sugartypes.Datatype.Primitive
                       CommonTypes.Primitive.String);
                    (Sugartypes.Datatype.Primitive
                       CommonTypes.Primitive.String)
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.Primitive
                     CommonTypes.Primitive.XmlItem)
                  )),
               (Some (XmlItem, String, String, String) ~> XmlItem)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("prependChild", (XmlItem, Xml) ~> XmlItem);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("item", XmlItem));
             (Sugartypes.Pattern.Variable ("child", Xml))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.Switch (
                 (Sugartypes.FnAppl (
                    (Sugartypes.TAppl (
                       (Sugartypes.FreezeVar "xmlItemToVariant"),
                       [((Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeVar
                               ("$none", None, `Rigid))),
                         (Some { |_ }))]
                       )),
                    [(Sugartypes.Var "item")])),
                 [((Sugartypes.Pattern.Variant ("Node",
                      (Some (Sugartypes.Pattern.Tuple
                               [(Sugartypes.Pattern.Variable ("n", String));
                                 (Sugartypes.Pattern.Variable
                                    ("c",
                                     [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]]))
                                 ]))
                      )),
                   (Sugartypes.Block
                      ([],
                       (Sugartypes.FnAppl (
                          (Sugartypes.TAppl (
                             (Sugartypes.FreezeVar "variantToXmlItem"),
                             [((Sugartypes.Datatype.Type
                                  (Sugartypes.Datatype.TypeVar
                                     ("$none", None, `Rigid))),
                               (Some { |_ }))]
                             )),
                          [(Sugartypes.ConstructorLit ("Node",
                              (Some (Sugartypes.TupleLit
                                       [(Sugartypes.Var "n");
                                         (Sugartypes.InfixAppl (
                                            ([mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|];
                                               { |wild|_ }],
                                             (Operators.BinaryOp.Name "++")),
                                            (Sugartypes.FnAppl (
                                               (Sugartypes.TAppl (
                                                  (Sugartypes.FreezeVar
                                                     "xmlToVariant"),
                                                  [((Sugartypes.Datatype.Type
                                                       (Sugartypes.Datatype.TypeVar
                                                          ("$none", None,
                                                           `Rigid))),
                                                    (Some { |_ }))]
                                                  )),
                                               [(Sugartypes.Var "child")])),
                                            (Sugartypes.Var "c")))
                                         ])),
                              (Some [|Node:(String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|Attr:(String, String)|NsAttr:(String, String, String)|NsNode:(String, String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|Text:String|])
                              ))
                            ]
                          )))));
                   ((Sugartypes.Pattern.Variant ("NsNode",
                       (Some (Sugartypes.Pattern.Tuple
                                [(Sugartypes.Pattern.Variable ("ns", String));
                                  (Sugartypes.Pattern.Variable ("n", String));
                                  (Sugartypes.Pattern.Variable
                                     ("c",
                                      [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]]))
                                  ]))
                       )),
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.FnAppl (
                           (Sugartypes.TAppl (
                              (Sugartypes.FreezeVar "variantToXmlItem"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { |_ }))]
                              )),
                           [(Sugartypes.ConstructorLit ("NsNode",
                               (Some (Sugartypes.TupleLit
                                        [(Sugartypes.Var "ns");
                                          (Sugartypes.Var "n");
                                          (Sugartypes.InfixAppl (
                                             ([mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|];
                                                { |wild|_ }],
                                              (Operators.BinaryOp.Name "++")),
                                             (Sugartypes.FnAppl (
                                                (Sugartypes.TAppl (
                                                   (Sugartypes.FreezeVar
                                                      "xmlToVariant"),
                                                   [((Sugartypes.Datatype.Type
                                                        (Sugartypes.Datatype.TypeVar
                                                           ("$none", None,
                                                            `Rigid))),
                                                     (Some { |_ }))]
                                                   )),
                                                [(Sugartypes.Var "child")])),
                                             (Sugartypes.Var "c")))
                                          ])),
                               (Some [|NsNode:(String, String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|Attr:(String, String)|Node:(String, [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]])|NsAttr:(String, String, String)|Text:String|])
                               ))
                             ]
                           )))));
                   (Sugartypes.Pattern.Any,
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.FnAppl (
                           (Sugartypes.TAppl ((Sugartypes.FreezeVar "error"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { |_ }));
                                ((Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("$none", None, `Rigid))),
                                 (Some XmlItem))
                                ]
                              )),
                           [(Sugartypes.InfixAppl (
                               ([{ |wild|_ }], (Operators.BinaryOp.Name "^^")),
                               (Sugartypes.Constant
                                  (CommonTypes.Constant.String
                                     "Cannot prepend child in ")),
                               (Sugartypes.FnAppl (
                                  (Sugartypes.TAppl (
                                     (Sugartypes.FreezeVar "show"),
                                     [((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some XmlItem));
                                       ((Sugartypes.Datatype.Type
                                           (Sugartypes.Datatype.TypeVar
                                              ("$none", None, `Rigid))),
                                        (Some { |_ }))
                                       ]
                                     )),
                                  [(Sugartypes.Var "item")]))
                               ))
                             ]
                           )))))
                   ],
                 (Some XmlItem)))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.XmlItem);
                    (Sugartypes.Datatype.TypeApplication ("Xml", []))],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.Primitive
                     CommonTypes.Primitive.XmlItem)
                  )),
               (Some (XmlItem, Xml) ~> XmlItem)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("replaceChildren", (XmlItem, Xml) ~> XmlItem);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("item", XmlItem));
             (Sugartypes.Pattern.Variable ("newChildren", Xml))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.Switch (
                 (Sugartypes.FnAppl (
                    (Sugartypes.TAppl (
                       (Sugartypes.FreezeVar "xmlItemToVariant"),
                       [((Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeVar
                               ("$none", None, `Rigid))),
                         (Some { |_ }))]
                       )),
                    [(Sugartypes.Var "item")])),
                 [((Sugartypes.Pattern.Variant ("Node",
                      (Some (Sugartypes.Pattern.Tuple
                               [(Sugartypes.Pattern.Variable ("n", String));
                                 (Sugartypes.Pattern.Variable
                                    ("c",
                                     [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]]))
                                 ]))
                      )),
                   (Sugartypes.Block
                      ([],
                       (Sugartypes.FnAppl (
                          (Sugartypes.TAppl (
                             (Sugartypes.FreezeVar "variantToXmlItem"),
                             [((Sugartypes.Datatype.Type
                                  (Sugartypes.Datatype.TypeVar
                                     ("$none", None, `Rigid))),
                               (Some { |_ }))]
                             )),
                          [(Sugartypes.ConstructorLit ("Node",
                              (Some (Sugartypes.TupleLit
                                       [(Sugartypes.Var "n");
                                         (Sugartypes.FnAppl (
                                            (Sugartypes.TAppl (
                                               (Sugartypes.FreezeVar
                                                  "xmlToVariant"),
                                               [((Sugartypes.Datatype.Type
                                                    (Sugartypes.Datatype.TypeVar
                                                       ("$none", None, `Rigid))),
                                                 (Some { |_ }))]
                                               )),
                                            [(Sugartypes.Var "newChildren")]
                                            ))
                                         ])),
                              (Some [|Node:(String, mu a . [[|Attr:(String, String)|Node:(String, a)|NsAttr:(String, String, String)|NsNode:(String, String, a)|Text:String|]])|Attr:(String, String)|NsAttr:(String, String, String)|NsNode:(String, String, [mu b . [|Attr:(String, String)|Node:(String, [b])|NsAttr:(String, String, String)|NsNode:(String, String, [b])|Text:String|]])|Text:String|])
                              ))
                            ]
                          )))));
                   ((Sugartypes.Pattern.Variant ("NsNode",
                       (Some (Sugartypes.Pattern.Tuple
                                [(Sugartypes.Pattern.Variable ("ns", String));
                                  (Sugartypes.Pattern.Variable ("n", String));
                                  (Sugartypes.Pattern.Variable
                                     ("c",
                                      [mu a . [|Attr:(String, String)|Node:(String, [a])|NsAttr:(String, String, String)|NsNode:(String, String, [a])|Text:String|]]))
                                  ]))
                       )),
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.FnAppl (
                           (Sugartypes.TAppl (
                              (Sugartypes.FreezeVar "variantToXmlItem"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { |_ }))]
                              )),
                           [(Sugartypes.ConstructorLit ("NsNode",
                               (Some (Sugartypes.TupleLit
                                        [(Sugartypes.Var "ns");
                                          (Sugartypes.Var "n");
                                          (Sugartypes.FnAppl (
                                             (Sugartypes.TAppl (
                                                (Sugartypes.FreezeVar
                                                   "xmlToVariant"),
                                                [((Sugartypes.Datatype.Type
                                                     (Sugartypes.Datatype.TypeVar
                                                        ("$none", None,
                                                         `Rigid))),
                                                  (Some { |_ }))]
                                                )),
                                             [(Sugartypes.Var "newChildren")]
                                             ))
                                          ])),
                               (Some [|NsNode:(String, String, mu a . [[|Attr:(String, String)|Node:(String, a)|NsAttr:(String, String, String)|NsNode:(String, String, a)|Text:String|]])|Attr:(String, String)|Node:(String, [mu b . [|Attr:(String, String)|Node:(String, [b])|NsAttr:(String, String, String)|NsNode:(String, String, [b])|Text:String|]])|NsAttr:(String, String, String)|Text:String|])
                               ))
                             ]
                           )))));
                   (Sugartypes.Pattern.Any,
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.FnAppl (
                           (Sugartypes.TAppl ((Sugartypes.FreezeVar "error"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { |_ }));
                                ((Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("$none", None, `Rigid))),
                                 (Some XmlItem))
                                ]
                              )),
                           [(Sugartypes.InfixAppl (
                               ([{ |wild|_ }], (Operators.BinaryOp.Name "^^")),
                               (Sugartypes.Constant
                                  (CommonTypes.Constant.String
                                     "Cannot replace children of ")),
                               (Sugartypes.FnAppl (
                                  (Sugartypes.TAppl (
                                     (Sugartypes.FreezeVar "show"),
                                     [((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some XmlItem));
                                       ((Sugartypes.Datatype.Type
                                           (Sugartypes.Datatype.TypeVar
                                              ("$none", None, `Rigid))),
                                        (Some { |_ }))
                                       ]
                                     )),
                                  [(Sugartypes.Var "item")]))
                               ))
                             ]
                           )))))
                   ],
                 (Some XmlItem)))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.XmlItem);
                    (Sugartypes.Datatype.TypeApplication ("Xml", []))],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.Primitive
                     CommonTypes.Primitive.XmlItem)
                  )),
               (Some (XmlItem, Xml) ~> XmlItem)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Typenames
      [("Env", [],
        ((Sugartypes.Datatype.List
            (Sugartypes.Datatype.Tuple
               [(Sugartypes.Datatype.Primitive CommonTypes.Primitive.String);
                 (Sugartypes.Datatype.Primitive CommonTypes.Primitive.String)
                 ])),
         (Some [(String, String)])),
        File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 598, columns 13011 to 13043)
        ]);
   (Sugartypes.Typenames
      [("Gen", [],
        ((Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int),
         (Some Int)),
        File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 599, columns 13045 to 13063)
        ]);
   (Sugartypes.Typenames
      [("State",
        [(("d", (None, None), `Rigid), (Some a));
          (("a", (None, None), `Rigid), (Some a))],
        ((Sugartypes.Datatype.Function (
            [(Sugartypes.Datatype.TypeVar ("d", None, `Rigid))],
            ([("wild", (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
               ],
             Sugartypes.Datatype.Closed),
            (Sugartypes.Datatype.Tuple
               [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                 (Sugartypes.Datatype.TypeVar ("d", None, `Rigid))])
            )),
         (Some (a) {}~> (_, a))),
        File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 600, columns 13065 to 13102)
        ]);
   (Sugartypes.Typenames
      [("Collector", [(("a", (None, None), `Rigid), (Some a))],
        ((Sugartypes.Datatype.Function (
            [(Sugartypes.Datatype.TypeApplication ("Env", []))],
            ([("wild", (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
               ],
             Sugartypes.Datatype.Closed),
            (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))),
         (Some (Env) {}~> _)),
        File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 601, columns 13104 to 13141)
        ]);
   (Sugartypes.Typenames
      [("CheckedCollector", [(("a", (None, None), `Rigid), (Some a))],
        ((Sugartypes.Datatype.TypeApplication ("Collector",
            [(Sugartypes.Datatype.Type
                (Sugartypes.Datatype.Tuple
                   [(Sugartypes.Datatype.TypeApplication ("Xml", []));
                     (Sugartypes.Datatype.TypeApplication ("Maybe",
                        [(Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                          ]
                        ))
                     ]))
              ]
            )),
         (Some Collector ((Xml, Maybe (_))))),
        File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 602, columns 13143 to 13201)
        ]);
   (Sugartypes.Typenames
      [("Formlet", [(("a", (None, None), `Rigid), (Some a))],
        ((Sugartypes.Datatype.TypeApplication ("State",
            [(Sugartypes.Datatype.Type
                (Sugartypes.Datatype.TypeApplication ("Gen", [])));
              (Sugartypes.Datatype.Type
                 (Sugartypes.Datatype.Tuple
                    [(Sugartypes.Datatype.TypeApplication ("Xml", []));
                      (Sugartypes.Datatype.TypeApplication (
                         "CheckedCollector",
                         [(Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                           ]
                         ))
                      ]))
              ]
            )),
         (Some State (Gen,(Xml, CheckedCollector (_))))),
        File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 603, columns 13203 to 13265)
        ]);
   (Sugartypes.Typenames
      [("XmlContext", [],
        ((Sugartypes.Datatype.Function (
            [(Sugartypes.Datatype.TypeApplication ("Xml", []))],
            ([("wild", (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
               ],
             Sugartypes.Datatype.Closed),
            (Sugartypes.Datatype.TypeApplication ("Xml", [])))),
         (Some (Xml) {}~> Xml)),
        File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 604, columns 13267 to 13303)
        ]);
   (Sugartypes.Typenames
      [("Attributes", [],
        ((Sugartypes.Datatype.List
            (Sugartypes.Datatype.Tuple
               [(Sugartypes.Datatype.Primitive CommonTypes.Primitive.String);
                 (Sugartypes.Datatype.Primitive CommonTypes.Primitive.String)
                 ])),
         (Some [(String, String)])),
        File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 606, columns 13306 to 13346)
        ]);
   (Sugartypes.Val (
      (Sugartypes.Pattern.Variable ("multipart", [(String, String)])),
      ([],
       (Sugartypes.ListLit (
          [(Sugartypes.TupleLit
              [(Sugartypes.Constant (CommonTypes.Constant.String "enctype"));
                (Sugartypes.Constant
                   (CommonTypes.Constant.String "multipart/form-data"))
                ])
            ],
          (Some (String, String))))),
      CommonTypes.Location.Unknown, None));
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("$", ((a) -b-> c, a) -b-> c);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row; a],
         ([[(Sugartypes.Pattern.Variable ("f", (_) -> _));
             (Sugartypes.Pattern.Variable ("x", _))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl ((Sugartypes.Var "f"),
                 [(Sugartypes.Var "x")]))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Function (
                      [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                      ([], (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                      (Sugartypes.Datatype.TypeVar ("c", None, `Rigid))));
                    (Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                  ([], (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                  (Sugartypes.Datatype.TypeVar ("c", None, `Rigid)))),
               (Some ((a) -b-> c, a) -b-> c)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("runState", (State (a,b), a) {}~> (b, a));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a],
         ([[(Sugartypes.Pattern.Variable ("s", State (_,_)));
             (Sugartypes.Pattern.Variable ("i", _))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl ((Sugartypes.Var "s"),
                 [(Sugartypes.Var "i")]))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("State",
                      [(Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar ("d", None, `Rigid)));
                        (Sugartypes.Datatype.Type
                           (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                        ]
                      ));
                    (Sugartypes.Datatype.TypeVar ("d", None, `Rigid))],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   Sugartypes.Datatype.Closed),
                  (Sugartypes.Datatype.Tuple
                     [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                       (Sugartypes.Datatype.TypeVar ("d", None, `Rigid))])
                  )),
               (Some (State (a,b), a) {}~> (b, a))));
        fun_unsafe_signature = false; fun_frozen = true });
   Sugartypes.Infix;
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        (">>=", (State (a,b), (b) {}~> State (a,c)) -> State (a,c));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a; a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("x", State (_,_)));
             (Sugartypes.Pattern.Variable ("f", (_) {}~> State (_,_)))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.TupleLit
                 [(Sugartypes.Block
                     ([(Sugartypes.Fun
                          { Sugartypes.fun_binder =
                            ("_fun__g30", (a) {}~> (_, a));
                            fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                            fun_definition =
                            ([],
                             ([[(Sugartypes.Pattern.Variable ("s1", _))]],
                              (Sugartypes.Block
                                 ([(Sugartypes.Val (
                                      (Sugartypes.Pattern.Tuple
                                         [(Sugartypes.Pattern.Variable
                                             ("v", _));
                                           (Sugartypes.Pattern.Variable
                                              ("s2", _))
                                           ]),
                                      ([],
                                       (Sugartypes.FnAppl (
                                          (Sugartypes.Var "x"),
                                          [(Sugartypes.Var "s1")]))),
                                      CommonTypes.Location.Unknown, None))
                                    ],
                                  (Sugartypes.FnAppl (
                                     (Sugartypes.TAppl (
                                        (Sugartypes.FreezeVar "runState"),
                                        [((Sugartypes.Datatype.Type
                                             (Sugartypes.Datatype.TypeVar
                                                ("$none", None, `Rigid))),
                                          (Some _));
                                          ((Sugartypes.Datatype.Type
                                              (Sugartypes.Datatype.TypeVar
                                                 ("$none", None, `Rigid))),
                                           (Some _))
                                          ]
                                        )),
                                     [(Sugartypes.FnAppl (
                                         (Sugartypes.Var "f"),
                                         [(Sugartypes.Var "v")]));
                                       (Sugartypes.Var "s2")]
                                     ))))));
                            fun_location = CommonTypes.Location.Unknown;
                            fun_signature = None;
                            fun_unsafe_signature = false; fun_frozen = true })
                        ],
                      (Sugartypes.FreezeVar "_fun__g30")))
                   ])))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("State",
                      [(Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar ("d", None, `Rigid)));
                        (Sugartypes.Datatype.Type
                           (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                        ]
                      ));
                    (Sugartypes.Datatype.Function (
                       [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                       ([("wild",
                          (Sugartypes.Datatype.Present
                             Sugartypes.Datatype.Unit))
                          ],
                        Sugartypes.Datatype.Closed),
                       (Sugartypes.Datatype.TypeApplication ("State",
                          [(Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("d", None, `Rigid)));
                            (Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("b", None, `Rigid)))
                            ]
                          ))
                       ))
                    ],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("State",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("d", None, `Rigid)));
                       (Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar ("b", None, `Rigid)))
                       ]
                     ))
                  )),
               (Some (State (a,b), (b) {}~> State (a,c)) -> State (a,c))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("return", (a) -> State (_,a));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row; a],
         ([[(Sugartypes.Pattern.Variable ("a", _))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.Block
                 ([(Sugartypes.Fun
                      { Sugartypes.fun_binder =
                        ("_fun__g31", (a) {}~> (_, a));
                        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                        fun_definition =
                        ([],
                         ([[(Sugartypes.Pattern.Variable ("s", _))]],
                          (Sugartypes.Block
                             ([],
                              (Sugartypes.TupleLit
                                 [(Sugartypes.Var "a"); (Sugartypes.Var "s")])))));
                        fun_location = CommonTypes.Location.Unknown;
                        fun_signature = None; fun_unsafe_signature = false;
                        fun_frozen = true })
                    ],
                  (Sugartypes.FreezeVar "_fun__g31")))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("State",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("b", None, `Rigid)));
                       (Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                       ]
                     ))
                  )),
               (Some (a) -> State (_,a))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("fmap", ((a) {}~> b, State (c,a)) -> State (c,b));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a; a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("f", (_) {}~> _));
             (Sugartypes.Pattern.Variable ("x", State (_,_)))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.InfixAppl (
                 ([_; _; _; { |_ }], (Operators.BinaryOp.Name ">>=")),
                 (Sugartypes.Var "x"),
                 (Sugartypes.InfixAppl (
                    ([_; { |wild }; State (_,_); _; { |_ }],
                     (Operators.BinaryOp.Name "compose")),
                    (Sugartypes.TAppl ((Sugartypes.FreezeVar "return"),
                       [((Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeVar
                               ("$none", None, `Rigid))),
                         (Some _));
                         ((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some { |wild }));
                         ((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some _))
                         ]
                       )),
                    (Sugartypes.Var "f")))
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Function (
                      [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                      ([("wild",
                         (Sugartypes.Datatype.Present
                            Sugartypes.Datatype.Unit))
                         ],
                       Sugartypes.Datatype.Closed),
                      (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))));
                    (Sugartypes.Datatype.TypeApplication ("State",
                       [(Sugartypes.Datatype.Type
                           (Sugartypes.Datatype.TypeVar ("c", None, `Rigid)));
                         (Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                         ]
                       ))
                    ],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("State",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("c", None, `Rigid)));
                       (Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar ("b", None, `Rigid)))
                       ]
                     ))
                  )),
               (Some ((a) {}~> b, State (c,a)) -> State (c,b))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("pure", (a) -> Formlet (a));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("v", _))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "return"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some ([XmlItem], (Env) {}~> ([XmlItem], [|Just:_|Nothing|]))));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some Gen))
                      ]
                    )),
                 [(Sugartypes.TupleLit
                     [(Sugartypes.ListLit ([], (Some XmlItem)));
                       (Sugartypes.Block
                          ([(Sugartypes.Fun
                               { Sugartypes.fun_binder =
                                 ("_fun__g32",
                                  (Env) {}~> ([XmlItem], [|Just:_|Nothing|]));
                                 fun_linearity =
                                 CommonTypes.DeclaredLinearity.Unl;
                                 fun_definition =
                                 ([],
                                  ([[Sugartypes.Pattern.Any]],
                                   (Sugartypes.Block
                                      ([],
                                       (Sugartypes.TupleLit
                                          [(Sugartypes.ListLit ([],
                                              (Some XmlItem)));
                                            (Sugartypes.ConstructorLit (
                                               "Just",
                                               (Some (Sugartypes.TupleLit
                                                        [(Sugartypes.Var "v")
                                                          ])),
                                               (Some [|Just:_|Nothing|])))
                                            ])))));
                                 fun_location = CommonTypes.Location.Unknown;
                                 fun_signature = None;
                                 fun_unsafe_signature = false;
                                 fun_frozen = true })
                             ],
                           (Sugartypes.FreezeVar "_fun__g32")))
                       ])
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                       ]
                     ))
                  )),
               (Some (a) -> Formlet (a))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("pureE", (a) -> Maybe (a));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("x", _))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.ConstructorLit ("Just",
                 (Some (Sugartypes.TupleLit [(Sugartypes.Var "x")])),
                 (Some [|Just:_|Nothing|])))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Maybe",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                       ]
                     ))
                  )),
               (Some (a) -> Maybe (a))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("applyE", (Maybe ((a) -b-> c), Maybe (a)) -b-> Maybe (c));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row; a],
         ([[(Sugartypes.Pattern.Variable ("f", Maybe ((_) -> _)));
             (Sugartypes.Pattern.Variable ("x", Maybe (_)))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.Switch (
                 (Sugartypes.TupleLit
                    [(Sugartypes.Var "f"); (Sugartypes.Var "x")]),
                 [((Sugartypes.Pattern.Tuple
                      [(Sugartypes.Pattern.Variant ("Just",
                          (Some (Sugartypes.Pattern.Variable ("f", (_) -> _)))
                          ));
                        (Sugartypes.Pattern.Variant ("Just",
                           (Some (Sugartypes.Pattern.Variable ("x", _)))))
                        ]),
                   (Sugartypes.Block
                      ([],
                       (Sugartypes.ConstructorLit ("Just",
                          (Some (Sugartypes.TupleLit
                                   [(Sugartypes.FnAppl ((Sugartypes.Var "f"),
                                       [(Sugartypes.Var "x")]))
                                     ])),
                          (Some [|Just:_|Nothing|]))))));
                   ((Sugartypes.Pattern.Tuple
                       [Sugartypes.Pattern.Any; Sugartypes.Pattern.Any]),
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.ConstructorLit ("Nothing", None,
                           (Some [|Nothing|Just:_|]))))))
                   ],
                 (Some [|Nothing|Just:_|])))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Maybe",
                      [(Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.Function (
                             [(Sugartypes.Datatype.TypeVar
                                 ("a", None, `Rigid))
                               ],
                             ([],
                              (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                             (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))
                             )))
                        ]
                      ));
                    (Sugartypes.Datatype.TypeApplication ("Maybe",
                       [(Sugartypes.Datatype.Type
                           (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                         ]
                       ))
                    ],
                  ([], (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Maybe",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("b", None, `Rigid)))
                       ]
                     ))
                  )),
               (Some (Maybe ((a) -b-> c), Maybe (a)) -b-> Maybe (c))));
        fun_unsafe_signature = false; fun_frozen = true });
   Sugartypes.Infix;
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("@@@", (Formlet (a), Formlet ((a) {}~> b)) -> Formlet (b));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("m", Formlet (_)));
             (Sugartypes.Pattern.Variable ("k", Formlet ((_) {}~> _)))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.InfixAppl (
                 ([Gen; (Xml, CheckedCollector (_));
                    ([XmlItem], (Env) {}~> ([XmlItem], Maybe (_))); { |_ }],
                  (Operators.BinaryOp.Name ">>=")),
                 (Sugartypes.Var "m"),
                 (Sugartypes.Block
                    ([(Sugartypes.Fun
                         { Sugartypes.fun_binder =
                           ("_fun__g35",
                            (([XmlItem], (Env) {}~> ([XmlItem], Maybe (_)))) {}~> State (Gen,([XmlItem], (Env) {}~> ([XmlItem], Maybe (_)))));
                           fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                           fun_definition =
                           ([],
                            ([[(Sugartypes.Pattern.Tuple
                                  [(Sugartypes.Pattern.Variable
                                      ("x", [XmlItem]));
                                    (Sugartypes.Pattern.Variable
                                       ("c",
                                        (Env) {}~> ([XmlItem], Maybe (_))))
                                    ])
                                ]
                               ],
                             (Sugartypes.Block
                                ([],
                                 (Sugartypes.InfixAppl (
                                    ([Gen;
                                       (Xml, CheckedCollector ((_) {}~> _));
                                       ([XmlItem], (Env) {}~> ([XmlItem], Maybe (_)));
                                       { |wild }],
                                     (Operators.BinaryOp.Name ">>=")),
                                    (Sugartypes.Var "k"),
                                    (Sugartypes.Block
                                       ([(Sugartypes.Fun
                                            { Sugartypes.fun_binder =
                                              ("_fun__g34",
                                               (([XmlItem], (Env) {}~> ([XmlItem], Maybe ((_) {}~> b)))) {}~> State (Gen,([XmlItem], (Env) {}~> ([XmlItem], Maybe (b)))));
                                              fun_linearity =
                                              CommonTypes.DeclaredLinearity.Unl;
                                              fun_definition =
                                              ([],
                                               ([[(Sugartypes.Pattern.Tuple
                                                     [(Sugartypes.Pattern.Variable
                                                         ("y", [XmlItem]));
                                                       (Sugartypes.Pattern.Variable
                                                          ("f",
                                                           (Env) {}~> ([XmlItem], Maybe ((_) {}~> _))))
                                                       ])
                                                   ]
                                                  ],
                                                (Sugartypes.Block
                                                   ([],
                                                    (Sugartypes.FnAppl (
                                                       (Sugartypes.TAppl (
                                                          (Sugartypes.FreezeVar
                                                             "return"),
                                                          [((Sugartypes.Datatype.Type
                                                               (Sugartypes.Datatype.TypeVar
                                                                  ("$none",
                                                                   None,
                                                                   `Rigid))),
                                                            (Some ([XmlItem], (Env) {}~> ([XmlItem], Maybe (_)))));
                                                            ((Sugartypes.Datatype.Type
                                                                (Sugartypes.Datatype.TypeVar
                                                                   ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                             (Some { |wild }));
                                                            ((Sugartypes.Datatype.Type
                                                                (Sugartypes.Datatype.TypeVar
                                                                   ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                             (Some Gen))
                                                            ]
                                                          )),
                                                       [(Sugartypes.TupleLit
                                                           [(Sugartypes.InfixAppl (
                                                               ([XmlItem;
                                                                  { |wild }],
                                                                (Operators.BinaryOp.Name
                                                                   "++")),
                                                               (Sugartypes.Var
                                                                  "x"),
                                                               (Sugartypes.Var
                                                                  "y")
                                                               ));
                                                             (Sugartypes.Block
                                                                ([(Sugartypes.Fun
                                                                    { Sugartypes.fun_binder =
                                                                    ("_fun__g33",
                                                                    (Env) {}~> ([XmlItem], Maybe (_)));
                                                                    fun_linearity =
                                                                    CommonTypes.DeclaredLinearity.Unl;
                                                                    fun_definition =
                                                                    (
                                                                    [],
                                                                    (
                                                                    [[(Sugartypes.Pattern.Variable
                                                                    ("e", Env))
                                                                    ]],
                                                                    (
                                                                    Sugartypes.Block
                                                                    ([(Sugartypes.Val (
                                                                    (Sugartypes.Pattern.Tuple
                                                                    [(Sugartypes.Pattern.Variable
                                                                    ("fx",
                                                                    [XmlItem]));
                                                                    (Sugartypes.Pattern.Variable
                                                                    ("f",
                                                                    Maybe ((_) {}~> _)))
                                                                    ]),
                                                                    ([],
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.Var
                                                                    "f"),
                                                                    [(Sugartypes.Var
                                                                    "e")]))),
                                                                    CommonTypes.Location.Unknown,
                                                                    None));
                                                                    (Sugartypes.Val (
                                                                    (Sugartypes.Pattern.Tuple
                                                                    [(Sugartypes.Pattern.Variable
                                                                    ("cx",
                                                                    [XmlItem]));
                                                                    (Sugartypes.Pattern.Variable
                                                                    ("c",
                                                                    Maybe (_)))
                                                                    ]),
                                                                    ([],
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.Var
                                                                    "c"),
                                                                    [(Sugartypes.Var
                                                                    "e")]))),
                                                                    CommonTypes.Location.Unknown,
                                                                    None))],
                                                                    (Sugartypes.TupleLit
                                                                    [(Sugartypes.InfixAppl (
                                                                    ([XmlItem;
                                                                    { |wild }
                                                                    ],
                                                                    (Operators.BinaryOp.Name
                                                                    "++")),
                                                                    (Sugartypes.Var
                                                                    "cx"),
                                                                    (Sugartypes.Var
                                                                    "fx")));
                                                                    (Sugartypes.InfixAppl (
                                                                    ([_;
                                                                    { |wild };
                                                                    _],
                                                                    (Operators.BinaryOp.Name
                                                                    "applyE")),
                                                                    (Sugartypes.Var
                                                                    "f"),
                                                                    (Sugartypes.Var
                                                                    "c")))])))));
                                                                    fun_location =
                                                                    CommonTypes.Location.Unknown;
                                                                    fun_signature =
                                                                    None;
                                                                    fun_unsafe_signature =
                                                                    false;
                                                                    fun_frozen =
                                                                    true })
                                                                   ],
                                                                 (Sugartypes.FreezeVar
                                                                    "_fun__g33")))
                                                             ])
                                                         ]
                                                       ))))));
                                              fun_location =
                                              CommonTypes.Location.Unknown;
                                              fun_signature = None;
                                              fun_unsafe_signature = false;
                                              fun_frozen = true })
                                          ],
                                        (Sugartypes.FreezeVar "_fun__g34")))
                                    ))))));
                           fun_location = CommonTypes.Location.Unknown;
                           fun_signature = None;
                           fun_unsafe_signature = false; fun_frozen = true })
                       ],
                     (Sugartypes.FreezeVar "_fun__g35")))
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Formlet",
                      [(Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                        ]
                      ));
                    (Sugartypes.Datatype.TypeApplication ("Formlet",
                       [(Sugartypes.Datatype.Type
                           (Sugartypes.Datatype.Function (
                              [(Sugartypes.Datatype.TypeVar
                                  ("a", None, `Rigid))
                                ],
                              ([("wild",
                                 (Sugartypes.Datatype.Present
                                    Sugartypes.Datatype.Unit))
                                 ],
                               Sugartypes.Datatype.Closed),
                              (Sugartypes.Datatype.TypeVar
                                 ("b", None, `Rigid))
                              )))
                         ]
                       ))
                    ],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("b", None, `Rigid)))
                       ]
                     ))
                  )),
               (Some (Formlet (a), Formlet ((a) {}~> b)) -> Formlet (b))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("@@=>", (Formlet (a), (a) {}~> b) -> Formlet (b));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("m", Formlet (_)));
             (Sugartypes.Pattern.Variable ("f", (_) {}~> _))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.InfixAppl (
                 ([_; _; { |_ }], (Operators.BinaryOp.Name "@@@")),
                 (Sugartypes.Var "m"),
                 (Sugartypes.FnAppl (
                    (Sugartypes.TAppl ((Sugartypes.FreezeVar "pure"),
                       [((Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeVar
                               ("$none", None, `Rigid))),
                         (Some (_) {}~> _));
                         ((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some { |_ }))
                         ]
                       )),
                    [(Sugartypes.Var "f")]))
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Formlet",
                      [(Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                        ]
                      ));
                    (Sugartypes.Datatype.Function (
                       [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                       ([("wild",
                          (Sugartypes.Datatype.Present
                             Sugartypes.Datatype.Unit))
                          ],
                        Sugartypes.Datatype.Closed),
                       (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))))
                    ],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("b", None, `Rigid)))
                       ]
                     ))
                  )),
               (Some (Formlet (a), (a) {}~> b) -> Formlet (b))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("xml", (Xml) -> Formlet (()));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("x", Xml))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "return"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some (Xml, (Env) {}~> (Xml, Maybe (())))));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some Gen))
                      ]
                    )),
                 [(Sugartypes.TupleLit
                     [(Sugartypes.Var "x");
                       (Sugartypes.Block
                          ([(Sugartypes.Fun
                               { Sugartypes.fun_binder =
                                 ("_fun__g36", (Env) {}~> (Xml, Maybe (())));
                                 fun_linearity =
                                 CommonTypes.DeclaredLinearity.Unl;
                                 fun_definition =
                                 ([],
                                  ([[(Sugartypes.Pattern.Variable ("e", Env))
                                      ]
                                     ],
                                   (Sugartypes.Block
                                      ([],
                                       (Sugartypes.TupleLit
                                          [(Sugartypes.Var "x");
                                            (Sugartypes.FnAppl (
                                               (Sugartypes.TAppl (
                                                  (Sugartypes.FreezeVar
                                                     "pureE"),
                                                  [((Sugartypes.Datatype.Type
                                                       (Sugartypes.Datatype.TypeVar
                                                          ("$none", None,
                                                           `Rigid))),
                                                    (Some ()));
                                                    ((Sugartypes.Datatype.Type
                                                        (Sugartypes.Datatype.TypeVar
                                                           ("$none", None,
                                                            `Rigid))),
                                                     (Some { |wild }))
                                                    ]
                                                  )),
                                               [(Sugartypes.RecordLit (
                                                   [], None))
                                                 ]
                                               ))
                                            ])))));
                                 fun_location = CommonTypes.Location.Unknown;
                                 fun_signature = None;
                                 fun_unsafe_signature = false;
                                 fun_frozen = true })
                             ],
                           (Sugartypes.FreezeVar "_fun__g36")))
                       ])
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Xml", []))],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type Sugartypes.Datatype.Unit)]))
                  )),
               (Some (Xml) -> Formlet (()))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("text", (String) ~> Formlet (()));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("s", String))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "xml"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |wild|_ }))]
                    )),
                 [(Sugartypes.FnAppl (
                     (Sugartypes.TAppl ((Sugartypes.FreezeVar "stringToXml"),
                        [((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some { |wild|_ }))]
                        )),
                     [(Sugartypes.Var "s")]))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.String)
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type Sugartypes.Datatype.Unit)]))
                  )),
               (Some (String) ~> Formlet (()))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("plug", (XmlContext, Formlet (a)) -> Formlet (a));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("f", XmlContext));
             (Sugartypes.Pattern.Variable ("m", Formlet (_)))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.InfixAppl (
                 ([Gen; (Xml, CheckedCollector (_));
                    (Xml, (Env) {}~> (Xml, Maybe (_))); { |_ }],
                  (Operators.BinaryOp.Name ">>=")),
                 (Sugartypes.Var "m"),
                 (Sugartypes.Block
                    ([(Sugartypes.Fun
                         { Sugartypes.fun_binder =
                           ("_fun__g38",
                            ((Xml, (Env) {}~> (Xml, Maybe (a)))) {}~> State (Gen,(Xml, (Env) {}~> (Xml, Maybe (a)))));
                           fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                           fun_definition =
                           ([],
                            ([[(Sugartypes.Pattern.Tuple
                                  [(Sugartypes.Pattern.Variable ("x", Xml));
                                    (Sugartypes.Pattern.Variable
                                       ("collector",
                                        (Env) {}~> (Xml, Maybe (_))))
                                    ])
                                ]
                               ],
                             (Sugartypes.Block
                                ([],
                                 (Sugartypes.FnAppl (
                                    (Sugartypes.TAppl (
                                       (Sugartypes.FreezeVar "return"),
                                       [((Sugartypes.Datatype.Type
                                            (Sugartypes.Datatype.TypeVar
                                               ("$none", None, `Rigid))),
                                         (Some (Xml, (Env) {}~> (Xml, Maybe (_)))));
                                         ((Sugartypes.Datatype.Type
                                             (Sugartypes.Datatype.TypeVar
                                                ("$none", None, `Rigid))),
                                          (Some { |wild }));
                                         ((Sugartypes.Datatype.Type
                                             (Sugartypes.Datatype.TypeVar
                                                ("$none", None, `Rigid))),
                                          (Some Gen))
                                         ]
                                       )),
                                    [(Sugartypes.TupleLit
                                        [(Sugartypes.FnAppl (
                                            (Sugartypes.Var "f"),
                                            [(Sugartypes.Var "x")]));
                                          (Sugartypes.Block
                                             ([(Sugartypes.Fun
                                                  { Sugartypes.fun_binder =
                                                    ("_fun__g37",
                                                     (Env) {}~> (Xml, Maybe (_)));
                                                    fun_linearity =
                                                    CommonTypes.DeclaredLinearity.Unl;
                                                    fun_definition =
                                                    ([],
                                                     ([[(Sugartypes.Pattern.Variable
                                                           ("env", Env))
                                                         ]
                                                        ],
                                                      (Sugartypes.Block
                                                         ([(Sugartypes.Val (
                                                              (Sugartypes.Pattern.Tuple
                                                                 [(Sugartypes.Pattern.Variable
                                                                    ("xml",
                                                                    Xml));
                                                                   (Sugartypes.Pattern.Variable
                                                                    ("c",
                                                                    Maybe (_)))
                                                                   ]),
                                                              ([],
                                                               (Sugartypes.FnAppl (
                                                                  (Sugartypes.Var
                                                                    "collector"),
                                                                  [(Sugartypes.Var
                                                                    "env")]
                                                                  ))),
                                                              CommonTypes.Location.Unknown,
                                                              None))
                                                            ],
                                                          (Sugartypes.TupleLit
                                                             [(Sugartypes.FnAppl (
                                                                 (Sugartypes.Var
                                                                    "f"),
                                                                 [(Sugartypes.Var
                                                                    "xml")
                                                                   ]
                                                                 ));
                                                               (Sugartypes.Var
                                                                  "c")
                                                               ])))));
                                                    fun_location =
                                                    CommonTypes.Location.Unknown;
                                                    fun_signature = None;
                                                    fun_unsafe_signature =
                                                    false; fun_frozen = true
                                                    })
                                                ],
                                              (Sugartypes.FreezeVar
                                                 "_fun__g37")))
                                          ])
                                      ]
                                    ))))));
                           fun_location = CommonTypes.Location.Unknown;
                           fun_signature = None;
                           fun_unsafe_signature = false; fun_frozen = true })
                       ],
                     (Sugartypes.FreezeVar "_fun__g38")))
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("XmlContext", []));
                    (Sugartypes.Datatype.TypeApplication ("Formlet",
                       [(Sugartypes.Datatype.Type
                           (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                         ]
                       ))
                    ],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                       ]
                     ))
                  )),
               (Some (XmlContext, Formlet (a)) -> Formlet (a))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("makeName", (Int) -> String);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("i", Int))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.InfixAppl (
                 ([{ |_ }], (Operators.BinaryOp.Name "^^")),
                 (Sugartypes.Constant (CommonTypes.Constant.String "input_")),
                 (Sugartypes.FnAppl (
                    (Sugartypes.TAppl ((Sugartypes.FreezeVar "intToString"),
                       [((Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeVar
                               ("$none", None, `Rigid))),
                         (Some { |_ }))]
                       )),
                    [(Sugartypes.Var "i")]))
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.Primitive CommonTypes.Primitive.String)
                  )),
               (Some (Int) -> String)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Val (
      (Sugartypes.Pattern.Variable ("nextName", State (Int,String))),
      ([],
       (Sugartypes.Block
          ([(Sugartypes.Fun
               { Sugartypes.fun_binder =
                 ("_fun__g39", (Int) {}~> (String, Int));
                 fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                 fun_definition =
                 ([],
                  ([[(Sugartypes.Pattern.Variable ("i", Int))]],
                   (Sugartypes.Block
                      ([],
                       (Sugartypes.TupleLit
                          [(Sugartypes.FnAppl (
                              (Sugartypes.TAppl (
                                 (Sugartypes.FreezeVar "makeName"),
                                 [((Sugartypes.Datatype.Type
                                      (Sugartypes.Datatype.TypeVar
                                         ("$none", None, `Rigid))),
                                   (Some { |wild }))]
                                 )),
                              [(Sugartypes.Var "i")]));
                            (Sugartypes.InfixAppl (
                               ([{ |wild }], (Operators.BinaryOp.Name "+")),
                               (Sugartypes.Var "i"),
                               (Sugartypes.Constant
                                  (CommonTypes.Constant.Int 1))
                               ))
                            ])))));
                 fun_location = CommonTypes.Location.Unknown;
                 fun_signature = None; fun_unsafe_signature = false;
                 fun_frozen = true })
             ],
           (Sugartypes.FreezeVar "_fun__g39")))),
      CommonTypes.Location.Unknown,
      (Some ((Sugartypes.Datatype.TypeApplication ("State",
                [(Sugartypes.Datatype.Type
                    (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int));
                  (Sugartypes.Datatype.Type
                     (Sugartypes.Datatype.Primitive
                        CommonTypes.Primitive.String))
                  ]
                )),
             (Some State (Int,String))))
      ));
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder =
         ("sequence", ([State (a,b)]) ~> State (a,[b]));
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a; a::Row],
           (Some (([State (a,b)]) ~> State (a,[b]), [None; None; None]))),
          ([[(Sugartypes.Pattern.Variable ("xs", [State (_,_)]))]],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "xs"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.FnAppl (
                           (Sugartypes.TAppl (
                              (Sugartypes.FreezeVar "return"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some [_]));
                                ((Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("$none", None, `Rigid))),
                                 (Some { |wild|_ }));
                                ((Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("$none", None, `Rigid))),
                                 (Some _))
                                ]
                              )),
                           [(Sugartypes.ListLit ([], (Some _)))])))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Variable ("x", State (_,_))),
                        (Sugartypes.Pattern.Variable ("xs", [State (_,_)])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.InfixAppl (
                            ([_; _; [_]; { |wild|_ }],
                             (Operators.BinaryOp.Name ">>=")),
                            (Sugartypes.Var "x"),
                            (Sugartypes.TupleLit
                               [(Sugartypes.Block
                                   ([(Sugartypes.Fun
                                        { Sugartypes.fun_binder =
                                          ("_fun__g41",
                                           (a) {}~> State (_,[a]));
                                          fun_linearity =
                                          CommonTypes.DeclaredLinearity.Unl;
                                          fun_definition =
                                          ([],
                                           ([[(Sugartypes.Pattern.Variable
                                                 ("x", _))
                                               ]
                                              ],
                                            (Sugartypes.Block
                                               ([],
                                                (Sugartypes.InfixAppl (
                                                   ([_; [_]; [_]; { |wild }],
                                                    (Operators.BinaryOp.Name
                                                       ">>=")),
                                                   (Sugartypes.FnAppl (
                                                      (Sugartypes.TAppl (
                                                         (Sugartypes.FreezeVar
                                                            "sequence"),
                                                         [((Sugartypes.Datatype.Type
                                                              (Sugartypes.Datatype.TypeVar
                                                                 ("$none",
                                                                  None,
                                                                  `Rigid))),
                                                           (Some _));
                                                           ((Sugartypes.Datatype.Type
                                                               (Sugartypes.Datatype.TypeVar
                                                                  ("$none",
                                                                   None,
                                                                   `Rigid))),
                                                            (Some _));
                                                           ((Sugartypes.Datatype.Type
                                                               (Sugartypes.Datatype.TypeVar
                                                                  ("$none",
                                                                   None,
                                                                   `Rigid))),
                                                            (Some {  }))
                                                           ]
                                                         )),
                                                      [(Sugartypes.Var "xs")]
                                                      )),
                                                   (Sugartypes.TupleLit
                                                      [(Sugartypes.Block
                                                          ([(Sugartypes.Fun
                                                               { Sugartypes.fun_binder =
                                                                 ("_fun__g40",
                                                                  ([a]) {}~> State (_,[a]));
                                                                 fun_linearity =
                                                                 CommonTypes.DeclaredLinearity.Unl;
                                                                 fun_definition =
                                                                 ([],
                                                                  ([[(Sugartypes.Pattern.Variable
                                                                    ("xs",
                                                                    [_]))]],
                                                                   (Sugartypes.Block
                                                                    ([],
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "return"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some [_]));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild }));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some _))
                                                                    ])),
                                                                    [(Sugartypes.InfixAppl (
                                                                    ([_;
                                                                    { |wild }
                                                                    ],
                                                                    Operators.BinaryOp.Cons),
                                                                    (Sugartypes.Var
                                                                    "x"),
                                                                    (Sugartypes.Var
                                                                    "xs")))]
                                                                    ))))));
                                                                 fun_location =
                                                                 CommonTypes.Location.Unknown;
                                                                 fun_signature =
                                                                 None;
                                                                 fun_unsafe_signature =
                                                                 false;
                                                                 fun_frozen =
                                                                 true })
                                                             ],
                                                           (Sugartypes.FreezeVar
                                                              "_fun__g40")))
                                                        ])
                                                   ))))));
                                          fun_location =
                                          CommonTypes.Location.Unknown;
                                          fun_signature = None;
                                          fun_unsafe_signature = false;
                                          fun_frozen = true })
                                      ],
                                    (Sugartypes.FreezeVar "_fun__g41")))
                                 ])
                            )))))
                    ],
                  (Some State (_,[_]))))))));
         rec_location = CommonTypes.Location.Unknown;
         rec_signature =
         (Some ((Sugartypes.Datatype.Function (
                   [(Sugartypes.Datatype.List
                       (Sugartypes.Datatype.TypeApplication ("State",
                          [(Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("a", None, `Rigid)));
                            (Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("b", None, `Rigid)))
                            ]
                          )))
                     ],
                   ([("wild",
                      (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                      ],
                    (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                   (Sugartypes.Datatype.TypeApplication ("State",
                      [(Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)));
                        (Sugartypes.Datatype.Type
                           (Sugartypes.Datatype.List
                              (Sugartypes.Datatype.TypeVar
                                 ("b", None, `Rigid))))
                        ]
                      ))
                   )),
                (Some ([State (a,b)]) ~> State (a,[b]))));
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 688, column 695, to line 15365, column 15554
         }
        ]);
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder =
         ("formlets", ([Formlet (a)]) ~> Formlet ([a]));
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a::Row],
           (Some (([Formlet (a)]) ~> Formlet ([a]), [None; None]))),
          ([[(Sugartypes.Pattern.Variable ("fs", [Formlet (_)]))]],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "fs"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.FnAppl (
                           (Sugartypes.TAppl ((Sugartypes.FreezeVar "@@@"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some ()));
                                ((Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("$none", None, `Rigid))),
                                 (Some [_]));
                                ((Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("$none", None, `Rigid))),
                                 (Some { wild|_ }))
                                ]
                              )),
                           [(Sugartypes.FnAppl (
                               (Sugartypes.TAppl (
                                  (Sugartypes.FreezeVar "xml"),
                                  [((Sugartypes.Datatype.Type
                                       (Sugartypes.Datatype.TypeVar
                                          ("$none", None, `Rigid))),
                                    (Some { wild|_ }))]
                                  )),
                               [(Sugartypes.Xml ("#", [], None, []))]));
                             (Sugartypes.FnAppl (
                                (Sugartypes.TAppl (
                                   (Sugartypes.FreezeVar "pure"),
                                   [((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some (()) {}~> [_]));
                                     ((Sugartypes.Datatype.Type
                                         (Sugartypes.Datatype.TypeVar
                                            ("$none", None, `Rigid))),
                                      (Some { wild|_ }))
                                     ]
                                   )),
                                [(Sugartypes.Block
                                    ([(Sugartypes.Fun
                                         { Sugartypes.fun_binder =
                                           ("_fun__g42", (()) {}~> [_]);
                                           fun_linearity =
                                           CommonTypes.DeclaredLinearity.Unl;
                                           fun_definition =
                                           ([],
                                            ([[(Sugartypes.Pattern.Tuple [])]
                                               ],
                                             (Sugartypes.ListLit ([],
                                                (Some _)))));
                                           fun_location =
                                           CommonTypes.Location.Unknown;
                                           fun_signature = None;
                                           fun_unsafe_signature = false;
                                           fun_frozen = true })
                                       ],
                                     (Sugartypes.FreezeVar "_fun__g42")))
                                  ]
                                ))
                             ]
                           )))));
                    ((Sugartypes.Pattern.List
                        [(Sugartypes.Pattern.Variable ("x", Formlet (_)))]),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.FnAppl (
                            (Sugartypes.TAppl ((Sugartypes.FreezeVar "@@@"),
                               [((Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("$none", None, `Rigid))),
                                 (Some _));
                                 ((Sugartypes.Datatype.Type
                                     (Sugartypes.Datatype.TypeVar
                                        ("$none", None, `Rigid))),
                                  (Some [_]));
                                 ((Sugartypes.Datatype.Type
                                     (Sugartypes.Datatype.TypeVar
                                        ("$none", None, `Rigid))),
                                  (Some { wild|_ }))
                                 ]
                               )),
                            [(Sugartypes.FnAppl (
                                (Sugartypes.TAppl (
                                   (Sugartypes.FreezeVar "@@@"),
                                   [((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some _));
                                     ((Sugartypes.Datatype.Type
                                         (Sugartypes.Datatype.TypeVar
                                            ("$none", None, `Rigid))),
                                      (Some _));
                                     ((Sugartypes.Datatype.Type
                                         (Sugartypes.Datatype.TypeVar
                                            ("$none", None, `Rigid))),
                                      (Some { wild|_ }))
                                     ]
                                   )),
                                [(Sugartypes.Var "x");
                                  (Sugartypes.FnAppl (
                                     (Sugartypes.TAppl (
                                        (Sugartypes.FreezeVar "pure"),
                                        [((Sugartypes.Datatype.Type
                                             (Sugartypes.Datatype.TypeVar
                                                ("$none", None, `Rigid))),
                                          (Some (a) {}~> a));
                                          ((Sugartypes.Datatype.Type
                                              (Sugartypes.Datatype.TypeVar
                                                 ("$none", None, `Rigid))),
                                           (Some { wild|_ }))
                                          ]
                                        )),
                                     [(Sugartypes.Block
                                         ([(Sugartypes.Fun
                                              { Sugartypes.fun_binder =
                                                ("_fun__g43", (a) {}~> a);
                                                fun_linearity =
                                                CommonTypes.DeclaredLinearity.Unl;
                                                fun_definition =
                                                ([],
                                                 ([[(Sugartypes.Pattern.As (
                                                       ("_formlet__g11", _),
                                                       (Sugartypes.Pattern.Variable
                                                          ("f", _))
                                                       ))
                                                     ]
                                                    ],
                                                  (Sugartypes.TupleLit
                                                     [(Sugartypes.Var
                                                         "_formlet__g11")
                                                       ])));
                                                fun_location =
                                                CommonTypes.Location.Unknown;
                                                fun_signature = None;
                                                fun_unsafe_signature = false;
                                                fun_frozen = true })
                                            ],
                                          (Sugartypes.FreezeVar "_fun__g43")))
                                       ]
                                     ))
                                  ]
                                ));
                              (Sugartypes.FnAppl (
                                 (Sugartypes.TAppl (
                                    (Sugartypes.FreezeVar "pure"),
                                    [((Sugartypes.Datatype.Type
                                         (Sugartypes.Datatype.TypeVar
                                            ("$none", None, `Rigid))),
                                      (Some (a) {}~> [a]));
                                      ((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some { wild|_ }))
                                      ]
                                    )),
                                 [(Sugartypes.Block
                                     ([(Sugartypes.Fun
                                          { Sugartypes.fun_binder =
                                            ("_fun__g44", (a) {}~> [a]);
                                            fun_linearity =
                                            CommonTypes.DeclaredLinearity.Unl;
                                            fun_definition =
                                            ([],
                                             ([[(Sugartypes.Pattern.As (
                                                   ("_formlet__g10", _),
                                                   (Sugartypes.Pattern.Variable
                                                      ("f", _))
                                                   ))
                                                 ]
                                                ],
                                              (Sugartypes.ListLit (
                                                 [(Sugartypes.Var "f")],
                                                 (Some _)))));
                                            fun_location =
                                            CommonTypes.Location.Unknown;
                                            fun_signature = None;
                                            fun_unsafe_signature = false;
                                            fun_frozen = true })
                                        ],
                                      (Sugartypes.FreezeVar "_fun__g44")))
                                   ]
                                 ))
                              ]
                            )))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Variable ("x", Formlet (_))),
                        (Sugartypes.Pattern.Variable ("xs", [Formlet (_)])))),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.FnAppl (
                            (Sugartypes.TAppl ((Sugartypes.FreezeVar "@@@"),
                               [((Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("$none", None, `Rigid))),
                                 (Some (a, [a])));
                                 ((Sugartypes.Datatype.Type
                                     (Sugartypes.Datatype.TypeVar
                                        ("$none", None, `Rigid))),
                                  (Some [_]));
                                 ((Sugartypes.Datatype.Type
                                     (Sugartypes.Datatype.TypeVar
                                        ("$none", None, `Rigid))),
                                  (Some { wild|_ }))
                                 ]
                               )),
                            [(Sugartypes.FnAppl (
                                (Sugartypes.TAppl (
                                   (Sugartypes.FreezeVar "@@@"),
                                   [((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some _));
                                     ((Sugartypes.Datatype.Type
                                         (Sugartypes.Datatype.TypeVar
                                            ("$none", None, `Rigid))),
                                      (Some (a, [a])));
                                     ((Sugartypes.Datatype.Type
                                         (Sugartypes.Datatype.TypeVar
                                            ("$none", None, `Rigid))),
                                      (Some { wild|_ }))
                                     ]
                                   )),
                                [(Sugartypes.Var "x");
                                  (Sugartypes.FnAppl (
                                     (Sugartypes.TAppl (
                                        (Sugartypes.FreezeVar "@@@"),
                                        [((Sugartypes.Datatype.Type
                                             (Sugartypes.Datatype.TypeVar
                                                ("$none", None, `Rigid))),
                                          (Some [_]));
                                          ((Sugartypes.Datatype.Type
                                              (Sugartypes.Datatype.TypeVar
                                                 ("$none", None, `Rigid))),
                                           (Some (a) {}~> (a, [a])));
                                          ((Sugartypes.Datatype.Type
                                              (Sugartypes.Datatype.TypeVar
                                                 ("$none", None, `Rigid))),
                                           (Some { wild|_ }))
                                          ]
                                        )),
                                     [(Sugartypes.FnAppl (
                                         (Sugartypes.TAppl (
                                            (Sugartypes.FreezeVar "formlets"),
                                            [((Sugartypes.Datatype.Type
                                                 (Sugartypes.Datatype.TypeVar
                                                    ("$none", None, `Rigid))),
                                              (Some _));
                                              ((Sugartypes.Datatype.Type
                                                  (Sugartypes.Datatype.TypeVar
                                                     ("$none", None, `Rigid))),
                                               (Some { |_ }))
                                              ]
                                            )),
                                         [(Sugartypes.Var "xs")]));
                                       (Sugartypes.FnAppl (
                                          (Sugartypes.TAppl (
                                             (Sugartypes.FreezeVar "pure"),
                                             [((Sugartypes.Datatype.Type
                                                  (Sugartypes.Datatype.TypeVar
                                                     ("$none", None, `Rigid))),
                                               (Some ([a]) {}~> (a) {}~> (a, [a])));
                                               ((Sugartypes.Datatype.Type
                                                   (Sugartypes.Datatype.TypeVar
                                                      ("$none", None, `Rigid))),
                                                (Some { wild|_ }))
                                               ]
                                             )),
                                          [(Sugartypes.Block
                                              ([(Sugartypes.Fun
                                                   { Sugartypes.fun_binder =
                                                     ("_fun__g45",
                                                      ([a]) {}~> (a) {}~> (a, [a]));
                                                     fun_linearity =
                                                     CommonTypes.DeclaredLinearity.Unl;
                                                     fun_definition =
                                                     ([],
                                                      ([[(Sugartypes.Pattern.As (
                                                            ("_formlet__g15",
                                                             [_]),
                                                            (Sugartypes.Pattern.Variable
                                                               ("fs", [_]))
                                                            ))
                                                          ]
                                                         ],
                                                       (Sugartypes.Block
                                                          ([(Sugartypes.Fun
                                                               { Sugartypes.fun_binder =
                                                                 ("_fun__g46",
                                                                  (a) {}~> (a, [a]));
                                                                 fun_linearity =
                                                                 CommonTypes.DeclaredLinearity.Unl;
                                                                 fun_definition =
                                                                 ([],
                                                                  ([[(Sugartypes.Pattern.As (
                                                                    ("_formlet__g14",
                                                                    _),
                                                                    (Sugartypes.Pattern.Variable
                                                                    ("f", _))
                                                                    ))]],
                                                                   (Sugartypes.TupleLit
                                                                    [(Sugartypes.Var
                                                                    "_formlet__g14");
                                                                    (Sugartypes.Var
                                                                    "_formlet__g15")
                                                                    ])));
                                                                 fun_location =
                                                                 CommonTypes.Location.Unknown;
                                                                 fun_signature =
                                                                 None;
                                                                 fun_unsafe_signature =
                                                                 false;
                                                                 fun_frozen =
                                                                 false })
                                                             ],
                                                           (Sugartypes.FreezeVar
                                                              "_fun__g46")))));
                                                     fun_location =
                                                     CommonTypes.Location.Unknown;
                                                     fun_signature = None;
                                                     fun_unsafe_signature =
                                                     false; fun_frozen = true
                                                     })
                                                 ],
                                               (Sugartypes.FreezeVar
                                                  "_fun__g45")))
                                            ]
                                          ))
                                       ]
                                     ))
                                  ]
                                ));
                              (Sugartypes.FnAppl (
                                 (Sugartypes.TAppl (
                                    (Sugartypes.FreezeVar "pure"),
                                    [((Sugartypes.Datatype.Type
                                         (Sugartypes.Datatype.TypeVar
                                            ("$none", None, `Rigid))),
                                      (Some ((a, [a])) {}~> [a]));
                                      ((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some { wild|_ }))
                                      ]
                                    )),
                                 [(Sugartypes.Block
                                     ([(Sugartypes.Fun
                                          { Sugartypes.fun_binder =
                                            ("_fun__g47", ((a, [a])) {}~> [a]);
                                            fun_linearity =
                                            CommonTypes.DeclaredLinearity.Unl;
                                            fun_definition =
                                            ([],
                                             ([[(Sugartypes.Pattern.Tuple
                                                   [(Sugartypes.Pattern.As (
                                                       ("_formlet__g12", _),
                                                       (Sugartypes.Pattern.Variable
                                                          ("f", _))
                                                       ));
                                                     (Sugartypes.Pattern.As (
                                                        ("_formlet__g13", [_]),
                                                        (Sugartypes.Pattern.Variable
                                                           ("fs", [_]))
                                                        ))
                                                     ])
                                                 ]
                                                ],
                                              (Sugartypes.InfixAppl (
                                                 ([_; { |wild }],
                                                  Operators.BinaryOp.Cons),
                                                 (Sugartypes.Var "f"),
                                                 (Sugartypes.Var "fs")))));
                                            fun_location =
                                            CommonTypes.Location.Unknown;
                                            fun_signature = None;
                                            fun_unsafe_signature = false;
                                            fun_frozen = true })
                                        ],
                                      (Sugartypes.FreezeVar "_fun__g47")))
                                   ]
                                 ))
                              ]
                            )))))
                    ],
                  (Some Formlet ([_]))))))));
         rec_location = CommonTypes.Location.Unknown;
         rec_signature =
         (Some ((Sugartypes.Datatype.Function (
                   [(Sugartypes.Datatype.List
                       (Sugartypes.Datatype.TypeApplication ("Formlet",
                          [(Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("a", None, `Rigid)))
                            ]
                          )))
                     ],
                   ([("wild",
                      (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                      ],
                    (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                   (Sugartypes.Datatype.TypeApplication ("Formlet",
                      [(Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.List
                             (Sugartypes.Datatype.TypeVar ("a", None, `Rigid))))
                        ]
                      ))
                   )),
                (Some ([Formlet (a)]) ~> Formlet ([a]))));
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 698, column 704, to line 15604, column 15813
         }
        ]);
   (Sugartypes.Typenames
      [("RecForms", [],
        ((Sugartypes.Datatype.List
            (Sugartypes.Datatype.Mu ("a",
               (Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.List
                      (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   Sugartypes.Datatype.Closed),
                  (Sugartypes.Datatype.TypeApplication ("Xml", []))))
               ))),
         (Some [mu a . ([a]) {}~> Xml])),
        File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 707, columns 15829 to 15872)
        ]);
   (Sugartypes.Typenames
      [("MultiXmlContext", [],
        ((Sugartypes.Datatype.Function (
            [(Sugartypes.Datatype.List
                (Sugartypes.Datatype.TypeApplication ("Xml", [])))
              ],
            ([("wild", (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
               ],
             Sugartypes.Datatype.Closed),
            (Sugartypes.Datatype.TypeApplication ("Xml", [])))),
         (Some ([Xml]) {}~> Xml)),
        File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 708, columns 15874 to 15917)
        ]);
   (Sugartypes.Typenames
      [("CheckedFormBuilder", [],
        ((Sugartypes.Datatype.Function (
            [(Sugartypes.Datatype.TypeApplication ("MultiXmlContext", []));
              (Sugartypes.Datatype.TypeApplication ("RecForms", []));
              (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)],
            ([("wild", (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
               ],
             Sugartypes.Datatype.Closed),
            (Sugartypes.Datatype.TypeApplication ("Xml", [])))),
         (Some (MultiXmlContext, RecForms, Int) {}~> Xml)),
        File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 710, columns 15920 to 15991)
        ]);
   (Sugartypes.Typenames
      [("Page", [],
        ((Sugartypes.Datatype.Tuple
            [(Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int);
              (Sugartypes.Datatype.TypeApplication ("MultiXmlContext", []));
              (Sugartypes.Datatype.Function (
                 [(Sugartypes.Datatype.TypeApplication ("Gen", []))],
                 ([("wild",
                    (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                  Sugartypes.Datatype.Closed),
                 (Sugartypes.Datatype.Tuple
                    [(Sugartypes.Datatype.List
                        (Sugartypes.Datatype.TypeApplication (
                           "CheckedFormBuilder", [])));
                      (Sugartypes.Datatype.TypeApplication ("Gen", []))])
                 ))
              ]),
         (Some (Int, MultiXmlContext, (Gen) {}~> ([CheckedFormBuilder], Gen)))),
        File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 711, columns 15993 to 16071)
        ]);
   (Sugartypes.Typenames
      [("Handler", [(("a", (None, None), `Rigid), (Some a))],
        ((Sugartypes.Datatype.Function (
            [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
            ([("wild", (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
               ],
             Sugartypes.Datatype.Closed),
            (Sugartypes.Datatype.TypeApplication ("Page", [])))),
         (Some (_) {}~> Page)),
        File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 712, columns 16073 to 16109)
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("pickleCont", (() -> Page) ~> String);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("cont", () -> Page))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "unsafePickleCont"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some Page));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Block
                     ([(Sugartypes.Fun
                          { Sugartypes.fun_binder = ("_fun__g48", () -> Page);
                            fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                            fun_definition =
                            ([],
                             ([[]],
                              (Sugartypes.Block
                                 ([],
                                  (Sugartypes.FnAppl (
                                     (Sugartypes.Var "cont"), []))))));
                            fun_location = CommonTypes.Location.Unknown;
                            fun_signature = None;
                            fun_unsafe_signature = false; fun_frozen = true })
                        ],
                      (Sugartypes.FreezeVar "_fun__g48")))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Function ([],
                      ([], (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                      (Sugartypes.Datatype.TypeApplication ("Page", []))))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.Primitive CommonTypes.Primitive.String)
                  )),
               (Some (() -> Page) ~> String)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Val ((Sugartypes.Pattern.Variable ("unitP", Page)),
      ([],
       (Sugartypes.TupleLit
          [(Sugartypes.Constant (CommonTypes.Constant.Int 0));
            (Sugartypes.Block
               ([(Sugartypes.Fun
                    { Sugartypes.fun_binder = ("_fun__g49", ([Xml]) {}~> Xml);
                      fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                      fun_definition =
                      ([],
                       ([[Sugartypes.Pattern.Nil]],
                        (Sugartypes.Block
                           ([], (Sugartypes.Xml ("#", [], None, []))))));
                      fun_location = CommonTypes.Location.Unknown;
                      fun_signature = None; fun_unsafe_signature = false;
                      fun_frozen = true })
                  ],
                (Sugartypes.FreezeVar "_fun__g49")));
            (Sugartypes.Block
               ([(Sugartypes.Fun
                    { Sugartypes.fun_binder =
                      ("_fun__g50", (Gen) {}~> ([CheckedFormBuilder], Gen));
                      fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                      fun_definition =
                      ([],
                       ([[(Sugartypes.Pattern.Variable ("gen", Gen))]],
                        (Sugartypes.Block
                           ([],
                            (Sugartypes.TupleLit
                               [(Sugartypes.ListLit ([],
                                   (Some CheckedFormBuilder)));
                                 (Sugartypes.Var "gen")])))));
                      fun_location = CommonTypes.Location.Unknown;
                      fun_signature = None; fun_unsafe_signature = false;
                      fun_frozen = true })
                  ],
                (Sugartypes.FreezeVar "_fun__g50")))
            ])),
      CommonTypes.Location.Unknown,
      (Some ((Sugartypes.Datatype.TypeApplication ("Page", [])), (Some Page)))
      ));
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("joinP", (Page, Page) -> Page);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Tuple
               [(Sugartypes.Pattern.Variable ("i1", Int));
                 (Sugartypes.Pattern.Variable ("k1", MultiXmlContext));
                 (Sugartypes.Pattern.Variable
                    ("fs1", (Gen) {}~> ([CheckedFormBuilder], Gen)))
                 ]);
             (Sugartypes.Pattern.Tuple
                [(Sugartypes.Pattern.Variable ("i2", Int));
                  (Sugartypes.Pattern.Variable ("k2", MultiXmlContext));
                  (Sugartypes.Pattern.Variable
                     ("fs2", (Gen) {}~> ([CheckedFormBuilder], Gen)))
                  ])
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.TupleLit
                 [(Sugartypes.InfixAppl (
                     ([{ |_ }], (Operators.BinaryOp.Name "+")),
                     (Sugartypes.Var "i1"), (Sugartypes.Var "i2")));
                   (Sugartypes.Block
                      ([(Sugartypes.Fun
                           { Sugartypes.fun_binder =
                             ("_fun__g51", ([Xml]) {}~> Xml);
                             fun_linearity =
                             CommonTypes.DeclaredLinearity.Unl;
                             fun_definition =
                             ([],
                              ([[(Sugartypes.Pattern.Variable ("xs", [Xml]))]
                                 ],
                               (Sugartypes.Block
                                  ([],
                                   (Sugartypes.Xml ("#", [], None,
                                      [(Sugartypes.Block
                                          ([],
                                           (Sugartypes.FnAppl (
                                              (Sugartypes.Var "k1"),
                                              [(Sugartypes.FnAppl (
                                                  (Sugartypes.TAppl (
                                                     (Sugartypes.FreezeVar
                                                        "take"),
                                                     [((Sugartypes.Datatype.Type
                                                          (Sugartypes.Datatype.TypeVar
                                                             ("$none", None,
                                                              `Rigid))),
                                                       (Some Xml));
                                                       ((Sugartypes.Datatype.Type
                                                           (Sugartypes.Datatype.TypeVar
                                                              ("$none", None,
                                                               `Rigid))),
                                                        (Some {  }))
                                                       ]
                                                     )),
                                                  [(Sugartypes.Var "i1");
                                                    (Sugartypes.Var "xs")]
                                                  ))
                                                ]
                                              ))));
                                        (Sugartypes.Block
                                           ([],
                                            (Sugartypes.FnAppl (
                                               (Sugartypes.Var "k2"),
                                               [(Sugartypes.FnAppl (
                                                   (Sugartypes.TAppl (
                                                      (Sugartypes.FreezeVar
                                                         "drop"),
                                                      [((Sugartypes.Datatype.Type
                                                           (Sugartypes.Datatype.TypeVar
                                                              ("$none", None,
                                                               `Rigid))),
                                                        (Some Xml));
                                                        ((Sugartypes.Datatype.Type
                                                            (Sugartypes.Datatype.TypeVar
                                                               ("$none",
                                                                None, `Rigid))),
                                                         (Some {  }))
                                                        ]
                                                      )),
                                                   [(Sugartypes.Var "i1");
                                                     (Sugartypes.Var "xs")]
                                                   ))
                                                 ]
                                               ))))
                                        ]
                                      ))))));
                             fun_location = CommonTypes.Location.Unknown;
                             fun_signature = None;
                             fun_unsafe_signature = false; fun_frozen = true
                             })
                         ],
                       (Sugartypes.FreezeVar "_fun__g51")));
                   (Sugartypes.Block
                      ([(Sugartypes.Fun
                           { Sugartypes.fun_binder =
                             ("_fun__g52",
                              (Gen) {}~> ([CheckedFormBuilder], Gen));
                             fun_linearity =
                             CommonTypes.DeclaredLinearity.Unl;
                             fun_definition =
                             ([],
                              ([[(Sugartypes.Pattern.Variable ("gen", Gen))]],
                               (Sugartypes.Block
                                  ([(Sugartypes.Val (
                                       (Sugartypes.Pattern.Tuple
                                          [(Sugartypes.Pattern.Variable
                                              ("ms1", [CheckedFormBuilder]));
                                            (Sugartypes.Pattern.Variable
                                               ("gen", Gen))
                                            ]),
                                       ([],
                                        (Sugartypes.FnAppl (
                                           (Sugartypes.Var "fs1"),
                                           [(Sugartypes.Var "gen")]))),
                                       CommonTypes.Location.Unknown, None));
                                     (Sugartypes.Val (
                                        (Sugartypes.Pattern.Tuple
                                           [(Sugartypes.Pattern.Variable
                                               ("ms2", [CheckedFormBuilder]));
                                             (Sugartypes.Pattern.Variable
                                                ("gen", Gen))
                                             ]),
                                        ([],
                                         (Sugartypes.FnAppl (
                                            (Sugartypes.Var "fs2"),
                                            [(Sugartypes.Var "gen")]))),
                                        CommonTypes.Location.Unknown, None))
                                     ],
                                   (Sugartypes.TupleLit
                                      [(Sugartypes.InfixAppl (
                                          ([CheckedFormBuilder; { |wild }],
                                           (Operators.BinaryOp.Name "++")),
                                          (Sugartypes.Var "ms1"),
                                          (Sugartypes.Var "ms2")));
                                        (Sugartypes.Var "gen")])))));
                             fun_location = CommonTypes.Location.Unknown;
                             fun_signature = None;
                             fun_unsafe_signature = false; fun_frozen = true
                             })
                         ],
                       (Sugartypes.FreezeVar "_fun__g52")))
                   ])))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Page", []));
                    (Sugartypes.Datatype.TypeApplication ("Page", []))],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Page", [])))),
               (Some (Page, Page) -> Page)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("joinManyP", ([Page]) ~> Page);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("gs", [Page]))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "fold_left"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some Page));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some Page));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.TAppl ((Sugartypes.FreezeVar "joinP"),
                     [((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |wild|_ }))]
                     ));
                   (Sugartypes.Var "unitP"); (Sugartypes.Var "gs")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.List
                      (Sugartypes.Datatype.TypeApplication ("Page", [])))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Page", [])))),
               (Some ([Page]) ~> Page)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("bodyP", (Xml) -> Page);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("xml", Xml))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.TupleLit
                 [(Sugartypes.Constant (CommonTypes.Constant.Int 0));
                   (Sugartypes.Block
                      ([(Sugartypes.Fun
                           { Sugartypes.fun_binder =
                             ("_fun__g53", ([Xml]) {}~> Xml);
                             fun_linearity =
                             CommonTypes.DeclaredLinearity.Unl;
                             fun_definition =
                             ([],
                              ([[Sugartypes.Pattern.Nil]],
                               (Sugartypes.Block ([], (Sugartypes.Var "xml")))));
                             fun_location = CommonTypes.Location.Unknown;
                             fun_signature = None;
                             fun_unsafe_signature = false; fun_frozen = true
                             })
                         ],
                       (Sugartypes.FreezeVar "_fun__g53")));
                   (Sugartypes.Block
                      ([(Sugartypes.Fun
                           { Sugartypes.fun_binder =
                             ("_fun__g54",
                              (Gen) {}~> ([CheckedFormBuilder], Gen));
                             fun_linearity =
                             CommonTypes.DeclaredLinearity.Unl;
                             fun_definition =
                             ([],
                              ([[(Sugartypes.Pattern.Variable ("gen", Gen))]],
                               (Sugartypes.Block
                                  ([],
                                   (Sugartypes.TupleLit
                                      [(Sugartypes.ListLit ([],
                                          (Some CheckedFormBuilder)));
                                        (Sugartypes.Var "gen")])))));
                             fun_location = CommonTypes.Location.Unknown;
                             fun_signature = None;
                             fun_unsafe_signature = false; fun_frozen = true
                             })
                         ],
                       (Sugartypes.FreezeVar "_fun__g54")))
                   ])))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Xml", []))],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Page", [])))),
               (Some (Xml) -> Page)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("plugP", (XmlContext, Page) -> Page);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("context", XmlContext));
             (Sugartypes.Pattern.Tuple
                [(Sugartypes.Pattern.Variable ("i", Int));
                  (Sugartypes.Pattern.Variable ("k", MultiXmlContext));
                  (Sugartypes.Pattern.Variable
                     ("fs", (Gen) {}~> ([CheckedFormBuilder], Gen)))
                  ])
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.TupleLit
                 [(Sugartypes.Var "i");
                   (Sugartypes.Block
                      ([(Sugartypes.Fun
                           { Sugartypes.fun_binder =
                             ("_fun__g55", ([Xml]) {}~> Xml);
                             fun_linearity =
                             CommonTypes.DeclaredLinearity.Unl;
                             fun_definition =
                             ([],
                              ([[(Sugartypes.Pattern.Variable ("xs", [Xml]))]
                                 ],
                               (Sugartypes.Block
                                  ([],
                                   (Sugartypes.FnAppl (
                                      (Sugartypes.Var "context"),
                                      [(Sugartypes.FnAppl (
                                          (Sugartypes.Var "k"),
                                          [(Sugartypes.Var "xs")]))
                                        ]
                                      ))))));
                             fun_location = CommonTypes.Location.Unknown;
                             fun_signature = None;
                             fun_unsafe_signature = false; fun_frozen = true
                             })
                         ],
                       (Sugartypes.FreezeVar "_fun__g55")));
                   (Sugartypes.Var "fs")])))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("XmlContext", []));
                    (Sugartypes.Datatype.TypeApplication ("Page", []))],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Page", [])))),
               (Some (XmlContext, Page) -> Page)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("mkForm", ((Env) ~> Page, Xml, Attributes) ~> Xml);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("cont", (Env) ~> Page));
             (Sugartypes.Pattern.Variable ("contents", Xml));
             (Sugartypes.Pattern.Variable ("attributes", Attributes))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.Xml ("form",
                 [("enctype",
                   [(Sugartypes.Constant
                       (CommonTypes.Constant.String
                          "application/x-www-form-urlencoded"))
                     ]);
                   ("action",
                    [(Sugartypes.Constant (CommonTypes.Constant.String "#"))]);
                   ("method",
                    [(Sugartypes.Constant
                        (CommonTypes.Constant.String "POST"))
                      ])
                   ],
                 (Some (Sugartypes.Block ([], (Sugartypes.Var "attributes")))),
                 [(Sugartypes.TextNode "\n    ");
                   (Sugartypes.Xml ("input",
                      [("type",
                        [(Sugartypes.Constant
                            (CommonTypes.Constant.String "hidden"))
                          ]);
                        ("name",
                         [(Sugartypes.Constant
                             (CommonTypes.Constant.String "_k"))
                           ]);
                        ("value",
                         [(Sugartypes.Block
                             ([],
                              (Sugartypes.FnAppl (
                                 (Sugartypes.TAppl (
                                    (Sugartypes.FreezeVar "pickleCont"),
                                    [((Sugartypes.Datatype.Type
                                         (Sugartypes.Datatype.TypeVar
                                            ("$none", None, `Rigid))),
                                      (Some { |wild|_ }));
                                      ((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some { |_ }))
                                      ]
                                    )),
                                 [(Sugartypes.Block
                                     ([(Sugartypes.Fun
                                          { Sugartypes.fun_binder =
                                            ("_fun__g56", () ~> Page);
                                            fun_linearity =
                                            CommonTypes.DeclaredLinearity.Unl;
                                            fun_definition =
                                            ([],
                                             ([[]],
                                              (Sugartypes.Block
                                                 ([],
                                                  (Sugartypes.FnAppl (
                                                     (Sugartypes.Var "cont"),
                                                     [(Sugartypes.FnAppl (
                                                         (Sugartypes.TAppl (
                                                            (Sugartypes.FreezeVar
                                                               "environment"),
                                                            [((Sugartypes.Datatype.Type
                                                                 (Sugartypes.Datatype.TypeVar
                                                                    (
                                                                    "$none",
                                                                    None,
                                                                    `Rigid))),
                                                              (Some { |_ }))]
                                                            )),
                                                         []))
                                                       ]
                                                     ))))));
                                            fun_location =
                                            CommonTypes.Location.Unknown;
                                            fun_signature = None;
                                            fun_unsafe_signature = false;
                                            fun_frozen = true })
                                        ],
                                      (Sugartypes.FreezeVar "_fun__g56")))
                                   ]
                                 ))))
                           ])
                        ],
                      None, []));
                   (Sugartypes.TextNode "\n    ");
                   (Sugartypes.Block ([], (Sugartypes.Var "contents")));
                   (Sugartypes.TextNode "\n  ")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Function (
                      [(Sugartypes.Datatype.TypeApplication ("Env", []))],
                      ([("wild",
                         (Sugartypes.Datatype.Present
                            Sugartypes.Datatype.Unit))
                         ],
                       (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                      (Sugartypes.Datatype.TypeApplication ("Page", []))));
                    (Sugartypes.Datatype.TypeApplication ("Xml", []));
                    (Sugartypes.Datatype.TypeApplication ("Attributes", []))],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Xml", [])))),
               (Some ((Env) ~> Page, Xml, Attributes) ~> Xml)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder =
         ("validate",
          (CheckedCollector (a), Handler (a), MultiXmlContext, RecForms, Int, Attributes) -> (Env) {}~> Page);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a::Row],
           (Some ((CheckedCollector (a), Handler (a), MultiXmlContext, RecForms, Int, Attributes) -> (Env) {}~> Page,
                  [None; None]))),
          ([[(Sugartypes.Pattern.Variable ("c", CheckedCollector (_)));
              (Sugartypes.Pattern.Variable ("h", Handler (_)));
              (Sugartypes.Pattern.Variable ("k", MultiXmlContext));
              (Sugartypes.Pattern.Variable ("zs", RecForms));
              (Sugartypes.Pattern.Variable ("i", Int));
              (Sugartypes.Pattern.Variable ("attributes", Attributes))]
             ],
           (Sugartypes.Block
              ([(Sugartypes.Fun
                   { Sugartypes.fun_binder = ("_fun__g58", (Env) {}~> Page);
                     fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                     fun_definition =
                     ([],
                      ([[(Sugartypes.Pattern.Variable ("env", Env))]],
                       (Sugartypes.Block
                          ([(Sugartypes.Val (
                               (Sugartypes.Pattern.Tuple
                                  [(Sugartypes.Pattern.Variable ("xml", Xml));
                                    (Sugartypes.Pattern.Variable
                                       ("v", Maybe (_)))
                                    ]),
                               ([],
                                (Sugartypes.FnAppl ((Sugartypes.Var "c"),
                                   [(Sugartypes.Var "env")]))),
                               CommonTypes.Location.Unknown, None))
                             ],
                           (Sugartypes.Switch ((Sugartypes.Var "v"),
                              [((Sugartypes.Pattern.Variant ("Just",
                                   (Some (Sugartypes.Pattern.Variable
                                            ("v", _)))
                                   )),
                                (Sugartypes.Block
                                   ([],
                                    (Sugartypes.FnAppl ((Sugartypes.Var "h"),
                                       [(Sugartypes.Var "v")])))));
                                ((Sugartypes.Pattern.Variant ("Nothing", None
                                    )),
                                 (Sugartypes.Block
                                    ([],
                                     (Sugartypes.Block
                                        ([(Sugartypes.Fun
                                             { Sugartypes.fun_binder =
                                               ("z", (RecForms) ~> Xml);
                                               fun_linearity =
                                               CommonTypes.DeclaredLinearity.Unl;
                                               fun_definition =
                                               ([a::Row],
                                                ([[(Sugartypes.Pattern.Variable
                                                      ("zs", RecForms))
                                                    ]
                                                   ],
                                                 (Sugartypes.Block
                                                    ([],
                                                     (Sugartypes.FnAppl (
                                                        (Sugartypes.TAppl (
                                                           (Sugartypes.FreezeVar
                                                              "mkForm"),
                                                           [((Sugartypes.Datatype.Type
                                                                (Sugartypes.Datatype.TypeVar
                                                                   ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                             (Some {  }));
                                                             ((Sugartypes.Datatype.Type
                                                                 (Sugartypes.Datatype.TypeVar
                                                                    (
                                                                    "$none",
                                                                    None,
                                                                    `Rigid))),
                                                              (Some { |_ }))
                                                             ]
                                                           )),
                                                        [(Sugartypes.FnAppl (
                                                            (Sugartypes.TAppl (
                                                               (Sugartypes.FreezeVar
                                                                  "validate"),
                                                               [((Sugartypes.Datatype.Type
                                                                    (
                                                                    Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                 (Some _));
                                                                 ((Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                  (Some { |wild|_ }))
                                                                 ]
                                                               )),
                                                            [(Sugartypes.Var
                                                                "c");
                                                              (Sugartypes.Var
                                                                 "h");
                                                              (Sugartypes.Var
                                                                 "k");
                                                              (Sugartypes.Var
                                                                 "zs");
                                                              (Sugartypes.Var
                                                                 "i");
                                                              (Sugartypes.Var
                                                                 "attributes")
                                                              ]
                                                            ));
                                                          (Sugartypes.Var
                                                             "xml");
                                                          (Sugartypes.Var
                                                             "attributes")
                                                          ]
                                                        ))))));
                                               fun_location =
                                               CommonTypes.Location.Unknown;
                                               fun_signature = None;
                                               fun_unsafe_signature = false;
                                               fun_frozen = true });
                                           (Sugartypes.Val (
                                              (Sugartypes.Pattern.Variable
                                                 ("zs",
                                                  [mu a . ([a]) {}~> Xml])),
                                              ([],
                                               (Sugartypes.FnAppl (
                                                  (Sugartypes.TAppl (
                                                     (Sugartypes.FreezeVar
                                                        "substAt"),
                                                     [((Sugartypes.Datatype.Type
                                                          (Sugartypes.Datatype.TypeVar
                                                             ("$none", None,
                                                              `Rigid))),
                                                       (Some mu a . ([a]) {}~> Xml));
                                                       ((Sugartypes.Datatype.Type
                                                           (Sugartypes.Datatype.TypeVar
                                                              ("$none", None,
                                                               `Rigid))),
                                                        (Some {  }))
                                                       ]
                                                     )),
                                                  [(Sugartypes.Var "zs");
                                                    (Sugartypes.Var "i");
                                                    (Sugartypes.TAppl (
                                                       (Sugartypes.FreezeVar
                                                          "z"),
                                                       [((Sugartypes.Datatype.Type
                                                            (Sugartypes.Datatype.TypeVar
                                                               ("$none",
                                                                None, `Rigid))),
                                                         (Some {  }))]
                                                       ))
                                                    ]
                                                  ))),
                                              CommonTypes.Location.Unknown,
                                              None))
                                           ],
                                         (Sugartypes.FnAppl (
                                            (Sugartypes.TAppl (
                                               (Sugartypes.FreezeVar "bodyP"),
                                               [((Sugartypes.Datatype.Type
                                                    (Sugartypes.Datatype.TypeVar
                                                       ("$none", None, `Rigid))),
                                                 (Some { |wild }))]
                                               )),
                                            [(Sugartypes.FnAppl (
                                                (Sugartypes.Var "k"),
                                                [(Sugartypes.FnAppl (
                                                    (Sugartypes.TAppl (
                                                       (Sugartypes.FreezeVar
                                                          "map"),
                                                       [((Sugartypes.Datatype.Type
                                                            (Sugartypes.Datatype.TypeVar
                                                               ("$none",
                                                                None, `Rigid))),
                                                         (Some mu a . ([a]) {}~> Xml));
                                                         ((Sugartypes.Datatype.Type
                                                             (Sugartypes.Datatype.TypeVar
                                                                ("$none",
                                                                 None, `Rigid))),
                                                          (Some { |wild }));
                                                         ((Sugartypes.Datatype.Type
                                                             (Sugartypes.Datatype.TypeVar
                                                                ("$none",
                                                                 None, `Rigid))),
                                                          (Some Xml))
                                                         ]
                                                       )),
                                                    [(Sugartypes.Block
                                                        ([(Sugartypes.Fun
                                                             { Sugartypes.fun_binder =
                                                               ("_fun__g57",
                                                                (mu a . ([a]) {}~> Xml) {}~> Xml);
                                                               fun_linearity =
                                                               CommonTypes.DeclaredLinearity.Unl;
                                                               fun_definition =
                                                               ([],
                                                                ([[(Sugartypes.Pattern.Variable
                                                                    ("z",
                                                                    mu a . ([a]) {}~> Xml))
                                                                    ]
                                                                   ],
                                                                 (Sugartypes.Block
                                                                    (
                                                                    [],
                                                                    (
                                                                    Sugartypes.FnAppl (
                                                                    (Sugartypes.Var
                                                                    "z"),
                                                                    [(Sugartypes.Var
                                                                    "zs")]))))));
                                                               fun_location =
                                                               CommonTypes.Location.Unknown;
                                                               fun_signature =
                                                               None;
                                                               fun_unsafe_signature =
                                                               false;
                                                               fun_frozen =
                                                               true })
                                                           ],
                                                         (Sugartypes.FreezeVar
                                                            "_fun__g57")));
                                                      (Sugartypes.Var "zs")]
                                                    ))
                                                  ]
                                                ))
                                              ]
                                            )))))))
                                ],
                              (Some Page)))))));
                     fun_location = CommonTypes.Location.Unknown;
                     fun_signature = None; fun_unsafe_signature = false;
                     fun_frozen = false })
                 ],
               (Sugartypes.FreezeVar "_fun__g58")))));
         rec_location = CommonTypes.Location.Unknown;
         rec_signature =
         (Some ((Sugartypes.Datatype.Function (
                   [(Sugartypes.Datatype.TypeApplication ("CheckedCollector",
                       [(Sugartypes.Datatype.Type
                           (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                         ]
                       ));
                     (Sugartypes.Datatype.TypeApplication ("Handler",
                        [(Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                          ]
                        ));
                     (Sugartypes.Datatype.TypeApplication ("MultiXmlContext",
                        []));
                     (Sugartypes.Datatype.TypeApplication ("RecForms", []));
                     (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int);
                     (Sugartypes.Datatype.TypeApplication ("Attributes", []))
                     ],
                   ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                   (Sugartypes.Datatype.Function (
                      [(Sugartypes.Datatype.TypeApplication ("Env", []))],
                      ([("wild",
                         (Sugartypes.Datatype.Present
                            Sugartypes.Datatype.Unit))
                         ],
                       Sugartypes.Datatype.Closed),
                      (Sugartypes.Datatype.TypeApplication ("Page", []))))
                   )),
                (Some (CheckedCollector (a), Handler (a), MultiXmlContext, RecForms, Int, Attributes) -> (Env) {}~> Page)));
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 761, column 773, to line 17297, column 17617
         }
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("mkCheckedFormBuilder",
         (Xml, CheckedCollector (a), Handler (a), Attributes) -> (MultiXmlContext, RecForms, Int) ~> Xml);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("x", Xml));
             (Sugartypes.Pattern.Variable ("c", CheckedCollector (_)));
             (Sugartypes.Pattern.Variable ("h", Handler (_)));
             (Sugartypes.Pattern.Variable ("attributes", Attributes))]
            ],
          (Sugartypes.Block
             ([(Sugartypes.Fun
                  { Sugartypes.fun_binder =
                    ("_fun__g59", (MultiXmlContext, RecForms, Int) ~> Xml);
                    fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                    fun_definition =
                    ([],
                     ([[(Sugartypes.Pattern.Variable ("k", MultiXmlContext));
                         (Sugartypes.Pattern.Variable ("zs", RecForms));
                         (Sugartypes.Pattern.Variable ("i", Int))]
                        ],
                      (Sugartypes.Block
                         ([],
                          (Sugartypes.FnAppl (
                             (Sugartypes.TAppl (
                                (Sugartypes.FreezeVar "mkForm"),
                                [((Sugartypes.Datatype.Type
                                     (Sugartypes.Datatype.TypeVar
                                        ("$none", None, `Rigid))),
                                  (Some {  }));
                                  ((Sugartypes.Datatype.Type
                                      (Sugartypes.Datatype.TypeVar
                                         ("$none", None, `Rigid))),
                                   (Some { |_ }))
                                  ]
                                )),
                             [(Sugartypes.FnAppl (
                                 (Sugartypes.TAppl (
                                    (Sugartypes.FreezeVar "validate"),
                                    [((Sugartypes.Datatype.Type
                                         (Sugartypes.Datatype.TypeVar
                                            ("$none", None, `Rigid))),
                                      (Some _));
                                      ((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some { |wild|_ }))
                                      ]
                                    )),
                                 [(Sugartypes.Var "c"); (Sugartypes.Var "h");
                                   (Sugartypes.Var "k");
                                   (Sugartypes.Var "zs");
                                   (Sugartypes.Var "i");
                                   (Sugartypes.Var "attributes")]
                                 ));
                               (Sugartypes.Var "x");
                               (Sugartypes.Var "attributes")]
                             ))))));
                    fun_location = CommonTypes.Location.Unknown;
                    fun_signature = None; fun_unsafe_signature = false;
                    fun_frozen = false })
                ],
              (Sugartypes.FreezeVar "_fun__g59")))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Xml", []));
                    (Sugartypes.Datatype.TypeApplication ("CheckedCollector",
                       [(Sugartypes.Datatype.Type
                           (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                         ]
                       ));
                    (Sugartypes.Datatype.TypeApplication ("Handler",
                       [(Sugartypes.Datatype.Type
                           (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                         ]
                       ));
                    (Sugartypes.Datatype.TypeApplication ("Attributes", []))],
                  ([], (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.TypeApplication (
                         "MultiXmlContext", []));
                       (Sugartypes.Datatype.TypeApplication ("RecForms", []));
                       (Sugartypes.Datatype.Primitive
                          CommonTypes.Primitive.Int)
                       ],
                     ([("wild",
                        (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                        ],
                      (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                     (Sugartypes.Datatype.TypeApplication ("Xml", []))))
                  )),
               (Some (Xml, CheckedCollector (a), Handler (a), Attributes) -> (MultiXmlContext, RecForms, Int) ~> Xml)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("formP", (Formlet (a), Handler (a), Attributes) -> Page);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("f", Formlet (_)));
             (Sugartypes.Pattern.Variable ("h", Handler (_)));
             (Sugartypes.Pattern.Variable ("attributes", Attributes))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.TupleLit
                 [(Sugartypes.Constant (CommonTypes.Constant.Int 1));
                   (Sugartypes.Block
                      ([(Sugartypes.Fun
                           { Sugartypes.fun_binder =
                             ("_fun__g60", ([Xml]) {}~> Xml);
                             fun_linearity =
                             CommonTypes.DeclaredLinearity.Unl;
                             fun_definition =
                             ([],
                              ([[(Sugartypes.Pattern.List
                                    [(Sugartypes.Pattern.Variable ("x", Xml))
                                      ])
                                  ]
                                 ],
                               (Sugartypes.Block ([], (Sugartypes.Var "x")))));
                             fun_location = CommonTypes.Location.Unknown;
                             fun_signature = None;
                             fun_unsafe_signature = false; fun_frozen = true
                             })
                         ],
                       (Sugartypes.FreezeVar "_fun__g60")));
                   (Sugartypes.Block
                      ([(Sugartypes.Fun
                           { Sugartypes.fun_binder =
                             ("_fun__g61",
                              (Gen) {}~> ([(MultiXmlContext, RecForms, Int) {}~> Xml], Gen));
                             fun_linearity =
                             CommonTypes.DeclaredLinearity.Unl;
                             fun_definition =
                             ([],
                              ([[(Sugartypes.Pattern.Variable ("gen", Gen))]],
                               (Sugartypes.Block
                                  ([(Sugartypes.Val (
                                       (Sugartypes.Pattern.Tuple
                                          [(Sugartypes.Pattern.Tuple
                                              [(Sugartypes.Pattern.Variable
                                                  ("x", Xml));
                                                (Sugartypes.Pattern.Variable
                                                   ("c", CheckedCollector (_)))
                                                ]);
                                            (Sugartypes.Pattern.Variable
                                               ("gen", Gen))
                                            ]),
                                       ([],
                                        (Sugartypes.FnAppl (
                                           (Sugartypes.TAppl (
                                              (Sugartypes.FreezeVar
                                                 "runState"),
                                              [((Sugartypes.Datatype.Type
                                                   (Sugartypes.Datatype.TypeVar
                                                      ("$none", None, `Rigid))),
                                                (Some Gen));
                                                ((Sugartypes.Datatype.Type
                                                    (Sugartypes.Datatype.TypeVar
                                                       ("$none", None, `Rigid))),
                                                 (Some (Xml, CheckedCollector (_))))
                                                ]
                                              )),
                                           [(Sugartypes.Var "f");
                                             (Sugartypes.Var "gen")]
                                           ))),
                                       CommonTypes.Location.Unknown, None))
                                     ],
                                   (Sugartypes.TupleLit
                                      [(Sugartypes.ListLit (
                                          [(Sugartypes.FnAppl (
                                              (Sugartypes.TAppl (
                                                 (Sugartypes.FreezeVar
                                                    "mkCheckedFormBuilder"),
                                                 [((Sugartypes.Datatype.Type
                                                      (Sugartypes.Datatype.TypeVar
                                                         ("$none", None,
                                                          `Rigid))),
                                                   (Some _));
                                                   ((Sugartypes.Datatype.Type
                                                       (Sugartypes.Datatype.TypeVar
                                                          ("$none", None,
                                                           `Rigid))),
                                                    (Some { |wild }));
                                                   ((Sugartypes.Datatype.Type
                                                       (Sugartypes.Datatype.TypeVar
                                                          ("$none", None,
                                                           `Rigid))),
                                                    (Some {  }))
                                                   ]
                                                 )),
                                              [(Sugartypes.Var "x");
                                                (Sugartypes.Var "c");
                                                (Sugartypes.Var "h");
                                                (Sugartypes.Var "attributes")
                                                ]
                                              ))
                                            ],
                                          (Some (MultiXmlContext, RecForms, Int) {}~> Xml)
                                          ));
                                        (Sugartypes.Var "gen")])))));
                             fun_location = CommonTypes.Location.Unknown;
                             fun_signature = None;
                             fun_unsafe_signature = false; fun_frozen = true
                             })
                         ],
                       (Sugartypes.FreezeVar "_fun__g61")))
                   ])))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Formlet",
                      [(Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                        ]
                      ));
                    (Sugartypes.Datatype.TypeApplication ("Handler",
                       [(Sugartypes.Datatype.Type
                           (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                         ]
                       ));
                    (Sugartypes.Datatype.TypeApplication ("Attributes", []))],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Page", [])))),
               (Some (Formlet (a), Handler (a), Attributes) -> Page)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("renderPagePure", (Page) {}~> Xml);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([],
         ([[(Sugartypes.Pattern.Tuple
               [(Sugartypes.Pattern.Variable ("n", Int));
                 (Sugartypes.Pattern.Variable ("k", MultiXmlContext));
                 (Sugartypes.Pattern.Variable
                    ("fs", (Gen) {}~> ([CheckedFormBuilder], Gen)))
                 ])
             ]
            ],
          (Sugartypes.Block
             ([(Sugartypes.Val (
                  (Sugartypes.Pattern.Tuple
                     [(Sugartypes.Pattern.Variable
                         ("ms", [CheckedFormBuilder]));
                       Sugartypes.Pattern.Any]),
                  ([],
                   (Sugartypes.FnAppl ((Sugartypes.Var "fs"),
                      [(Sugartypes.Constant (CommonTypes.Constant.Int 0))]))),
                  CommonTypes.Location.Unknown, None));
                (Sugartypes.Val (
                   (Sugartypes.Pattern.Variable
                      ("zs", [mu a . ([a]) {}~> Xml])),
                   ([],
                    (Sugartypes.FnAppl (
                       (Sugartypes.TAppl ((Sugartypes.FreezeVar "mapi"),
                          [((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some (MultiXmlContext, RecForms, Int) {}~> Xml));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some {  }));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some mu a . ([a]) {}~> Xml))
                            ]
                          )),
                       [(Sugartypes.Block
                           ([(Sugartypes.Fun
                                { Sugartypes.fun_binder =
                                  ("_fun__g62",
                                   ((MultiXmlContext, RecForms, Int) {}~> Xml, Int) {}~> (RecForms) {}~> Xml);
                                  fun_linearity =
                                  CommonTypes.DeclaredLinearity.Unl;
                                  fun_definition =
                                  ([],
                                   ([[(Sugartypes.Pattern.Variable
                                         ("m",
                                          (MultiXmlContext, RecForms, Int) {}~> Xml));
                                       (Sugartypes.Pattern.Variable
                                          ("i", Int))
                                       ]
                                      ],
                                    (Sugartypes.Block
                                       ([(Sugartypes.Fun
                                            { Sugartypes.fun_binder =
                                              ("_fun__g63",
                                               (RecForms) {}~> Xml);
                                              fun_linearity =
                                              CommonTypes.DeclaredLinearity.Unl;
                                              fun_definition =
                                              ([],
                                               ([[(Sugartypes.Pattern.Variable
                                                     ("zs", RecForms))
                                                   ]
                                                  ],
                                                (Sugartypes.Block
                                                   ([],
                                                    (Sugartypes.FnAppl (
                                                       (Sugartypes.Var "m"),
                                                       [(Sugartypes.Var "k");
                                                         (Sugartypes.Var "zs");
                                                         (Sugartypes.Var "i")
                                                         ]
                                                       ))))));
                                              fun_location =
                                              CommonTypes.Location.Unknown;
                                              fun_signature = None;
                                              fun_unsafe_signature = false;
                                              fun_frozen = false })
                                          ],
                                        (Sugartypes.FreezeVar "_fun__g63")))));
                                  fun_location = CommonTypes.Location.Unknown;
                                  fun_signature = None;
                                  fun_unsafe_signature = false;
                                  fun_frozen = true })
                              ],
                            (Sugartypes.FreezeVar "_fun__g62")));
                         (Sugartypes.Var "ms")]
                       ))),
                   CommonTypes.Location.Unknown, None))
                ],
              (Sugartypes.FnAppl ((Sugartypes.Var "k"),
                 [(Sugartypes.FnAppl (
                     (Sugartypes.TAppl ((Sugartypes.FreezeVar "map"),
                        [((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some ([mu a . ([a]) {}~> Xml]) {}~> Xml));
                          ((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some { |wild }));
                          ((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some Xml))
                          ]
                        )),
                     [(Sugartypes.Block
                         ([(Sugartypes.Fun
                              { Sugartypes.fun_binder =
                                ("_fun__g64",
                                 (([mu a . ([a]) {}~> Xml]) {}~> Xml) {}~> Xml);
                                fun_linearity =
                                CommonTypes.DeclaredLinearity.Unl;
                                fun_definition =
                                ([],
                                 ([[(Sugartypes.Pattern.Variable
                                       ("z",
                                        ([mu a . ([a]) {}~> Xml]) {}~> Xml))
                                     ]
                                    ],
                                  (Sugartypes.Block
                                     ([],
                                      (Sugartypes.FnAppl (
                                         (Sugartypes.Var "z"),
                                         [(Sugartypes.Var "zs")]))))));
                                fun_location = CommonTypes.Location.Unknown;
                                fun_signature = None;
                                fun_unsafe_signature = false;
                                fun_frozen = true })
                            ],
                          (Sugartypes.FreezeVar "_fun__g64")));
                       (Sugartypes.Var "zs")]
                     ))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Page", []))],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   Sugartypes.Datatype.Closed),
                  (Sugartypes.Datatype.TypeApplication ("Xml", [])))),
               (Some (Page) {}~> Xml)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("renderPage", (Page) ~> Xml);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("p", Page))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TupleLit
                    [(Sugartypes.Upcast ((Sugartypes.Var "renderPagePure"),
                        ((Sugartypes.Datatype.Function (
                            [(Sugartypes.Datatype.TypeApplication ("Page", 
                                []))
                              ],
                            ([("wild",
                               (Sugartypes.Datatype.Present
                                  Sugartypes.Datatype.Unit))
                               ],
                             (Sugartypes.Datatype.Open ("$", None, `Flexible))),
                            (Sugartypes.Datatype.TypeApplication ("Xml", []))
                            )),
                         (Some (Page) ~> Xml)),
                        ((Sugartypes.Datatype.Function (
                            [(Sugartypes.Datatype.TypeApplication ("Page", 
                                []))
                              ],
                            ([("wild",
                               (Sugartypes.Datatype.Present
                                  Sugartypes.Datatype.Unit))
                               ],
                             Sugartypes.Datatype.Closed),
                            (Sugartypes.Datatype.TypeApplication ("Xml", []))
                            )),
                         (Some (Page) {}~> Xml))
                        ))
                      ]),
                 [(Sugartypes.Var "p")]))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Page", []))],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Xml", [])))),
               (Some (Page) ~> Xml)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("mkInput",
         ((String) {}~> a, (String, b) ~c~> d::Any) -> State (Int,(a, ([(String, b)]) ~c~> (d::Any, Maybe (b)))));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a; a::Row; a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("mkXml", (String) {}~> _));
             (Sugartypes.Pattern.Variable
                ("mkFilledXml", (String, _) ~> _::Any))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.InfixAppl (
                 ([Int; String; (_, ([(String, b)]) ~> (_::Any, Maybe (b)));
                    { |_ }],
                  (Operators.BinaryOp.Name ">>=")),
                 (Sugartypes.Var "nextName"),
                 (Sugartypes.Block
                    ([(Sugartypes.Fun
                         { Sugartypes.fun_binder =
                           ("_fun__g66",
                            (String) {}~> State (Int,(_, ([(String, b)]) ~> (_::Any, Maybe (b)))));
                           fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                           fun_definition =
                           ([],
                            ([[(Sugartypes.Pattern.Variable ("name", String))
                                ]
                               ],
                             (Sugartypes.Block
                                ([],
                                 (Sugartypes.TupleLit
                                    [(Sugartypes.FnAppl (
                                        (Sugartypes.TAppl (
                                           (Sugartypes.FreezeVar "return"),
                                           [((Sugartypes.Datatype.Type
                                                (Sugartypes.Datatype.TypeVar
                                                   ("$none", None, `Rigid))),
                                             (Some (_, ([(String, b)]) ~> (_::Any, Maybe (b)))));
                                             ((Sugartypes.Datatype.Type
                                                 (Sugartypes.Datatype.TypeVar
                                                    ("$none", None, `Rigid))),
                                              (Some { |wild }));
                                             ((Sugartypes.Datatype.Type
                                                 (Sugartypes.Datatype.TypeVar
                                                    ("$none", None, `Rigid))),
                                              (Some Int))
                                             ]
                                           )),
                                        [(Sugartypes.TupleLit
                                            [(Sugartypes.FnAppl (
                                                (Sugartypes.Var "mkXml"),
                                                [(Sugartypes.Var "name")]));
                                              (Sugartypes.Block
                                                 ([(Sugartypes.Fun
                                                      { Sugartypes.fun_binder =
                                                        ("_fun__g65",
                                                         ([(String, a)]) ~> (_::Any, Maybe (a)));
                                                        fun_linearity =
                                                        CommonTypes.DeclaredLinearity.Unl;
                                                        fun_definition =
                                                        ([],
                                                         ([[(Sugartypes.Pattern.Variable
                                                               ("env",
                                                                [(String, _)]))
                                                             ]
                                                            ],
                                                          (Sugartypes.Block
                                                             ([(Sugartypes.Val (
                                                                  (Sugartypes.Pattern.Variable
                                                                    ("v", _)),
                                                                  ([],
                                                                   (Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "assoc"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some _));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |_ }))
                                                                    ])),
                                                                    [(Sugartypes.Var
                                                                    "name");
                                                                    (Sugartypes.Var
                                                                    "env")]))),
                                                                  CommonTypes.Location.Unknown,
                                                                  None))
                                                                ],
                                                              (Sugartypes.TupleLit
                                                                 [(Sugartypes.FnAppl (
                                                                    (Sugartypes.Var
                                                                    "mkFilledXml"),
                                                                    [(Sugartypes.Var
                                                                    "name");
                                                                    (Sugartypes.Var
                                                                    "v")]));
                                                                   (Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "pureE"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some _));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild|_ }))
                                                                    ])),
                                                                    [(Sugartypes.Var
                                                                    "v")]))
                                                                   ])))));
                                                        fun_location =
                                                        CommonTypes.Location.Unknown;
                                                        fun_signature = None;
                                                        fun_unsafe_signature =
                                                        false;
                                                        fun_frozen = true })
                                                    ],
                                                  (Sugartypes.FreezeVar
                                                     "_fun__g65")))
                                              ])
                                          ]
                                        ))
                                      ])))));
                           fun_location = CommonTypes.Location.Unknown;
                           fun_signature = None;
                           fun_unsafe_signature = false; fun_frozen = true })
                       ],
                     (Sugartypes.FreezeVar "_fun__g66")))
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Val (
      (Sugartypes.Pattern.Variable ("input", Formlet (String))),
      ([],
       (Sugartypes.Block
          ([(Sugartypes.Fun
               { Sugartypes.fun_binder =
                 ("_fun__g69",
                  (Int) {}~> ((Xml, ([(String, String)]) {}~> (Xml, Maybe (String))), Int));
                 fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                 fun_definition =
                 ([],
                  ([[(Sugartypes.Pattern.Variable ("gen", Int))]],
                   (Sugartypes.Block
                      ([],
                       (Sugartypes.FnAppl (
                          (Sugartypes.FnAppl (
                             (Sugartypes.TAppl (
                                (Sugartypes.FreezeVar "mkInput"),
                                [((Sugartypes.Datatype.Type
                                     (Sugartypes.Datatype.TypeVar
                                        ("$none", None, `Rigid))),
                                  (Some Xml));
                                  ((Sugartypes.Datatype.Type
                                      (Sugartypes.Datatype.TypeVar
                                         ("$none", None, `Rigid))),
                                   (Some String));
                                  ((Sugartypes.Datatype.Type
                                      (Sugartypes.Datatype.TypeVar
                                         ("$none", None, `Rigid))),
                                   (Some {  }));
                                  ((Sugartypes.Datatype.Type
                                      (Sugartypes.Datatype.TypeVar
                                         ("$none", None, `Rigid))),
                                   (Some Xml));
                                  ((Sugartypes.Datatype.Type
                                      (Sugartypes.Datatype.TypeVar
                                         ("$none", None, `Rigid))),
                                   (Some { |wild }))
                                  ]
                                )),
                             [(Sugartypes.Block
                                 ([(Sugartypes.Fun
                                      { Sugartypes.fun_binder =
                                        ("_fun__g67", (String) {}~> Xml);
                                        fun_linearity =
                                        CommonTypes.DeclaredLinearity.Unl;
                                        fun_definition =
                                        ([],
                                         ([[(Sugartypes.Pattern.Variable
                                               ("name", String))
                                             ]
                                            ],
                                          (Sugartypes.Block
                                             ([],
                                              (Sugartypes.Xml ("input",
                                                 [("name",
                                                   [(Sugartypes.Block
                                                       ([],
                                                        (Sugartypes.Var
                                                           "name")))
                                                     ])
                                                   ],
                                                 None, []))))));
                                        fun_location =
                                        CommonTypes.Location.Unknown;
                                        fun_signature = None;
                                        fun_unsafe_signature = false;
                                        fun_frozen = true })
                                    ],
                                  (Sugartypes.FreezeVar "_fun__g67")));
                               (Sugartypes.Block
                                  ([(Sugartypes.Fun
                                       { Sugartypes.fun_binder =
                                         ("_fun__g68",
                                          (String, String) {}~> Xml);
                                         fun_linearity =
                                         CommonTypes.DeclaredLinearity.Unl;
                                         fun_definition =
                                         ([],
                                          ([[(Sugartypes.Pattern.Variable
                                                ("name", String));
                                              (Sugartypes.Pattern.Variable
                                                 ("v", String))
                                              ]
                                             ],
                                           (Sugartypes.Block
                                              ([],
                                               (Sugartypes.Xml ("input",
                                                  [("name",
                                                    [(Sugartypes.Block
                                                        ([],
                                                         (Sugartypes.Var
                                                            "name")))
                                                      ]);
                                                    ("value",
                                                     [(Sugartypes.Block
                                                         ([],
                                                          (Sugartypes.Var "v")))
                                                       ])
                                                    ],
                                                  None, []))))));
                                         fun_location =
                                         CommonTypes.Location.Unknown;
                                         fun_signature = None;
                                         fun_unsafe_signature = false;
                                         fun_frozen = true })
                                     ],
                                   (Sugartypes.FreezeVar "_fun__g68")))
                               ]
                             )),
                          [(Sugartypes.Var "gen")]))))));
                 fun_location = CommonTypes.Location.Unknown;
                 fun_signature = None; fun_unsafe_signature = false;
                 fun_frozen = true })
             ],
           (Sugartypes.FreezeVar "_fun__g69")))),
      CommonTypes.Location.Unknown,
      (Some ((Sugartypes.Datatype.TypeApplication ("Formlet",
                [(Sugartypes.Datatype.Type
                    (Sugartypes.Datatype.Primitive
                       CommonTypes.Primitive.String))
                  ]
                )),
             (Some Formlet (String))))
      ));
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("inputA", (Attributes) ~> Formlet (String));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("attributes", Attributes))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "mkInput"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some Xml));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some String));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some {  }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some Xml));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |wild|_ }))
                      ]
                    )),
                 [(Sugartypes.Block
                     ([(Sugartypes.Fun
                          { Sugartypes.fun_binder =
                            ("_fun__g70", (String) {}~> Xml);
                            fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                            fun_definition =
                            ([],
                             ([[(Sugartypes.Pattern.Variable ("name", String))
                                 ]
                                ],
                              (Sugartypes.Block
                                 ([],
                                  (Sugartypes.Xml ("input",
                                     [("name",
                                       [(Sugartypes.Block
                                           ([], (Sugartypes.Var "name")))
                                         ])
                                       ],
                                     (Some (Sugartypes.Block
                                              ([],
                                               (Sugartypes.FnAppl (
                                                  (Sugartypes.TAppl (
                                                     (Sugartypes.FreezeVar
                                                        "removeAssoc"),
                                                     [((Sugartypes.Datatype.Type
                                                          (Sugartypes.Datatype.TypeVar
                                                             ("$none", None,
                                                              `Rigid))),
                                                       (Some String));
                                                       ((Sugartypes.Datatype.Type
                                                           (Sugartypes.Datatype.TypeVar
                                                              ("$none", None,
                                                               `Rigid))),
                                                        (Some String));
                                                       ((Sugartypes.Datatype.Type
                                                           (Sugartypes.Datatype.TypeVar
                                                              ("$none", None,
                                                               `Rigid))),
                                                        (Some {  }))
                                                       ]
                                                     )),
                                                  [(Sugartypes.Constant
                                                      (CommonTypes.Constant.String
                                                         "name"));
                                                    (Sugartypes.Var
                                                       "attributes")
                                                    ]
                                                  ))))),
                                     []))))));
                            fun_location = CommonTypes.Location.Unknown;
                            fun_signature = None;
                            fun_unsafe_signature = false; fun_frozen = true })
                        ],
                      (Sugartypes.FreezeVar "_fun__g70")));
                   (Sugartypes.Block
                      ([(Sugartypes.Fun
                           { Sugartypes.fun_binder =
                             ("_fun__g71", (String, String) {}~> Xml);
                             fun_linearity =
                             CommonTypes.DeclaredLinearity.Unl;
                             fun_definition =
                             ([],
                              ([[(Sugartypes.Pattern.Variable
                                    ("name", String));
                                  (Sugartypes.Pattern.Variable ("v", String))
                                  ]
                                 ],
                               (Sugartypes.Block
                                  ([],
                                   (Sugartypes.Xml ("input",
                                      [("name",
                                        [(Sugartypes.Block
                                            ([], (Sugartypes.Var "name")))
                                          ]);
                                        ("value",
                                         [(Sugartypes.Block
                                             ([], (Sugartypes.Var "v")))
                                           ])
                                        ],
                                      (Some (Sugartypes.Block
                                               ([],
                                                (Sugartypes.FnAppl (
                                                   (Sugartypes.TAppl (
                                                      (Sugartypes.FreezeVar
                                                         "removeAssoc"),
                                                      [((Sugartypes.Datatype.Type
                                                           (Sugartypes.Datatype.TypeVar
                                                              ("$none", None,
                                                               `Rigid))),
                                                        (Some String));
                                                        ((Sugartypes.Datatype.Type
                                                            (Sugartypes.Datatype.TypeVar
                                                               ("$none",
                                                                None, `Rigid))),
                                                         (Some String));
                                                        ((Sugartypes.Datatype.Type
                                                            (Sugartypes.Datatype.TypeVar
                                                               ("$none",
                                                                None, `Rigid))),
                                                         (Some {  }))
                                                        ]
                                                      )),
                                                   [(Sugartypes.Constant
                                                       (CommonTypes.Constant.String
                                                          "name"));
                                                     (Sugartypes.FnAppl (
                                                        (Sugartypes.TAppl (
                                                           (Sugartypes.FreezeVar
                                                              "removeAssoc"),
                                                           [((Sugartypes.Datatype.Type
                                                                (Sugartypes.Datatype.TypeVar
                                                                   ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                             (Some String));
                                                             ((Sugartypes.Datatype.Type
                                                                 (Sugartypes.Datatype.TypeVar
                                                                    (
                                                                    "$none",
                                                                    None,
                                                                    `Rigid))),
                                                              (Some String));
                                                             ((Sugartypes.Datatype.Type
                                                                 (Sugartypes.Datatype.TypeVar
                                                                    (
                                                                    "$none",
                                                                    None,
                                                                    `Rigid))),
                                                              (Some {  }))
                                                             ]
                                                           )),
                                                        [(Sugartypes.Constant
                                                            (CommonTypes.Constant.String
                                                               "value"));
                                                          (Sugartypes.Var
                                                             "attributes")
                                                          ]
                                                        ))
                                                     ]
                                                   ))))),
                                      []))))));
                             fun_location = CommonTypes.Location.Unknown;
                             fun_signature = None;
                             fun_unsafe_signature = false; fun_frozen = true
                             })
                         ],
                       (Sugartypes.FreezeVar "_fun__g71")))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Attributes", []))],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.Primitive
                            CommonTypes.Primitive.String))
                       ]
                     ))
                  )),
               (Some (Attributes) ~> Formlet (String))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("inputPasswordA", (Attributes) ~> Formlet (String));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("attributes", Attributes))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "inputA"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |_ }))]
                    )),
                 [(Sugartypes.InfixAppl (
                     ([(String, String); { |wild|_ }],
                      Operators.BinaryOp.Cons),
                     (Sugartypes.TupleLit
                        [(Sugartypes.Constant
                            (CommonTypes.Constant.String "type"));
                          (Sugartypes.Constant
                             (CommonTypes.Constant.String "password"))
                          ]),
                     (Sugartypes.FnAppl (
                        (Sugartypes.TAppl (
                           (Sugartypes.FreezeVar "removeAssoc"),
                           [((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some String));
                             ((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some String));
                             ((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some { |_ }))
                             ]
                           )),
                        [(Sugartypes.Constant
                            (CommonTypes.Constant.String "type"));
                          (Sugartypes.Var "attributes")]
                        ))
                     ))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Attributes", []))],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.Primitive
                            CommonTypes.Primitive.String))
                       ]
                     ))
                  )),
               (Some (Attributes) ~> Formlet (String))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("inputValueA", (String, Attributes) ~> Formlet (String));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("v", String));
             (Sugartypes.Pattern.Variable ("attributes", Attributes))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "inputA"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |_ }))]
                    )),
                 [(Sugartypes.InfixAppl (
                     ([(String, String); { |wild|_ }],
                      Operators.BinaryOp.Cons),
                     (Sugartypes.TupleLit
                        [(Sugartypes.Constant
                            (CommonTypes.Constant.String "value"));
                          (Sugartypes.Var "v")]),
                     (Sugartypes.FnAppl (
                        (Sugartypes.TAppl (
                           (Sugartypes.FreezeVar "removeAssoc"),
                           [((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some String));
                             ((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some String));
                             ((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some { |_ }))
                             ]
                           )),
                        [(Sugartypes.Constant
                            (CommonTypes.Constant.String "value"));
                          (Sugartypes.Var "attributes")]
                        ))
                     ))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.String);
                    (Sugartypes.Datatype.TypeApplication ("Attributes", []))],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.Primitive
                            CommonTypes.Primitive.String))
                       ]
                     ))
                  )),
               (Some (String, Attributes) ~> Formlet (String))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("inputFileA", (Attributes) ~> Formlet (String));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("attributes", Attributes))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "inputA"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |_ }))]
                    )),
                 [(Sugartypes.InfixAppl (
                     ([(String, String); { |wild|_ }],
                      Operators.BinaryOp.Cons),
                     (Sugartypes.TupleLit
                        [(Sugartypes.Constant
                            (CommonTypes.Constant.String "type"));
                          (Sugartypes.Constant
                             (CommonTypes.Constant.String "file"))
                          ]),
                     (Sugartypes.FnAppl (
                        (Sugartypes.TAppl (
                           (Sugartypes.FreezeVar "removeAssoc"),
                           [((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some String));
                             ((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some String));
                             ((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some { |_ }))
                             ]
                           )),
                        [(Sugartypes.Constant
                            (CommonTypes.Constant.String "type"));
                          (Sugartypes.Var "attributes")]
                        ))
                     ))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Attributes", []))],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.Primitive
                            CommonTypes.Primitive.String))
                       ]
                     ))
                  )),
               (Some (Attributes) ~> Formlet (String))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Val (
      (Sugartypes.Pattern.Variable ("inputPassword", Formlet (String))),
      ([],
       (Sugartypes.Block
          ([(Sugartypes.Fun
               { Sugartypes.fun_binder =
                 ("_fun__g72",
                  (Gen) {}~> ((Xml, CheckedCollector (String)), Gen));
                 fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                 fun_definition =
                 ([],
                  ([[(Sugartypes.Pattern.Variable ("gen", Gen))]],
                   (Sugartypes.Block
                      ([],
                       (Sugartypes.FnAppl (
                          (Sugartypes.FnAppl (
                             (Sugartypes.TAppl (
                                (Sugartypes.FreezeVar "inputPasswordA"),
                                [((Sugartypes.Datatype.Type
                                     (Sugartypes.Datatype.TypeVar
                                        ("$none", None, `Rigid))),
                                  (Some {  }))]
                                )),
                             [(Sugartypes.ListLit ([],
                                 (Some (String, String))))
                               ]
                             )),
                          [(Sugartypes.Var "gen")]))))));
                 fun_location = CommonTypes.Location.Unknown;
                 fun_signature = None; fun_unsafe_signature = false;
                 fun_frozen = true })
             ],
           (Sugartypes.FreezeVar "_fun__g72")))),
      CommonTypes.Location.Unknown,
      (Some ((Sugartypes.Datatype.TypeApplication ("Formlet",
                [(Sugartypes.Datatype.Type
                    (Sugartypes.Datatype.Primitive
                       CommonTypes.Primitive.String))
                  ]
                )),
             (Some Formlet (String))))
      ));
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("inputValue", (String) ~> Formlet (String));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("v", String))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "inputValueA"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |_ }))]
                    )),
                 [(Sugartypes.Var "v");
                   (Sugartypes.ListLit ([], (Some (String, String))))]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.String)
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.Primitive
                            CommonTypes.Primitive.String))
                       ]
                     ))
                  )),
               (Some (String) ~> Formlet (String))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Val (
      (Sugartypes.Pattern.Variable ("inputFile", Formlet (String))),
      ([],
       (Sugartypes.Block
          ([(Sugartypes.Fun
               { Sugartypes.fun_binder =
                 ("_fun__g73",
                  (Gen) {}~> ((Xml, CheckedCollector (String)), Gen));
                 fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                 fun_definition =
                 ([],
                  ([[(Sugartypes.Pattern.Variable ("gen", Gen))]],
                   (Sugartypes.Block
                      ([],
                       (Sugartypes.FnAppl (
                          (Sugartypes.FnAppl (
                             (Sugartypes.TAppl (
                                (Sugartypes.FreezeVar "inputFileA"),
                                [((Sugartypes.Datatype.Type
                                     (Sugartypes.Datatype.TypeVar
                                        ("$none", None, `Rigid))),
                                  (Some {  }))]
                                )),
                             [(Sugartypes.ListLit ([],
                                 (Some (String, String))))
                               ]
                             )),
                          [(Sugartypes.Var "gen")]))))));
                 fun_location = CommonTypes.Location.Unknown;
                 fun_signature = None; fun_unsafe_signature = false;
                 fun_frozen = true })
             ],
           (Sugartypes.FreezeVar "_fun__g73")))),
      CommonTypes.Location.Unknown,
      (Some ((Sugartypes.Datatype.TypeApplication ("Formlet",
                [(Sugartypes.Datatype.Type
                    (Sugartypes.Datatype.Primitive
                       CommonTypes.Primitive.String))
                  ]
                )),
             (Some Formlet (String))))
      ));
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("textarea", (String) ~> Formlet (String));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("value", String))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "mkInput"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some Xml));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some String));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some {  }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some Xml));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |wild|_ }))
                      ]
                    )),
                 [(Sugartypes.Block
                     ([(Sugartypes.Fun
                          { Sugartypes.fun_binder =
                            ("_fun__g74", (String) {}~> Xml);
                            fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                            fun_definition =
                            ([],
                             ([[(Sugartypes.Pattern.Variable ("name", String))
                                 ]
                                ],
                              (Sugartypes.Block
                                 ([],
                                  (Sugartypes.Xml ("textarea",
                                     [("name",
                                       [(Sugartypes.Block
                                           ([], (Sugartypes.Var "name")))
                                         ])
                                       ],
                                     None,
                                     [(Sugartypes.Block
                                         ([],
                                          (Sugartypes.FnAppl (
                                             (Sugartypes.TAppl (
                                                (Sugartypes.FreezeVar
                                                   "stringToXml"),
                                                [((Sugartypes.Datatype.Type
                                                     (Sugartypes.Datatype.TypeVar
                                                        ("$none", None,
                                                         `Rigid))),
                                                  (Some { |wild }))]
                                                )),
                                             [(Sugartypes.Var "value")]))))
                                       ]
                                     ))))));
                            fun_location = CommonTypes.Location.Unknown;
                            fun_signature = None;
                            fun_unsafe_signature = false; fun_frozen = true })
                        ],
                      (Sugartypes.FreezeVar "_fun__g74")));
                   (Sugartypes.Block
                      ([(Sugartypes.Fun
                           { Sugartypes.fun_binder =
                             ("_fun__g75", (String, String) {}~> Xml);
                             fun_linearity =
                             CommonTypes.DeclaredLinearity.Unl;
                             fun_definition =
                             ([],
                              ([[(Sugartypes.Pattern.Variable
                                    ("name", String));
                                  (Sugartypes.Pattern.Variable
                                     ("value", String))
                                  ]
                                 ],
                               (Sugartypes.Block
                                  ([],
                                   (Sugartypes.Xml ("textarea",
                                      [("name",
                                        [(Sugartypes.Block
                                            ([], (Sugartypes.Var "name")))
                                          ])
                                        ],
                                      None,
                                      [(Sugartypes.Block
                                          ([],
                                           (Sugartypes.FnAppl (
                                              (Sugartypes.TAppl (
                                                 (Sugartypes.FreezeVar
                                                    "stringToXml"),
                                                 [((Sugartypes.Datatype.Type
                                                      (Sugartypes.Datatype.TypeVar
                                                         ("$none", None,
                                                          `Rigid))),
                                                   (Some { |wild }))]
                                                 )),
                                              [(Sugartypes.Var "value")]))))
                                        ]
                                      ))))));
                             fun_location = CommonTypes.Location.Unknown;
                             fun_signature = None;
                             fun_unsafe_signature = false; fun_frozen = true
                             })
                         ],
                       (Sugartypes.FreezeVar "_fun__g75")))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.String)
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.Primitive
                            CommonTypes.Primitive.String))
                       ]
                     ))
                  )),
               (Some (String) ~> Formlet (String))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("submit", (String) ~> Xml);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("text", String))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.Xml ("button",
                 [("type",
                   [(Sugartypes.Constant
                       (CommonTypes.Constant.String "submit"))
                     ])
                   ],
                 None,
                 [(Sugartypes.Block
                     ([],
                      (Sugartypes.FnAppl (
                         (Sugartypes.TAppl (
                            (Sugartypes.FreezeVar "stringToXml"),
                            [((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some { |wild|_ }))]
                            )),
                         [(Sugartypes.Var "text")]))))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.String)
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Xml", [])))),
               (Some (String) ~> Xml)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("button", (String, [|Button|Reset|Submit|]) ~> Formlet (Bool));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("text", String));
             (Sugartypes.Pattern.Variable
                ("behaviour", [|Button|Reset|Submit|]))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.InfixAppl (
                 ([Int; String;
                    (Xml, ([(String, String)]) {}~> (Xml, Maybe (Bool)));
                    { |wild|_ }],
                  (Operators.BinaryOp.Name ">>=")),
                 (Sugartypes.Var "nextName"),
                 (Sugartypes.Block
                    ([(Sugartypes.Fun
                         { Sugartypes.fun_binder =
                           ("_fun__g77",
                            (String) {}~> State (Int,(Xml, ([(String, String)]) {}~> (Xml, Maybe (Bool)))));
                           fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                           fun_definition =
                           ([],
                            ([[(Sugartypes.Pattern.Variable ("name", String))
                                ]
                               ],
                             (Sugartypes.Block
                                ([(Sugartypes.Val (
                                     (Sugartypes.Pattern.Variable
                                        ("behaviour", String)),
                                     ([],
                                      (Sugartypes.Switch (
                                         (Sugartypes.Var "behaviour"),
                                         [((Sugartypes.Pattern.Variant (
                                              "Submit", None)),
                                           (Sugartypes.Block
                                              ([],
                                               (Sugartypes.Constant
                                                  (CommonTypes.Constant.String
                                                     "submit")))));
                                           ((Sugartypes.Pattern.Variant (
                                               "Reset", None)),
                                            (Sugartypes.Block
                                               ([],
                                                (Sugartypes.Constant
                                                   (CommonTypes.Constant.String
                                                      "reset")))));
                                           ((Sugartypes.Pattern.Variant (
                                               "Button", None)),
                                            (Sugartypes.Block
                                               ([],
                                                (Sugartypes.Constant
                                                   (CommonTypes.Constant.String
                                                      "button")))))
                                           ],
                                         (Some String)))),
                                     CommonTypes.Location.Unknown, None));
                                   (Sugartypes.Val (
                                      (Sugartypes.Pattern.Variable
                                         ("xml", Xml)),
                                      ([],
                                       (Sugartypes.Xml ("button",
                                          [("name",
                                            [(Sugartypes.Block
                                                ([], (Sugartypes.Var "name")))
                                              ]);
                                            ("value",
                                             [(Sugartypes.Constant
                                                 (CommonTypes.Constant.String
                                                    "here"))
                                               ]);
                                            ("type",
                                             [(Sugartypes.Block
                                                 ([],
                                                  (Sugartypes.Var "behaviour")))
                                               ])
                                            ],
                                          None,
                                          [(Sugartypes.Block
                                              ([],
                                               (Sugartypes.FnAppl (
                                                  (Sugartypes.TAppl (
                                                     (Sugartypes.FreezeVar
                                                        "stringToXml"),
                                                     [((Sugartypes.Datatype.Type
                                                          (Sugartypes.Datatype.TypeVar
                                                             ("$none", None,
                                                              `Rigid))),
                                                       (Some { |wild }))]
                                                     )),
                                                  [(Sugartypes.Var "text")]))))
                                            ]
                                          ))),
                                      CommonTypes.Location.Unknown, None))
                                   ],
                                 (Sugartypes.FnAppl (
                                    (Sugartypes.TAppl (
                                       (Sugartypes.FreezeVar "return"),
                                       [((Sugartypes.Datatype.Type
                                            (Sugartypes.Datatype.TypeVar
                                               ("$none", None, `Rigid))),
                                         (Some (Xml, ([(String, String)]) {}~> (Xml, Maybe (Bool)))));
                                         ((Sugartypes.Datatype.Type
                                             (Sugartypes.Datatype.TypeVar
                                                ("$none", None, `Rigid))),
                                          (Some { |wild }));
                                         ((Sugartypes.Datatype.Type
                                             (Sugartypes.Datatype.TypeVar
                                                ("$none", None, `Rigid))),
                                          (Some Int))
                                         ]
                                       )),
                                    [(Sugartypes.TupleLit
                                        [(Sugartypes.Var "xml");
                                          (Sugartypes.Block
                                             ([(Sugartypes.Fun
                                                  { Sugartypes.fun_binder =
                                                    ("_fun__g76",
                                                     ([(String, String)]) {}~> (Xml, Maybe (Bool)));
                                                    fun_linearity =
                                                    CommonTypes.DeclaredLinearity.Unl;
                                                    fun_definition =
                                                    ([],
                                                     ([[(Sugartypes.Pattern.Variable
                                                           ("env",
                                                            [(String, String)]))
                                                         ]
                                                        ],
                                                      (Sugartypes.Block
                                                         ([],
                                                          (Sugartypes.TupleLit
                                                             [(Sugartypes.Var
                                                                 "xml");
                                                               (Sugartypes.FnAppl (
                                                                  (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "pureE"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some Bool));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild }))
                                                                    ])),
                                                                  [(Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "memassoc"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some String));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some String));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some {  }))
                                                                    ])),
                                                                    [(Sugartypes.Var
                                                                    "name");
                                                                    (Sugartypes.Var
                                                                    "env")]))
                                                                    ]
                                                                  ))
                                                               ])))));
                                                    fun_location =
                                                    CommonTypes.Location.Unknown;
                                                    fun_signature = None;
                                                    fun_unsafe_signature =
                                                    false; fun_frozen = true
                                                    })
                                                ],
                                              (Sugartypes.FreezeVar
                                                 "_fun__g76")))
                                          ])
                                      ]
                                    ))))));
                           fun_location = CommonTypes.Location.Unknown;
                           fun_signature = None;
                           fun_unsafe_signature = false; fun_frozen = true })
                       ],
                     (Sugartypes.FreezeVar "_fun__g77")))
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.String);
                    (Sugartypes.Datatype.Variant
                       ([("Submit",
                          (Sugartypes.Datatype.Present
                             Sugartypes.Datatype.Unit));
                          ("Reset",
                           (Sugartypes.Datatype.Present
                              Sugartypes.Datatype.Unit));
                          ("Button",
                           (Sugartypes.Datatype.Present
                              Sugartypes.Datatype.Unit))
                          ],
                        Sugartypes.Datatype.Closed))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.Primitive
                            CommonTypes.Primitive.Bool))
                       ]
                     ))
                  )),
               (Some (String, [|Button|Reset|Submit|]) ~> Formlet (Bool))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("submitButton", (String) ~> Formlet (Bool));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("text", String))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "button"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |_ }))]
                    )),
                 [(Sugartypes.Var "text");
                   (Sugartypes.ConstructorLit ("Submit", None,
                      (Some [|Submit|Button|Reset|])))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.String)
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.Primitive
                            CommonTypes.Primitive.Bool))
                       ]
                     ))
                  )),
               (Some (String) ~> Formlet (Bool))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("resetButton", (String) ~> Formlet (Bool));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("text", String))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "button"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |_ }))]
                    )),
                 [(Sugartypes.Var "text");
                   (Sugartypes.ConstructorLit ("Reset", None,
                      (Some [|Reset|Button|Submit|])))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.String)
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.Primitive
                            CommonTypes.Primitive.Bool))
                       ]
                     ))
                  )),
               (Some (String) ~> Formlet (Bool))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("pushButton", (String) ~> Formlet (Bool));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("text", String))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "button"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |_ }))]
                    )),
                 [(Sugartypes.Var "text");
                   (Sugartypes.ConstructorLit ("Button", None,
                      (Some [|Button|Reset|Submit|])))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.String)
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.Primitive
                            CommonTypes.Primitive.Bool))
                       ]
                     ))
                  )),
               (Some (String) ~> Formlet (Bool))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("checkboxDefault", (Bool) ~> Formlet (Bool));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("checked", Bool))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.Block
                 ([(Sugartypes.Fun
                      { Sugartypes.fun_binder =
                        ("_fun__g80",
                         (Int) {}~> ((Xml, ([(String, String)]) {}~> (Xml, Maybe (Bool))), Int));
                        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                        fun_definition =
                        ([],
                         ([[(Sugartypes.Pattern.Variable ("gen", Int))]],
                          (Sugartypes.Block
                             ([],
                              (Sugartypes.FnAppl (
                                 (Sugartypes.TupleLit
                                    [(Sugartypes.InfixAppl (
                                        ([Int; String;
                                           (Xml, ([(String, String)]) {}~> (Xml, Maybe (Bool)));
                                           { |wild }],
                                         (Operators.BinaryOp.Name ">>=")),
                                        (Sugartypes.Var "nextName"),
                                        (Sugartypes.Block
                                           ([(Sugartypes.Fun
                                                { Sugartypes.fun_binder =
                                                  ("_fun__g79",
                                                   (String) {}~> State (Int,(Xml, ([(String, String)]) {}~> (Xml, Maybe (Bool)))));
                                                  fun_linearity =
                                                  CommonTypes.DeclaredLinearity.Unl;
                                                  fun_definition =
                                                  ([],
                                                   ([[(Sugartypes.Pattern.Variable
                                                         ("name", String))
                                                       ]
                                                      ],
                                                    (Sugartypes.Block
                                                       ([(Sugartypes.Val (
                                                            (Sugartypes.Pattern.Variable
                                                               ("xml", Xml)),
                                                            ([],
                                                             (Sugartypes.Xml (
                                                                "input",
                                                                [("type",
                                                                  [(Sugartypes.Constant
                                                                    (CommonTypes.Constant.String
                                                                    "checkbox"))
                                                                    ]);
                                                                  ("name",
                                                                   [(Sugartypes.Block
                                                                    ([],
                                                                    (Sugartypes.Var
                                                                    "name")))
                                                                    ]);
                                                                  ("value",
                                                                   [(Sugartypes.Constant
                                                                    (CommonTypes.Constant.String
                                                                    "yes"))])
                                                                  ],
                                                                None, 
                                                                []))),
                                                            CommonTypes.Location.Unknown,
                                                            None))
                                                          ],
                                                        (Sugartypes.FnAppl (
                                                           (Sugartypes.TAppl (
                                                              (Sugartypes.FreezeVar
                                                                 "return"),
                                                              [((Sugartypes.Datatype.Type
                                                                   (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                (Some (Xml, ([(String, String)]) {}~> (Xml, Maybe (Bool)))));
                                                                ((Sugartypes.Datatype.Type
                                                                    (
                                                                    Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                 (Some { |wild }));
                                                                ((Sugartypes.Datatype.Type
                                                                    (
                                                                    Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                 (Some Int))
                                                                ]
                                                              )),
                                                           [(Sugartypes.TupleLit
                                                               [(Sugartypes.FnAppl (
                                                                   (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "addAttributes"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild }))
                                                                    ])),
                                                                   [(Sugartypes.Var
                                                                    "xml");
                                                                    (Sugartypes.Conditional (
                                                                    (Sugartypes.Var
                                                                    "checked"),
                                                                    (Sugartypes.ListLit (
                                                                    [(Sugartypes.TupleLit
                                                                    [(Sugartypes.Constant
                                                                    (CommonTypes.Constant.String
                                                                    "checked"));
                                                                    (Sugartypes.Constant
                                                                    (CommonTypes.Constant.String
                                                                    "Y"))])],
                                                                    (Some (String, String))
                                                                    )),
                                                                    (Sugartypes.ListLit (
                                                                    [],
                                                                    (Some (String, String))
                                                                    ))))]
                                                                   ));
                                                                 (Sugartypes.Block
                                                                    (
                                                                    [(Sugartypes.Fun
                                                                    { Sugartypes.fun_binder =
                                                                    ("_fun__g78",
                                                                    ([(String, String)]) {}~> (Xml, Maybe (Bool)));
                                                                    fun_linearity =
                                                                    CommonTypes.DeclaredLinearity.Unl;
                                                                    fun_definition =
                                                                    (
                                                                    [],
                                                                    (
                                                                    [[(Sugartypes.Pattern.Variable
                                                                    ("env",
                                                                    [(String, String)]))
                                                                    ]],
                                                                    (
                                                                    Sugartypes.Block
                                                                    ([(Sugartypes.Val (
                                                                    (Sugartypes.Pattern.Variable
                                                                    ("checked",
                                                                    Bool)),
                                                                    ([],
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "memassoc"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some String));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some String));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some {  }))
                                                                    ])),
                                                                    [(Sugartypes.Var
                                                                    "name");
                                                                    (Sugartypes.Var
                                                                    "env")]))),
                                                                    CommonTypes.Location.Unknown,
                                                                    None))],
                                                                    (Sugartypes.TupleLit
                                                                    [(Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "addAttributes"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild }))
                                                                    ])),
                                                                    [(Sugartypes.Var
                                                                    "xml");
                                                                    (Sugartypes.Conditional (
                                                                    (Sugartypes.Var
                                                                    "checked"),
                                                                    (Sugartypes.ListLit (
                                                                    [(Sugartypes.TupleLit
                                                                    [(Sugartypes.Constant
                                                                    (CommonTypes.Constant.String
                                                                    "checked"));
                                                                    (Sugartypes.Constant
                                                                    (CommonTypes.Constant.String
                                                                    "Y"))])],
                                                                    (Some (String, String))
                                                                    )),
                                                                    (Sugartypes.ListLit (
                                                                    [],
                                                                    (Some (String, String))
                                                                    ))))]));
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "pureE"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some Bool));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild }))
                                                                    ])),
                                                                    [(Sugartypes.Var
                                                                    "checked")
                                                                    ]))])))));
                                                                    fun_location =
                                                                    CommonTypes.Location.Unknown;
                                                                    fun_signature =
                                                                    None;
                                                                    fun_unsafe_signature =
                                                                    false;
                                                                    fun_frozen =
                                                                    true })],
                                                                    (
                                                                    Sugartypes.FreezeVar
                                                                    "_fun__g78")))
                                                                 ])
                                                             ]
                                                           ))))));
                                                  fun_location =
                                                  CommonTypes.Location.Unknown;
                                                  fun_signature = None;
                                                  fun_unsafe_signature =
                                                  false; fun_frozen = true })
                                              ],
                                            (Sugartypes.FreezeVar "_fun__g79")))
                                        ))
                                      ]),
                                 [(Sugartypes.Var "gen")]))))));
                        fun_location = CommonTypes.Location.Unknown;
                        fun_signature = None; fun_unsafe_signature = false;
                        fun_frozen = true })
                    ],
                  (Sugartypes.FreezeVar "_fun__g80")))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive CommonTypes.Primitive.Bool)
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.Primitive
                            CommonTypes.Primitive.Bool))
                       ]
                     ))
                  )),
               (Some (Bool) ~> Formlet (Bool))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Val (
      (Sugartypes.Pattern.Variable ("checkbox", Formlet (Bool))),
      ([],
       (Sugartypes.Block
          ([(Sugartypes.Fun
               { Sugartypes.fun_binder =
                 ("_fun__g81",
                  (Gen) {}~> ((Xml, CheckedCollector (Bool)), Gen));
                 fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                 fun_definition =
                 ([],
                  ([[(Sugartypes.Pattern.Variable ("gen", Gen))]],
                   (Sugartypes.Block
                      ([],
                       (Sugartypes.FnAppl (
                          (Sugartypes.FnAppl (
                             (Sugartypes.TAppl (
                                (Sugartypes.FreezeVar "checkboxDefault"),
                                [((Sugartypes.Datatype.Type
                                     (Sugartypes.Datatype.TypeVar
                                        ("$none", None, `Rigid))),
                                  (Some {  }))]
                                )),
                             [(Sugartypes.Constant
                                 (CommonTypes.Constant.Bool false))
                               ]
                             )),
                          [(Sugartypes.Var "gen")]))))));
                 fun_location = CommonTypes.Location.Unknown;
                 fun_signature = None; fun_unsafe_signature = false;
                 fun_frozen = true })
             ],
           (Sugartypes.FreezeVar "_fun__g81")))),
      CommonTypes.Location.Unknown,
      (Some ((Sugartypes.Datatype.TypeApplication ("Formlet",
                [(Sugartypes.Datatype.Type
                    (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Bool))
                  ]
                )),
             (Some Formlet (Bool))))
      ));
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("inputRadiogroup", ([a], a, ([(Xml, a)]) {}~> Xml) -> Formlet (a));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("items", [_]));
             (Sugartypes.Pattern.Variable ("selected", _));
             (Sugartypes.Pattern.Variable ("layout", ([(Xml, _)]) {}~> Xml))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.InfixAppl (
                 ([Int; String;
                    (Xml, ([(String, String)]) {}~> (Xml, Maybe (_))); { |_ }
                    ],
                  (Operators.BinaryOp.Name ">>=")),
                 (Sugartypes.Var "nextName"),
                 (Sugartypes.Block
                    ([(Sugartypes.Fun
                         { Sugartypes.fun_binder =
                           ("_fun__g86",
                            (String) {}~> State (Int,(Xml, ([(String, String)]) {}~> (Xml, Maybe (_)))));
                           fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                           fun_definition =
                           ([],
                            ([[(Sugartypes.Pattern.Variable ("name", String))
                                ]
                               ],
                             (Sugartypes.Block
                                ([],
                                 (Sugartypes.InfixAppl (
                                    ([Int; [String];
                                       (Xml, ([(String, String)]) {}~> (Xml, Maybe (_)));
                                       { |wild }],
                                     (Operators.BinaryOp.Name ">>=")),
                                    (Sugartypes.FnAppl (
                                       (Sugartypes.TAppl (
                                          (Sugartypes.FreezeVar "sequence"),
                                          [((Sugartypes.Datatype.Type
                                               (Sugartypes.Datatype.TypeVar
                                                  ("$none", None, `Rigid))),
                                            (Some Int));
                                            ((Sugartypes.Datatype.Type
                                                (Sugartypes.Datatype.TypeVar
                                                   ("$none", None, `Rigid))),
                                             (Some String));
                                            ((Sugartypes.Datatype.Type
                                                (Sugartypes.Datatype.TypeVar
                                                   ("$none", None, `Rigid))),
                                             (Some {  }))
                                            ]
                                          )),
                                       [(Sugartypes.FnAppl (
                                           (Sugartypes.TAppl (
                                              (Sugartypes.FreezeVar
                                                 "concatMap"),
                                              [((Sugartypes.Datatype.Type
                                                   (Sugartypes.Datatype.TypeVar
                                                      ("$none", None, `Rigid))),
                                                (Some _));
                                                ((Sugartypes.Datatype.Type
                                                    (Sugartypes.Datatype.TypeVar
                                                       ("$none", None, `Rigid))),
                                                 (Some { wild }));
                                                ((Sugartypes.Datatype.Type
                                                    (Sugartypes.Datatype.TypeVar
                                                       ("$none", None, `Rigid))),
                                                 (Some State (Int,String)))
                                                ]
                                              )),
                                           [(Sugartypes.Block
                                               ([(Sugartypes.Fun
                                                    { Sugartypes.fun_binder =
                                                      ("_fun__g82",
                                                       (_) {}~> [State (Int,String)]);
                                                      fun_linearity =
                                                      CommonTypes.DeclaredLinearity.Unl;
                                                      fun_definition =
                                                      ([],
                                                       ([[(Sugartypes.Pattern.As (
                                                             ("_for__g3", _),
                                                             (Sugartypes.Pattern.Variable
                                                                ("x", _))
                                                             ))
                                                           ]
                                                          ],
                                                        (Sugartypes.ListLit (
                                                           [(Sugartypes.Var
                                                               "nextName")
                                                             ],
                                                           (Some State (Int,String))
                                                           ))));
                                                      fun_location =
                                                      CommonTypes.Location.Unknown;
                                                      fun_signature = None;
                                                      fun_unsafe_signature =
                                                      false;
                                                      fun_frozen = true })
                                                  ],
                                                (Sugartypes.FreezeVar
                                                   "_fun__g82")));
                                             (Sugartypes.Var "items")]
                                           ))
                                         ]
                                       )),
                                    (Sugartypes.Block
                                       ([(Sugartypes.Fun
                                            { Sugartypes.fun_binder =
                                              ("_fun__g85",
                                               ([String]) {}~> State (Int,(Xml, ([(String, String)]) {}~> (Xml, Maybe (_)))));
                                              fun_linearity =
                                              CommonTypes.DeclaredLinearity.Unl;
                                              fun_definition =
                                              ([],
                                               ([[(Sugartypes.Pattern.Variable
                                                     ("keys", [String]))
                                                   ]
                                                  ],
                                                (Sugartypes.Block
                                                   ([(Sugartypes.Val (
                                                        (Sugartypes.Pattern.Variable
                                                           ("keyedItems",
                                                            [(String, _)])),
                                                        ([],
                                                         (Sugartypes.FnAppl (
                                                            (Sugartypes.TAppl (
                                                               (Sugartypes.FreezeVar
                                                                  "zip"),
                                                               [((Sugartypes.Datatype.Type
                                                                    (
                                                                    Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                 (Some String));
                                                                 ((Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                  (Some _));
                                                                 ((Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                  (Some {  }))
                                                                 ]
                                                               )),
                                                            [(Sugartypes.Var
                                                                "keys");
                                                              (Sugartypes.Var
                                                                 "items")
                                                              ]
                                                            ))),
                                                        CommonTypes.Location.Unknown,
                                                        None));
                                                      (Sugartypes.Fun
                                                         { Sugartypes.fun_binder =
                                                           ("itemXml",
                                                            (a) -> [(Xml, a)]);
                                                           fun_linearity =
                                                           CommonTypes.DeclaredLinearity.Unl;
                                                           fun_definition =
                                                           ([a::Row],
                                                            ([[(Sugartypes.Pattern.Variable
                                                                  ("selected",
                                                                   _))
                                                                ]
                                                               ],
                                                             (Sugartypes.Block
                                                                ([],
                                                                 (Sugartypes.FnAppl (
                                                                    (
                                                                    Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "concatMap"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some (String, _)));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |_ }));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some (Xml, _)))
                                                                    ])),
                                                                    [(Sugartypes.Block
                                                                    ([(Sugartypes.Fun
                                                                    { Sugartypes.fun_binder =
                                                                    ("_fun__g83",
                                                                    ((String, a)) -> [(Xml, a)]);
                                                                    fun_linearity =
                                                                    CommonTypes.DeclaredLinearity.Unl;
                                                                    fun_definition =
                                                                    (
                                                                    [],
                                                                    (
                                                                    [[(Sugartypes.Pattern.As (
                                                                    ("_for__g4",
                                                                    (String, _)),
                                                                    (Sugartypes.Pattern.Tuple
                                                                    [(Sugartypes.Pattern.Variable
                                                                    ("key",
                                                                    String));
                                                                    (Sugartypes.Pattern.Variable
                                                                    ("data",
                                                                    _))])))]],
                                                                    (
                                                                    Sugartypes.ListLit (
                                                                    [(Sugartypes.TupleLit
                                                                    [(Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "addAttributes"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |_ }))
                                                                    ])),
                                                                    [(Sugartypes.Xml (
                                                                    "input",
                                                                    [("type",
                                                                    [(Sugartypes.Constant
                                                                    (CommonTypes.Constant.String
                                                                    "radio"))
                                                                    ]);
                                                                    ("name",
                                                                    [(Sugartypes.Block
                                                                    ([],
                                                                    (Sugartypes.Var
                                                                    "name")))
                                                                    ]);
                                                                    ("value",
                                                                    [(Sugartypes.Block
                                                                    ([],
                                                                    (Sugartypes.Var
                                                                    "key")))])
                                                                    ], None,
                                                                    []));
                                                                    (Sugartypes.Conditional (
                                                                    (Sugartypes.InfixAppl (
                                                                    ([_;
                                                                    { |_ }],
                                                                    (Operators.BinaryOp.Name
                                                                    "==")),
                                                                    (Sugartypes.Var
                                                                    "data"),
                                                                    (Sugartypes.Var
                                                                    "selected")
                                                                    )),
                                                                    (Sugartypes.ListLit (
                                                                    [(Sugartypes.TupleLit
                                                                    [(Sugartypes.Constant
                                                                    (CommonTypes.Constant.String
                                                                    "checked"));
                                                                    (Sugartypes.Constant
                                                                    (CommonTypes.Constant.String
                                                                    "on"))])],
                                                                    (Some (String, String))
                                                                    )),
                                                                    (Sugartypes.ListLit (
                                                                    [],
                                                                    (Some (String, String))
                                                                    ))))]));
                                                                    (Sugartypes.Var
                                                                    "data")])
                                                                    ],
                                                                    (Some (Xml, _))
                                                                    ))));
                                                                    fun_location =
                                                                    CommonTypes.Location.Unknown;
                                                                    fun_signature =
                                                                    None;
                                                                    fun_unsafe_signature =
                                                                    false;
                                                                    fun_frozen =
                                                                    true })],
                                                                    (Sugartypes.FreezeVar
                                                                    "_fun__g83")));
                                                                    (Sugartypes.Var
                                                                    "keyedItems")
                                                                    ]))))));
                                                           fun_location =
                                                           CommonTypes.Location.Unknown;
                                                           fun_signature =
                                                           None;
                                                           fun_unsafe_signature =
                                                           false;
                                                           fun_frozen = true
                                                           });
                                                      (Sugartypes.Val (
                                                         (Sugartypes.Pattern.Variable
                                                            ("xml", Xml)),
                                                         ([],
                                                          (Sugartypes.FnAppl (
                                                             (Sugartypes.Var
                                                                "layout"),
                                                             [(Sugartypes.FnAppl (
                                                                 (Sugartypes.TAppl (
                                                                    (
                                                                    Sugartypes.FreezeVar
                                                                    "itemXml"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild }))
                                                                    ])),
                                                                 [(Sugartypes.Var
                                                                    "selected")
                                                                   ]
                                                                 ))
                                                               ]
                                                             ))),
                                                         CommonTypes.Location.Unknown,
                                                         None))
                                                      ],
                                                    (Sugartypes.FnAppl (
                                                       (Sugartypes.TAppl (
                                                          (Sugartypes.FreezeVar
                                                             "return"),
                                                          [((Sugartypes.Datatype.Type
                                                               (Sugartypes.Datatype.TypeVar
                                                                  ("$none",
                                                                   None,
                                                                   `Rigid))),
                                                            (Some (Xml, ([(String, String)]) {}~> (Xml, Maybe (_)))));
                                                            ((Sugartypes.Datatype.Type
                                                                (Sugartypes.Datatype.TypeVar
                                                                   ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                             (Some { |wild }));
                                                            ((Sugartypes.Datatype.Type
                                                                (Sugartypes.Datatype.TypeVar
                                                                   ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                             (Some Int))
                                                            ]
                                                          )),
                                                       [(Sugartypes.TupleLit
                                                           [(Sugartypes.Var
                                                               "xml");
                                                             (Sugartypes.Block
                                                                ([(Sugartypes.Fun
                                                                    { Sugartypes.fun_binder =
                                                                    ("_fun__g84",
                                                                    ([(String, String)]) {}~> (Xml, Maybe (_)));
                                                                    fun_linearity =
                                                                    CommonTypes.DeclaredLinearity.Unl;
                                                                    fun_definition =
                                                                    (
                                                                    [],
                                                                    (
                                                                    [[(Sugartypes.Pattern.Variable
                                                                    ("env",
                                                                    [(String, String)]))
                                                                    ]],
                                                                    (
                                                                    Sugartypes.Block
                                                                    ([(Sugartypes.Val (
                                                                    (Sugartypes.Pattern.Variable
                                                                    ("selectedValue",
                                                                    String)),
                                                                    ([],
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "assoc"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some String));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some {  }))
                                                                    ])),
                                                                    [(Sugartypes.Var
                                                                    "name");
                                                                    (Sugartypes.Var
                                                                    "env")]))),
                                                                    CommonTypes.Location.Unknown,
                                                                    None));
                                                                    (Sugartypes.Val (
                                                                    (Sugartypes.Pattern.Variable
                                                                    ("selectedData",
                                                                    _)),
                                                                    ([],
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "assoc"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some _));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some {  }))
                                                                    ])),
                                                                    [(Sugartypes.Var
                                                                    "selectedValue");
                                                                    (Sugartypes.Var
                                                                    "keyedItems")
                                                                    ]))),
                                                                    CommonTypes.Location.Unknown,
                                                                    None));
                                                                    (Sugartypes.Val (
                                                                    (Sugartypes.Pattern.Variable
                                                                    ("xml",
                                                                    Xml)),
                                                                    ([],
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.Var
                                                                    "layout"),
                                                                    [(Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "itemXml"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild }))
                                                                    ])),
                                                                    [(Sugartypes.Var
                                                                    "selectedData")
                                                                    ]))]))),
                                                                    CommonTypes.Location.Unknown,
                                                                    None))],
                                                                    (Sugartypes.TupleLit
                                                                    [(Sugartypes.Var
                                                                    "xml");
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "pureE"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some _));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild }))
                                                                    ])),
                                                                    [(Sugartypes.Var
                                                                    "selectedData")
                                                                    ]))])))));
                                                                    fun_location =
                                                                    CommonTypes.Location.Unknown;
                                                                    fun_signature =
                                                                    None;
                                                                    fun_unsafe_signature =
                                                                    false;
                                                                    fun_frozen =
                                                                    true })
                                                                   ],
                                                                 (Sugartypes.FreezeVar
                                                                    "_fun__g84")))
                                                             ])
                                                         ]
                                                       ))))));
                                              fun_location =
                                              CommonTypes.Location.Unknown;
                                              fun_signature = None;
                                              fun_unsafe_signature = false;
                                              fun_frozen = true })
                                          ],
                                        (Sugartypes.FreezeVar "_fun__g85")))
                                    ))))));
                           fun_location = CommonTypes.Location.Unknown;
                           fun_signature = None;
                           fun_unsafe_signature = false; fun_frozen = true })
                       ],
                     (Sugartypes.FreezeVar "_fun__g86")))
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.List
                      (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)));
                    (Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                    (Sugartypes.Datatype.Function (
                       [(Sugartypes.Datatype.List
                           (Sugartypes.Datatype.Tuple
                              [(Sugartypes.Datatype.TypeApplication ("Xml",
                                  []));
                                (Sugartypes.Datatype.TypeVar
                                   ("a", None, `Rigid))
                                ]))
                         ],
                       ([("wild",
                          (Sugartypes.Datatype.Present
                             Sugartypes.Datatype.Unit))
                          ],
                        Sugartypes.Datatype.Closed),
                       (Sugartypes.Datatype.TypeApplication ("Xml", []))))
                    ],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                       ]
                     ))
                  )),
               (Some ([a], a, ([(Xml, a)]) {}~> Xml) -> Formlet (a))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("preludeOptionKeyed",
         (String, (a, String), Bool) ~> (Xml, ((String) -c-> [a]) -> (String) -c-> [a]));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row; a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("key", String));
             (Sugartypes.Pattern.Tuple
                [(Sugartypes.Pattern.Variable ("data", _));
                  (Sugartypes.Pattern.Variable ("text", String))]);
             (Sugartypes.Pattern.Variable ("selected", Bool))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.Conditional ((Sugartypes.Var "selected"),
                 (Sugartypes.Block
                    ([],
                     (Sugartypes.TupleLit
                        [(Sugartypes.TupleLit
                            [(Sugartypes.Xml ("option",
                                [("value",
                                  [(Sugartypes.Block
                                      ([], (Sugartypes.Var "key")))
                                    ]);
                                  ("selected",
                                   [(Sugartypes.Constant
                                       (CommonTypes.Constant.String
                                          "SELECTED"))
                                     ])
                                  ],
                                None,
                                [(Sugartypes.Block
                                    ([],
                                     (Sugartypes.FnAppl (
                                        (Sugartypes.TAppl (
                                           (Sugartypes.FreezeVar
                                              "stringToXml"),
                                           [((Sugartypes.Datatype.Type
                                                (Sugartypes.Datatype.TypeVar
                                                   ("$none", None, `Rigid))),
                                             (Some { |wild|_ }))]
                                           )),
                                        [(Sugartypes.Var "text")]))))
                                  ]
                                ));
                              (Sugartypes.TupleLit
                                 [(Sugartypes.Block
                                     ([(Sugartypes.Fun
                                          { Sugartypes.fun_binder =
                                            ("_fun__g87",
                                             ((String) -a-> [b]) -> (String) -a-> [b]);
                                            fun_linearity =
                                            CommonTypes.DeclaredLinearity.Unl;
                                            fun_definition =
                                            ([],
                                             ([[(Sugartypes.Pattern.Variable
                                                   ("k", (String) -> [_]))
                                                 ]
                                                ],
                                              (Sugartypes.Block
                                                 ([(Sugartypes.Fun
                                                      { Sugartypes.fun_binder =
                                                        ("_fun__g88",
                                                         (String) -> [_]);
                                                        fun_linearity =
                                                        CommonTypes.DeclaredLinearity.Unl;
                                                        fun_definition =
                                                        ([],
                                                         ([[(Sugartypes.Pattern.Variable
                                                               ("aKey",
                                                                String))
                                                             ]
                                                            ],
                                                          (Sugartypes.Block
                                                             ([],
                                                              (Sugartypes.Conditional (
                                                                 (Sugartypes.InfixAppl (
                                                                    (
                                                                    [String;
                                                                    { |_ }],
                                                                    (
                                                                    Operators.BinaryOp.Name
                                                                    "==")),
                                                                    (
                                                                    Sugartypes.Var
                                                                    "aKey"),
                                                                    (
                                                                    Sugartypes.Var
                                                                    "key"))),
                                                                 (Sugartypes.InfixAppl (
                                                                    (
                                                                    [_;
                                                                    { |_ }],
                                                                    Operators.BinaryOp.Cons),
                                                                    (
                                                                    Sugartypes.Var
                                                                    "data"),
                                                                    (
                                                                    Sugartypes.FnAppl (
                                                                    (Sugartypes.Var
                                                                    "k"),
                                                                    [(Sugartypes.Var
                                                                    "aKey")]
                                                                    )))),
                                                                 (Sugartypes.FnAppl (
                                                                    (
                                                                    Sugartypes.Var
                                                                    "k"),
                                                                    [(Sugartypes.Var
                                                                    "aKey")]
                                                                    ))
                                                                 ))))));
                                                        fun_location =
                                                        CommonTypes.Location.Unknown;
                                                        fun_signature = None;
                                                        fun_unsafe_signature =
                                                        false;
                                                        fun_frozen = false })
                                                    ],
                                                  (Sugartypes.FreezeVar
                                                     "_fun__g88")))));
                                            fun_location =
                                            CommonTypes.Location.Unknown;
                                            fun_signature = None;
                                            fun_unsafe_signature = false;
                                            fun_frozen = true })
                                        ],
                                      (Sugartypes.FreezeVar "_fun__g87")))
                                   ])
                              ])
                          ]))),
                 (Sugartypes.Block
                    ([],
                     (Sugartypes.TupleLit
                        [(Sugartypes.TupleLit
                            [(Sugartypes.Xml ("option",
                                [("value",
                                  [(Sugartypes.Block
                                      ([], (Sugartypes.Var "key")))
                                    ])
                                  ],
                                None,
                                [(Sugartypes.Block
                                    ([],
                                     (Sugartypes.FnAppl (
                                        (Sugartypes.TAppl (
                                           (Sugartypes.FreezeVar
                                              "stringToXml"),
                                           [((Sugartypes.Datatype.Type
                                                (Sugartypes.Datatype.TypeVar
                                                   ("$none", None, `Rigid))),
                                             (Some { |wild|_ }))]
                                           )),
                                        [(Sugartypes.Var "text")]))))
                                  ]
                                ));
                              (Sugartypes.TupleLit
                                 [(Sugartypes.Block
                                     ([(Sugartypes.Fun
                                          { Sugartypes.fun_binder =
                                            ("_fun__g89",
                                             ((String) -a-> [b]) -> (String) -a-> [b]);
                                            fun_linearity =
                                            CommonTypes.DeclaredLinearity.Unl;
                                            fun_definition =
                                            ([],
                                             ([[(Sugartypes.Pattern.Variable
                                                   ("k", (String) -> [_]))
                                                 ]
                                                ],
                                              (Sugartypes.Block
                                                 ([(Sugartypes.Fun
                                                      { Sugartypes.fun_binder =
                                                        ("_fun__g90",
                                                         (String) -> [_]);
                                                        fun_linearity =
                                                        CommonTypes.DeclaredLinearity.Unl;
                                                        fun_definition =
                                                        ([],
                                                         ([[(Sugartypes.Pattern.Variable
                                                               ("aKey",
                                                                String))
                                                             ]
                                                            ],
                                                          (Sugartypes.Block
                                                             ([],
                                                              (Sugartypes.Conditional (
                                                                 (Sugartypes.InfixAppl (
                                                                    (
                                                                    [String;
                                                                    { |_ }],
                                                                    (
                                                                    Operators.BinaryOp.Name
                                                                    "==")),
                                                                    (
                                                                    Sugartypes.Var
                                                                    "aKey"),
                                                                    (
                                                                    Sugartypes.Var
                                                                    "key"))),
                                                                 (Sugartypes.InfixAppl (
                                                                    (
                                                                    [_;
                                                                    { |_ }],
                                                                    Operators.BinaryOp.Cons),
                                                                    (
                                                                    Sugartypes.Var
                                                                    "data"),
                                                                    (
                                                                    Sugartypes.FnAppl (
                                                                    (Sugartypes.Var
                                                                    "k"),
                                                                    [(Sugartypes.Var
                                                                    "aKey")]
                                                                    )))),
                                                                 (Sugartypes.FnAppl (
                                                                    (
                                                                    Sugartypes.Var
                                                                    "k"),
                                                                    [(Sugartypes.Var
                                                                    "aKey")]
                                                                    ))
                                                                 ))))));
                                                        fun_location =
                                                        CommonTypes.Location.Unknown;
                                                        fun_signature = None;
                                                        fun_unsafe_signature =
                                                        false;
                                                        fun_frozen = false })
                                                    ],
                                                  (Sugartypes.FreezeVar
                                                     "_fun__g90")))));
                                            fun_location =
                                            CommonTypes.Location.Unknown;
                                            fun_signature = None;
                                            fun_unsafe_signature = false;
                                            fun_frozen = true })
                                        ],
                                      (Sugartypes.FreezeVar "_fun__g89")))
                                   ])
                              ])
                          ])))
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.String);
                    (Sugartypes.Datatype.Tuple
                       [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                         (Sugartypes.Datatype.Primitive
                            CommonTypes.Primitive.String)
                         ]);
                    (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Bool)
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.Tuple
                     [(Sugartypes.Datatype.TypeApplication ("Xml", []));
                       (Sugartypes.Datatype.Function (
                          [(Sugartypes.Datatype.Function (
                              [(Sugartypes.Datatype.Primitive
                                  CommonTypes.Primitive.String)
                                ],
                              ([],
                               (Sugartypes.Datatype.Open ("c", None, `Rigid))),
                              (Sugartypes.Datatype.List
                                 (Sugartypes.Datatype.TypeVar
                                    ("a", None, `Rigid)))
                              ))
                            ],
                          ([],
                           (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                          (Sugartypes.Datatype.Function (
                             [(Sugartypes.Datatype.Primitive
                                 CommonTypes.Primitive.String)
                               ],
                             ([],
                              (Sugartypes.Datatype.Open ("c", None, `Rigid))),
                             (Sugartypes.Datatype.List
                                (Sugartypes.Datatype.TypeVar
                                   ("a", None, `Rigid)))
                             ))
                          ))
                       ])
                  )),
               (Some (String, (a, String), Bool) ~> (Xml, ((String) -c-> [a]) -> (String) -c-> [a]))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder =
         ("preludeOptionsKeyed",
          ([(String, (a, String))], a) ~> (Xml, (String) -> [a]));
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a::Row; a::Row],
           (Some (([(String, (a, String))], a) ~> (Xml, (String) -> [a]),
                  [None; None; None]))),
          ([[(Sugartypes.Pattern.Variable ("items", [(String, (_, String))]));
              (Sugartypes.Pattern.Variable ("def", _))]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "items"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.TupleLit
                           [(Sugartypes.TupleLit
                               [(Sugartypes.Xml ("#", [], None, []));
                                 (Sugartypes.Block
                                    ([(Sugartypes.Fun
                                         { Sugartypes.fun_binder =
                                           ("_fun__g91", (String) -> [_]);
                                           fun_linearity =
                                           CommonTypes.DeclaredLinearity.Unl;
                                           fun_definition =
                                           ([],
                                            ([[Sugartypes.Pattern.Any]],
                                             (Sugartypes.Block
                                                ([],
                                                 (Sugartypes.ListLit (
                                                    [], (Some _)))))));
                                           fun_location =
                                           CommonTypes.Location.Unknown;
                                           fun_signature = None;
                                           fun_unsafe_signature = false;
                                           fun_frozen = true })
                                       ],
                                     (Sugartypes.FreezeVar "_fun__g91")))
                                 ])
                             ]))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Tuple
                           [(Sugartypes.Pattern.Variable ("itemKey", String));
                             (Sugartypes.Pattern.Variable ("item", (_)))]),
                        (Sugartypes.Pattern.Variable
                           ("items", [(String, (_))]))
                        )),
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.Block
                            ([(Sugartypes.Val (
                                 (Sugartypes.Pattern.Tuple
                                    [(Sugartypes.Pattern.Variable
                                        ("xml", Xml));
                                      (Sugartypes.Pattern.Variable
                                         ("r1",
                                          ((String) -a-> [b]) ~> (String) -a-> [b]))
                                      ]),
                                 ([],
                                  (Sugartypes.FnAppl (
                                     (Sugartypes.TAppl (
                                        (Sugartypes.FreezeVar
                                           "preludeOptionKeyed"),
                                        [((Sugartypes.Datatype.Type
                                             (Sugartypes.Datatype.TypeVar
                                                ("$none", None, `Rigid))),
                                          (Some _));
                                          ((Sugartypes.Datatype.Type
                                              (Sugartypes.Datatype.TypeVar
                                                 ("$none", None, `Rigid))),
                                           (Some { |_ }));
                                          ((Sugartypes.Datatype.Type
                                              (Sugartypes.Datatype.TypeVar
                                                 ("$none", None, `Rigid))),
                                           (Some { |_ }));
                                          ((Sugartypes.Datatype.Type
                                              (Sugartypes.Datatype.TypeVar
                                                 ("$none", None, `Rigid))),
                                           (Some { |wild|_ }))
                                          ]
                                        )),
                                     [(Sugartypes.Var "itemKey");
                                       (Sugartypes.Var "item");
                                       (Sugartypes.TupleLit
                                          [(Sugartypes.InfixAppl (
                                              ([_; { |wild|_ }],
                                               (Operators.BinaryOp.Name "==")),
                                              (Sugartypes.FnAppl (
                                                 (Sugartypes.TAppl (
                                                    (Sugartypes.FreezeVar
                                                       "first"),
                                                    [((Sugartypes.Datatype.Type
                                                         (Sugartypes.Datatype.TypeVar
                                                            ("$none", None,
                                                             `Rigid))),
                                                      (Some _));
                                                      ((Sugartypes.Datatype.Type
                                                          (Sugartypes.Datatype.TypeVar
                                                             ("$none", None,
                                                              `Rigid))),
                                                       (Some { |2:String }));
                                                      ((Sugartypes.Datatype.Type
                                                          (Sugartypes.Datatype.TypeVar
                                                             ("$none", None,
                                                              `Rigid))),
                                                       (Some { |wild|_ }))
                                                      ]
                                                    )),
                                                 [(Sugartypes.Var "item")])),
                                              (Sugartypes.Var "def")))
                                            ])
                                       ]
                                     ))),
                                 CommonTypes.Location.Unknown, None));
                               (Sugartypes.Val (
                                  (Sugartypes.Pattern.Tuple
                                     [(Sugartypes.Pattern.Variable
                                         ("morexml", Xml));
                                       (Sugartypes.Pattern.Variable
                                          ("r2", (String) -> [_]))
                                       ]),
                                  ([],
                                   (Sugartypes.FnAppl (
                                      (Sugartypes.TAppl (
                                         (Sugartypes.FreezeVar
                                            "preludeOptionsKeyed"),
                                         [((Sugartypes.Datatype.Type
                                              (Sugartypes.Datatype.TypeVar
                                                 ("$none", None, `Rigid))),
                                           (Some _));
                                           ((Sugartypes.Datatype.Type
                                               (Sugartypes.Datatype.TypeVar
                                                  ("$none", None, `Rigid))),
                                            (Some { |_ }));
                                           ((Sugartypes.Datatype.Type
                                               (Sugartypes.Datatype.TypeVar
                                                  ("$none", None, `Rigid))),
                                            (Some { |_ }))
                                           ]
                                         )),
                                      [(Sugartypes.Var "items");
                                        (Sugartypes.Var "def")]
                                      ))),
                                  CommonTypes.Location.Unknown, None))
                               ],
                             (Sugartypes.TupleLit
                                [(Sugartypes.TupleLit
                                    [(Sugartypes.InfixAppl (
                                        ([XmlItem; { |wild|_ }],
                                         (Operators.BinaryOp.Name "++")),
                                        (Sugartypes.Var "xml"),
                                        (Sugartypes.Var "morexml")));
                                      (Sugartypes.FnAppl (
                                         (Sugartypes.Var "r1"),
                                         [(Sugartypes.Var "r2")]))
                                      ])
                                  ]))))))
                    ],
                  (Some ([XmlItem], (String) -> [_]))))))));
         rec_location = CommonTypes.Location.Unknown;
         rec_signature =
         (Some ((Sugartypes.Datatype.Function (
                   [(Sugartypes.Datatype.List
                       (Sugartypes.Datatype.Tuple
                          [(Sugartypes.Datatype.Primitive
                              CommonTypes.Primitive.String);
                            (Sugartypes.Datatype.Tuple
                               [(Sugartypes.Datatype.TypeVar
                                   ("a", None, `Rigid));
                                 (Sugartypes.Datatype.Primitive
                                    CommonTypes.Primitive.String)
                                 ])
                            ]));
                     (Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                   ([("wild",
                      (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                      ],
                    (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                   (Sugartypes.Datatype.Tuple
                      [(Sugartypes.Datatype.TypeApplication ("Xml", []));
                        (Sugartypes.Datatype.Function (
                           [(Sugartypes.Datatype.Primitive
                               CommonTypes.Primitive.String)
                             ],
                           ([],
                            (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                           (Sugartypes.Datatype.List
                              (Sugartypes.Datatype.TypeVar
                                 ("a", None, `Rigid)))
                           ))
                        ])
                   )),
                (Some ([(String, (a, String))], a) ~> (Xml, (String) -> [a]))));
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 1000, column 1008, to line 25174, column 25488
         }
        ]);
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder =
         ("preludeMultiOptionsKeyed",
          ([(String, (a, String, Bool))]) ~> (Xml, (String) -> [a]));
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a::Row; a::Row],
           (Some (([(String, (a, String, Bool))]) ~> (Xml, (String) -> [a]),
                  [None; None; None]))),
          ([[(Sugartypes.Pattern.Variable
                ("items", [(String, (_, String, Bool))]))
              ]
             ],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "items"),
                  [(Sugartypes.Pattern.Nil,
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.TupleLit
                           [(Sugartypes.TupleLit
                               [(Sugartypes.Xml ("#", [], None, []));
                                 (Sugartypes.Block
                                    ([(Sugartypes.Fun
                                         { Sugartypes.fun_binder =
                                           ("_fun__g92", (String) -> [_]);
                                           fun_linearity =
                                           CommonTypes.DeclaredLinearity.Unl;
                                           fun_definition =
                                           ([],
                                            ([[Sugartypes.Pattern.Any]],
                                             (Sugartypes.Block
                                                ([],
                                                 (Sugartypes.ListLit (
                                                    [], (Some _)))))));
                                           fun_location =
                                           CommonTypes.Location.Unknown;
                                           fun_signature = None;
                                           fun_unsafe_signature = false;
                                           fun_frozen = true })
                                       ],
                                     (Sugartypes.FreezeVar "_fun__g92")))
                                 ])
                             ]))));
                    ((Sugartypes.Pattern.Cons (
                        (Sugartypes.Pattern.Tuple
                           [(Sugartypes.Pattern.Variable ("itemKey", String));
                             (Sugartypes.Pattern.Variable ("item", (_)))]),
                        (Sugartypes.Pattern.Variable
                           ("items", [(String, (_))]))
                        )),
                     (Sugartypes.Block
                        ([(Sugartypes.Val (
                             (Sugartypes.Pattern.Tuple
                                [(Sugartypes.Pattern.Variable ("xml", Xml));
                                  (Sugartypes.Pattern.Variable
                                     ("r1",
                                      ((String) -a-> [b]) ~> (String) -a-> [b]))
                                  ]),
                             ([],
                              (Sugartypes.FnAppl (
                                 (Sugartypes.TAppl (
                                    (Sugartypes.FreezeVar
                                       "preludeOptionKeyed"),
                                    [((Sugartypes.Datatype.Type
                                         (Sugartypes.Datatype.TypeVar
                                            ("$none", None, `Rigid))),
                                      (Some _));
                                      ((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some { |_ }));
                                      ((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some { |_ }));
                                      ((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some { |wild|_ }))
                                      ]
                                    )),
                                 [(Sugartypes.Var "itemKey");
                                   (Sugartypes.TupleLit
                                      [(Sugartypes.FnAppl (
                                          (Sugartypes.TAppl (
                                             (Sugartypes.FreezeVar "first"),
                                             [((Sugartypes.Datatype.Type
                                                  (Sugartypes.Datatype.TypeVar
                                                     ("$none", None, `Rigid))),
                                               (Some _));
                                               ((Sugartypes.Datatype.Type
                                                   (Sugartypes.Datatype.TypeVar
                                                      ("$none", None, `Rigid))),
                                                (Some { |2:String|3:Bool }));
                                               ((Sugartypes.Datatype.Type
                                                   (Sugartypes.Datatype.TypeVar
                                                      ("$none", None, `Rigid))),
                                                (Some { |wild|_ }))
                                               ]
                                             )),
                                          [(Sugartypes.Var "item")]));
                                        (Sugartypes.FnAppl (
                                           (Sugartypes.TAppl (
                                              (Sugartypes.FreezeVar "second"),
                                              [((Sugartypes.Datatype.Type
                                                   (Sugartypes.Datatype.TypeVar
                                                      ("$none", None, `Rigid))),
                                                (Some String));
                                                ((Sugartypes.Datatype.Type
                                                    (Sugartypes.Datatype.TypeVar
                                                       ("$none", None, `Rigid))),
                                                 (Some { |1:_|3:Bool }));
                                                ((Sugartypes.Datatype.Type
                                                    (Sugartypes.Datatype.TypeVar
                                                       ("$none", None, `Rigid))),
                                                 (Some { |wild|_ }))
                                                ]
                                              )),
                                           [(Sugartypes.Var "item")]))
                                        ]);
                                   (Sugartypes.FnAppl (
                                      (Sugartypes.TAppl (
                                         (Sugartypes.FreezeVar "third"),
                                         [((Sugartypes.Datatype.Type
                                              (Sugartypes.Datatype.TypeVar
                                                 ("$none", None, `Rigid))),
                                           (Some Bool));
                                           ((Sugartypes.Datatype.Type
                                               (Sugartypes.Datatype.TypeVar
                                                  ("$none", None, `Rigid))),
                                            (Some { |1:_,2:String }));
                                           ((Sugartypes.Datatype.Type
                                               (Sugartypes.Datatype.TypeVar
                                                  ("$none", None, `Rigid))),
                                            (Some { |wild|_ }))
                                           ]
                                         )),
                                      [(Sugartypes.Var "item")]))
                                   ]
                                 ))),
                             CommonTypes.Location.Unknown, None));
                           (Sugartypes.Val (
                              (Sugartypes.Pattern.Tuple
                                 [(Sugartypes.Pattern.Variable
                                     ("morexml", Xml));
                                   (Sugartypes.Pattern.Variable
                                      ("r2", (String) -> [_]))
                                   ]),
                              ([],
                               (Sugartypes.FnAppl (
                                  (Sugartypes.TAppl (
                                     (Sugartypes.FreezeVar
                                        "preludeMultiOptionsKeyed"),
                                     [((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some _));
                                       ((Sugartypes.Datatype.Type
                                           (Sugartypes.Datatype.TypeVar
                                              ("$none", None, `Rigid))),
                                        (Some { |_ }));
                                       ((Sugartypes.Datatype.Type
                                           (Sugartypes.Datatype.TypeVar
                                              ("$none", None, `Rigid))),
                                        (Some { |_ }))
                                       ]
                                     )),
                                  [(Sugartypes.Var "items")]))),
                              CommonTypes.Location.Unknown, None))
                           ],
                         (Sugartypes.TupleLit
                            [(Sugartypes.InfixAppl (
                                ([XmlItem; { |wild|_ }],
                                 (Operators.BinaryOp.Name "++")),
                                (Sugartypes.Var "xml"),
                                (Sugartypes.Var "morexml")));
                              (Sugartypes.FnAppl ((Sugartypes.Var "r1"),
                                 [(Sugartypes.Var "r2")]))
                              ]))))
                    ],
                  (Some ([XmlItem], (String) -> [_]))))))));
         rec_location = CommonTypes.Location.Unknown;
         rec_signature =
         (Some ((Sugartypes.Datatype.Function (
                   [(Sugartypes.Datatype.List
                       (Sugartypes.Datatype.Tuple
                          [(Sugartypes.Datatype.Primitive
                              CommonTypes.Primitive.String);
                            (Sugartypes.Datatype.Tuple
                               [(Sugartypes.Datatype.TypeVar
                                   ("a", None, `Rigid));
                                 (Sugartypes.Datatype.Primitive
                                    CommonTypes.Primitive.String);
                                 (Sugartypes.Datatype.Primitive
                                    CommonTypes.Primitive.Bool)
                                 ])
                            ]))
                     ],
                   ([("wild",
                      (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                      ],
                    (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                   (Sugartypes.Datatype.Tuple
                      [(Sugartypes.Datatype.TypeApplication ("Xml", []));
                        (Sugartypes.Datatype.Function (
                           [(Sugartypes.Datatype.Primitive
                               CommonTypes.Primitive.String)
                             ],
                           ([],
                            (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                           (Sugartypes.Datatype.List
                              (Sugartypes.Datatype.TypeVar
                                 ("a", None, `Rigid)))
                           ))
                        ])
                   )),
                (Some ([(String, (a, String, Bool))]) ~> (Xml, (String) -> [a]))));
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 1012, column 1021, to line 25586, column 25949
         }
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("choiceDefault", ([(a, String)], a) ~> Formlet (a));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("items", [(_, String)]));
             (Sugartypes.Pattern.Variable ("selected", _))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.InfixAppl (
                 ([Int; String;
                    (Xml, ([(String, String)]) {}~> (Xml, Maybe (_)));
                    { |wild|_ }],
                  (Operators.BinaryOp.Name ">>=")),
                 (Sugartypes.Var "nextName"),
                 (Sugartypes.Block
                    ([(Sugartypes.Fun
                         { Sugartypes.fun_binder =
                           ("_fun__g96",
                            (String) {}~> State (Int,(Xml, ([(String, String)]) {}~> (Xml, Maybe (_)))));
                           fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                           fun_definition =
                           ([],
                            ([[(Sugartypes.Pattern.Variable
                                  ("fieldName", String))
                                ]
                               ],
                             (Sugartypes.Block
                                ([],
                                 (Sugartypes.InfixAppl (
                                    ([Int; [String];
                                       (Xml, ([(String, String)]) {}~> (Xml, Maybe (_)));
                                       { |wild }],
                                     (Operators.BinaryOp.Name ">>=")),
                                    (Sugartypes.FnAppl (
                                       (Sugartypes.TAppl (
                                          (Sugartypes.FreezeVar "sequence"),
                                          [((Sugartypes.Datatype.Type
                                               (Sugartypes.Datatype.TypeVar
                                                  ("$none", None, `Rigid))),
                                            (Some Int));
                                            ((Sugartypes.Datatype.Type
                                                (Sugartypes.Datatype.TypeVar
                                                   ("$none", None, `Rigid))),
                                             (Some String));
                                            ((Sugartypes.Datatype.Type
                                                (Sugartypes.Datatype.TypeVar
                                                   ("$none", None, `Rigid))),
                                             (Some {  }))
                                            ]
                                          )),
                                       [(Sugartypes.FnAppl (
                                           (Sugartypes.TAppl (
                                              (Sugartypes.FreezeVar
                                                 "concatMap"),
                                              [((Sugartypes.Datatype.Type
                                                   (Sugartypes.Datatype.TypeVar
                                                      ("$none", None, `Rigid))),
                                                (Some (_, String)));
                                                ((Sugartypes.Datatype.Type
                                                    (Sugartypes.Datatype.TypeVar
                                                       ("$none", None, `Rigid))),
                                                 (Some { wild }));
                                                ((Sugartypes.Datatype.Type
                                                    (Sugartypes.Datatype.TypeVar
                                                       ("$none", None, `Rigid))),
                                                 (Some State (Int,String)))
                                                ]
                                              )),
                                           [(Sugartypes.Block
                                               ([(Sugartypes.Fun
                                                    { Sugartypes.fun_binder =
                                                      ("_fun__g93",
                                                       ((_, String)) {}~> [State (Int,String)]);
                                                      fun_linearity =
                                                      CommonTypes.DeclaredLinearity.Unl;
                                                      fun_definition =
                                                      ([],
                                                       ([[(Sugartypes.Pattern.As (
                                                             ("_for__g5",
                                                              (_, String)),
                                                             (Sugartypes.Pattern.Variable
                                                                ("x",
                                                                 (_, String)))
                                                             ))
                                                           ]
                                                          ],
                                                        (Sugartypes.ListLit (
                                                           [(Sugartypes.Var
                                                               "nextName")
                                                             ],
                                                           (Some State (Int,String))
                                                           ))));
                                                      fun_location =
                                                      CommonTypes.Location.Unknown;
                                                      fun_signature = None;
                                                      fun_unsafe_signature =
                                                      false;
                                                      fun_frozen = true })
                                                  ],
                                                (Sugartypes.FreezeVar
                                                   "_fun__g93")));
                                             (Sugartypes.Var "items")]
                                           ))
                                         ]
                                       )),
                                    (Sugartypes.Block
                                       ([(Sugartypes.Fun
                                            { Sugartypes.fun_binder =
                                              ("_fun__g95",
                                               ([String]) {}~> State (Int,(Xml, ([(String, String)]) {}~> (Xml, Maybe (_)))));
                                              fun_linearity =
                                              CommonTypes.DeclaredLinearity.Unl;
                                              fun_definition =
                                              ([],
                                               ([[(Sugartypes.Pattern.Variable
                                                     ("optKeys", [String]))
                                                   ]
                                                  ],
                                                (Sugartypes.Block
                                                   ([(Sugartypes.Val (
                                                        (Sugartypes.Pattern.Variable
                                                           ("keyedItems",
                                                            [(String, (_, String))])),
                                                        ([],
                                                         (Sugartypes.FnAppl (
                                                            (Sugartypes.TAppl (
                                                               (Sugartypes.FreezeVar
                                                                  "zip"),
                                                               [((Sugartypes.Datatype.Type
                                                                    (
                                                                    Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                 (Some String));
                                                                 ((Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                  (Some (_, String)));
                                                                 ((Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                  (Some {  }))
                                                                 ]
                                                               )),
                                                            [(Sugartypes.Var
                                                                "optKeys");
                                                              (Sugartypes.Var
                                                                 "items")
                                                              ]
                                                            ))),
                                                        CommonTypes.Location.Unknown,
                                                        None))
                                                      ],
                                                    (Sugartypes.FnAppl (
                                                       (Sugartypes.TAppl (
                                                          (Sugartypes.FreezeVar
                                                             "return"),
                                                          [((Sugartypes.Datatype.Type
                                                               (Sugartypes.Datatype.TypeVar
                                                                  ("$none",
                                                                   None,
                                                                   `Rigid))),
                                                            (Some (Xml, ([(String, String)]) {}~> (Xml, Maybe (_)))));
                                                            ((Sugartypes.Datatype.Type
                                                                (Sugartypes.Datatype.TypeVar
                                                                   ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                             (Some { |wild }));
                                                            ((Sugartypes.Datatype.Type
                                                                (Sugartypes.Datatype.TypeVar
                                                                   ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                             (Some Int))
                                                            ]
                                                          )),
                                                       [(Sugartypes.TupleLit
                                                           [(Sugartypes.Block
                                                               ([(Sugartypes.Val (
                                                                    (
                                                                    Sugartypes.Pattern.Tuple
                                                                    [(Sugartypes.Pattern.Variable
                                                                    ("optsXml",
                                                                    Xml));
                                                                    Sugartypes.Pattern.Any
                                                                    ]),
                                                                    (
                                                                    [],
                                                                    (
                                                                    Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "preludeOptionsKeyed"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some _));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some {  }));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |_::(Unl,Mono) }))
                                                                    ])),
                                                                    [(Sugartypes.Var
                                                                    "keyedItems");
                                                                    (Sugartypes.Var
                                                                    "selected")
                                                                    ]))),
                                                                    CommonTypes.Location.Unknown,
                                                                    None))
                                                                  ],
                                                                (Sugartypes.Xml (
                                                                   "select",
                                                                   [("name",
                                                                    [(Sugartypes.Block
                                                                    ([],
                                                                    (Sugartypes.Var
                                                                    "fieldName")))
                                                                    ])],
                                                                   None,
                                                                   [(Sugartypes.Block
                                                                    ([],
                                                                    (Sugartypes.Var
                                                                    "optsXml")))
                                                                    ]
                                                                   ))));
                                                             (Sugartypes.Block
                                                                ([(Sugartypes.Fun
                                                                    { Sugartypes.fun_binder =
                                                                    ("_fun__g94",
                                                                    ([(String, String)]) {}~> (Xml, Maybe (_)));
                                                                    fun_linearity =
                                                                    CommonTypes.DeclaredLinearity.Unl;
                                                                    fun_definition =
                                                                    (
                                                                    [],
                                                                    (
                                                                    [[(Sugartypes.Pattern.Variable
                                                                    ("env",
                                                                    [(String, String)]))
                                                                    ]],
                                                                    (
                                                                    Sugartypes.Block
                                                                    ([(Sugartypes.Val (
                                                                    (Sugartypes.Pattern.Variable
                                                                    ("selectedKey",
                                                                    String)),
                                                                    ([],
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "assoc"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some String));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some {  }))
                                                                    ])),
                                                                    [(Sugartypes.Var
                                                                    "fieldName");
                                                                    (Sugartypes.Var
                                                                    "env")]))),
                                                                    CommonTypes.Location.Unknown,
                                                                    None));
                                                                    (Sugartypes.Val (
                                                                    (Sugartypes.Pattern.Tuple
                                                                    [(Sugartypes.Pattern.Variable
                                                                    ("selected",
                                                                    _));
                                                                    Sugartypes.Pattern.Any
                                                                    ]),
                                                                    ([],
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "assoc"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some (_, String)));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some {  }))
                                                                    ])),
                                                                    [(Sugartypes.Var
                                                                    "selectedKey");
                                                                    (Sugartypes.Var
                                                                    "keyedItems")
                                                                    ]))),
                                                                    CommonTypes.Location.Unknown,
                                                                    None));
                                                                    (Sugartypes.Val (
                                                                    (Sugartypes.Pattern.Tuple
                                                                    [(Sugartypes.Pattern.Variable
                                                                    ("optsXml",
                                                                    Xml));
                                                                    (Sugartypes.Pattern.Variable
                                                                    ("retrieve",
                                                                    (String) {}~> [_]))
                                                                    ]),
                                                                    ([],
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "preludeOptionsKeyed"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some _));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some {  }));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild }))
                                                                    ])),
                                                                    [(Sugartypes.Var
                                                                    "keyedItems");
                                                                    (Sugartypes.Var
                                                                    "selected")
                                                                    ]))),
                                                                    CommonTypes.Location.Unknown,
                                                                    None))],
                                                                    (Sugartypes.TupleLit
                                                                    [(Sugartypes.Xml (
                                                                    "select",
                                                                    [("name",
                                                                    [(Sugartypes.Block
                                                                    ([],
                                                                    (Sugartypes.Var
                                                                    "fieldName")))
                                                                    ])],
                                                                    None,
                                                                    [(Sugartypes.Block
                                                                    ([],
                                                                    (Sugartypes.Var
                                                                    "optsXml")))
                                                                    ]));
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "pureE"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some _));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild }))
                                                                    ])),
                                                                    [(Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "hd"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some _));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some {  }))
                                                                    ])),
                                                                    [(Sugartypes.FnAppl (
                                                                    (Sugartypes.Var
                                                                    "retrieve"),
                                                                    [(Sugartypes.Var
                                                                    "selectedKey")
                                                                    ]))]))]))
                                                                    ])))));
                                                                    fun_location =
                                                                    CommonTypes.Location.Unknown;
                                                                    fun_signature =
                                                                    None;
                                                                    fun_unsafe_signature =
                                                                    false;
                                                                    fun_frozen =
                                                                    true })
                                                                   ],
                                                                 (Sugartypes.FreezeVar
                                                                    "_fun__g94")))
                                                             ])
                                                         ]
                                                       ))))));
                                              fun_location =
                                              CommonTypes.Location.Unknown;
                                              fun_signature = None;
                                              fun_unsafe_signature = false;
                                              fun_frozen = true })
                                          ],
                                        (Sugartypes.FreezeVar "_fun__g95")))
                                    ))))));
                           fun_location = CommonTypes.Location.Unknown;
                           fun_signature = None;
                           fun_unsafe_signature = false; fun_frozen = true })
                       ],
                     (Sugartypes.FreezeVar "_fun__g96")))
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.List
                      (Sugartypes.Datatype.Tuple
                         [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                           (Sugartypes.Datatype.Primitive
                              CommonTypes.Primitive.String)
                           ]));
                    (Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                       ]
                     ))
                  )),
               (Some ([(a, String)], a) ~> Formlet (a))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("choices", ([(a, String, Bool)]) ~> Formlet ([a]));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("items", [(_, String, Bool)]))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.InfixAppl (
                 ([Int; String;
                    (Xml, ([(String, String)]) {}~> (Xml, Maybe ([_])));
                    { |wild|_ }],
                  (Operators.BinaryOp.Name ">>=")),
                 (Sugartypes.Var "nextName"),
                 (Sugartypes.Block
                    ([(Sugartypes.Fun
                         { Sugartypes.fun_binder =
                           ("_fun__g101",
                            (String) {}~> State (Int,(Xml, ([(String, String)]) {}~> (Xml, Maybe ([_])))));
                           fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                           fun_definition =
                           ([],
                            ([[(Sugartypes.Pattern.Variable
                                  ("fieldName", String))
                                ]
                               ],
                             (Sugartypes.Block
                                ([],
                                 (Sugartypes.InfixAppl (
                                    ([Int; [String];
                                       (Xml, ([(String, String)]) {}~> (Xml, Maybe ([_])));
                                       { |wild }],
                                     (Operators.BinaryOp.Name ">>=")),
                                    (Sugartypes.FnAppl (
                                       (Sugartypes.TAppl (
                                          (Sugartypes.FreezeVar "sequence"),
                                          [((Sugartypes.Datatype.Type
                                               (Sugartypes.Datatype.TypeVar
                                                  ("$none", None, `Rigid))),
                                            (Some Int));
                                            ((Sugartypes.Datatype.Type
                                                (Sugartypes.Datatype.TypeVar
                                                   ("$none", None, `Rigid))),
                                             (Some String));
                                            ((Sugartypes.Datatype.Type
                                                (Sugartypes.Datatype.TypeVar
                                                   ("$none", None, `Rigid))),
                                             (Some {  }))
                                            ]
                                          )),
                                       [(Sugartypes.FnAppl (
                                           (Sugartypes.TAppl (
                                              (Sugartypes.FreezeVar
                                                 "concatMap"),
                                              [((Sugartypes.Datatype.Type
                                                   (Sugartypes.Datatype.TypeVar
                                                      ("$none", None, `Rigid))),
                                                (Some (_, String, Bool)));
                                                ((Sugartypes.Datatype.Type
                                                    (Sugartypes.Datatype.TypeVar
                                                       ("$none", None, `Rigid))),
                                                 (Some { wild }));
                                                ((Sugartypes.Datatype.Type
                                                    (Sugartypes.Datatype.TypeVar
                                                       ("$none", None, `Rigid))),
                                                 (Some State (Int,String)))
                                                ]
                                              )),
                                           [(Sugartypes.Block
                                               ([(Sugartypes.Fun
                                                    { Sugartypes.fun_binder =
                                                      ("_fun__g97",
                                                       ((_, String, Bool)) {}~> [State (Int,String)]);
                                                      fun_linearity =
                                                      CommonTypes.DeclaredLinearity.Unl;
                                                      fun_definition =
                                                      ([],
                                                       ([[(Sugartypes.Pattern.As (
                                                             ("_for__g6",
                                                              (_, String, Bool)),
                                                             (Sugartypes.Pattern.Variable
                                                                ("x",
                                                                 (_, String, Bool)))
                                                             ))
                                                           ]
                                                          ],
                                                        (Sugartypes.ListLit (
                                                           [(Sugartypes.Var
                                                               "nextName")
                                                             ],
                                                           (Some State (Int,String))
                                                           ))));
                                                      fun_location =
                                                      CommonTypes.Location.Unknown;
                                                      fun_signature = None;
                                                      fun_unsafe_signature =
                                                      false;
                                                      fun_frozen = true })
                                                  ],
                                                (Sugartypes.FreezeVar
                                                   "_fun__g97")));
                                             (Sugartypes.Var "items")]
                                           ))
                                         ]
                                       )),
                                    (Sugartypes.Block
                                       ([(Sugartypes.Fun
                                            { Sugartypes.fun_binder =
                                              ("_fun__g100",
                                               ([String]) {}~> State (Int,(Xml, ([(String, String)]) {}~> (Xml, Maybe ([_])))));
                                              fun_linearity =
                                              CommonTypes.DeclaredLinearity.Unl;
                                              fun_definition =
                                              ([],
                                               ([[(Sugartypes.Pattern.Variable
                                                     ("optKeys", [String]))
                                                   ]
                                                  ],
                                                (Sugartypes.Block
                                                   ([(Sugartypes.Val (
                                                        (Sugartypes.Pattern.Variable
                                                           ("keyedItems",
                                                            [(String, (_, String, Bool))])),
                                                        ([],
                                                         (Sugartypes.FnAppl (
                                                            (Sugartypes.TAppl (
                                                               (Sugartypes.FreezeVar
                                                                  "zip"),
                                                               [((Sugartypes.Datatype.Type
                                                                    (
                                                                    Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                 (Some String));
                                                                 ((Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                  (Some (_, String, Bool)));
                                                                 ((Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                  (Some {  }))
                                                                 ]
                                                               )),
                                                            [(Sugartypes.Var
                                                                "optKeys");
                                                              (Sugartypes.Var
                                                                 "items")
                                                              ]
                                                            ))),
                                                        CommonTypes.Location.Unknown,
                                                        None))
                                                      ],
                                                    (Sugartypes.FnAppl (
                                                       (Sugartypes.TAppl (
                                                          (Sugartypes.FreezeVar
                                                             "return"),
                                                          [((Sugartypes.Datatype.Type
                                                               (Sugartypes.Datatype.TypeVar
                                                                  ("$none",
                                                                   None,
                                                                   `Rigid))),
                                                            (Some (Xml, ([(String, String)]) {}~> (Xml, Maybe ([_])))));
                                                            ((Sugartypes.Datatype.Type
                                                                (Sugartypes.Datatype.TypeVar
                                                                   ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                             (Some { |wild }));
                                                            ((Sugartypes.Datatype.Type
                                                                (Sugartypes.Datatype.TypeVar
                                                                   ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                             (Some Int))
                                                            ]
                                                          )),
                                                       [(Sugartypes.TupleLit
                                                           [(Sugartypes.Block
                                                               ([(Sugartypes.Val (
                                                                    (
                                                                    Sugartypes.Pattern.Tuple
                                                                    [(Sugartypes.Pattern.Variable
                                                                    ("xml",
                                                                    Xml));
                                                                    (Sugartypes.Pattern.Variable
                                                                    ("retrieve",
                                                                    (String) -> [_]))
                                                                    ]),
                                                                    (
                                                                    [],
                                                                    (
                                                                    Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "preludeMultiOptionsKeyed"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some _));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some {  }));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |_::(Unl,Mono) }))
                                                                    ])),
                                                                    [(Sugartypes.Var
                                                                    "keyedItems")
                                                                    ]))),
                                                                    CommonTypes.Location.Unknown,
                                                                    None))
                                                                  ],
                                                                (Sugartypes.Xml (
                                                                   "select",
                                                                   [("name",
                                                                    [(Sugartypes.Block
                                                                    ([],
                                                                    (Sugartypes.Var
                                                                    "fieldName")))
                                                                    ]);
                                                                    ("multiple",
                                                                    [(Sugartypes.Constant
                                                                    (CommonTypes.Constant.String
                                                                    "multiple"))
                                                                    ])],
                                                                   None,
                                                                   [(Sugartypes.Block
                                                                    ([],
                                                                    (Sugartypes.Var
                                                                    "xml")))]
                                                                   ))));
                                                             (Sugartypes.Block
                                                                ([(Sugartypes.Fun
                                                                    { Sugartypes.fun_binder =
                                                                    ("_fun__g99",
                                                                    ([(String, String)]) {}~> (Xml, Maybe ([_])));
                                                                    fun_linearity =
                                                                    CommonTypes.DeclaredLinearity.Unl;
                                                                    fun_definition =
                                                                    (
                                                                    [],
                                                                    (
                                                                    [[(Sugartypes.Pattern.Variable
                                                                    ("env",
                                                                    [(String, String)]))
                                                                    ]],
                                                                    (
                                                                    Sugartypes.Block
                                                                    ([(Sugartypes.Val (
                                                                    (Sugartypes.Pattern.Variable
                                                                    ("selectedKeys",
                                                                    [String])),
                                                                    ([],
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "assocAll"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some String));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some {  }))
                                                                    ])),
                                                                    [(Sugartypes.Var
                                                                    "fieldName");
                                                                    (Sugartypes.Var
                                                                    "env")]))),
                                                                    CommonTypes.Location.Unknown,
                                                                    None));
                                                                    (Sugartypes.Val (
                                                                    (Sugartypes.Pattern.Variable
                                                                    ("keyedItems",
                                                                    [(String, (_, String, Bool))])),
                                                                    ([],
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "concatMap"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some (String, (_, String, Bool))));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { wild }));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some (String, (_, String, Bool))))
                                                                    ])),
                                                                    [(Sugartypes.Block
                                                                    ([(Sugartypes.Fun
                                                                    { Sugartypes.fun_binder =
                                                                    ("_fun__g98",
                                                                    ((String, (a, String, Bool))) {}~> [(String, (a, String, Bool))]);
                                                                    fun_linearity =
                                                                    CommonTypes.DeclaredLinearity.Unl;
                                                                    fun_definition =
                                                                    (
                                                                    [],
                                                                    (
                                                                    [[(Sugartypes.Pattern.As (
                                                                    ("_for__g7",
                                                                    (String, (_, String, Bool))),
                                                                    (Sugartypes.Pattern.Tuple
                                                                    [(Sugartypes.Pattern.Variable
                                                                    ("key",
                                                                    String));
                                                                    (Sugartypes.Pattern.Tuple
                                                                    [(Sugartypes.Pattern.Variable
                                                                    ("data",
                                                                    _));
                                                                    (Sugartypes.Pattern.Variable
                                                                    ("text",
                                                                    String));
                                                                    (Sugartypes.Pattern.Variable
                                                                    ("sel",
                                                                    Bool))])])
                                                                    ))]],
                                                                    (
                                                                    Sugartypes.ListLit (
                                                                    [(Sugartypes.TupleLit
                                                                    [(Sugartypes.Var
                                                                    "key");
                                                                    (Sugartypes.TupleLit
                                                                    [(Sugartypes.Var
                                                                    "data");
                                                                    (Sugartypes.Var
                                                                    "text");
                                                                    (Sugartypes.InfixAppl (
                                                                    ([String;
                                                                    {  }],
                                                                    (Operators.BinaryOp.Name
                                                                    "elem")),
                                                                    (Sugartypes.Var
                                                                    "key"),
                                                                    (Sugartypes.Var
                                                                    "selectedKeys")
                                                                    ))])])],
                                                                    (Some (String, (_, String, Bool)))
                                                                    ))));
                                                                    fun_location =
                                                                    CommonTypes.Location.Unknown;
                                                                    fun_signature =
                                                                    None;
                                                                    fun_unsafe_signature =
                                                                    false;
                                                                    fun_frozen =
                                                                    true })],
                                                                    (Sugartypes.FreezeVar
                                                                    "_fun__g98")));
                                                                    (Sugartypes.Var
                                                                    "keyedItems")
                                                                    ]))),
                                                                    CommonTypes.Location.Unknown,
                                                                    None));
                                                                    (Sugartypes.Val (
                                                                    (Sugartypes.Pattern.Tuple
                                                                    [(Sugartypes.Pattern.Variable
                                                                    ("xml",
                                                                    Xml));
                                                                    (Sugartypes.Pattern.Variable
                                                                    ("retrieve",
                                                                    (String) {}~> [_]))
                                                                    ]),
                                                                    ([],
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "preludeMultiOptionsKeyed"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some _));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some {  }));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild }))
                                                                    ])),
                                                                    [(Sugartypes.Var
                                                                    "keyedItems")
                                                                    ]))),
                                                                    CommonTypes.Location.Unknown,
                                                                    None))],
                                                                    (Sugartypes.TupleLit
                                                                    [(Sugartypes.Xml (
                                                                    "select",
                                                                    [("name",
                                                                    [(Sugartypes.Block
                                                                    ([],
                                                                    (Sugartypes.Var
                                                                    "fieldName")))
                                                                    ]);
                                                                    ("multiple",
                                                                    [(Sugartypes.Constant
                                                                    (CommonTypes.Constant.String
                                                                    "multiple"))
                                                                    ])],
                                                                    None,
                                                                    [(Sugartypes.Block
                                                                    ([],
                                                                    (Sugartypes.Var
                                                                    "xml")))]
                                                                    ));
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "pureE"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some [_]));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild }))
                                                                    ])),
                                                                    [(Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "concatMap"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some String));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild }));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some _))
                                                                    ])),
                                                                    [(Sugartypes.Var
                                                                    "retrieve");
                                                                    (Sugartypes.Var
                                                                    "selectedKeys")
                                                                    ]))]))])))));
                                                                    fun_location =
                                                                    CommonTypes.Location.Unknown;
                                                                    fun_signature =
                                                                    None;
                                                                    fun_unsafe_signature =
                                                                    false;
                                                                    fun_frozen =
                                                                    true })
                                                                   ],
                                                                 (Sugartypes.FreezeVar
                                                                    "_fun__g99")))
                                                             ])
                                                         ]
                                                       ))))));
                                              fun_location =
                                              CommonTypes.Location.Unknown;
                                              fun_signature = None;
                                              fun_unsafe_signature = false;
                                              fun_frozen = true })
                                          ],
                                        (Sugartypes.FreezeVar "_fun__g100")))
                                    ))))));
                           fun_location = CommonTypes.Location.Unknown;
                           fun_signature = None;
                           fun_unsafe_signature = false; fun_frozen = true })
                       ],
                     (Sugartypes.FreezeVar "_fun__g101")))
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.List
                      (Sugartypes.Datatype.Tuple
                         [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                           (Sugartypes.Datatype.Primitive
                              CommonTypes.Primitive.String);
                           (Sugartypes.Datatype.Primitive
                              CommonTypes.Primitive.Bool)
                           ]))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.List
                            (Sugartypes.Datatype.TypeVar ("a", None, `Rigid))))
                       ]
                     ))
                  )),
               (Some ([(a, String, Bool)]) ~> Formlet ([a]))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("choicesNone", ([(a, String)]) ~> Formlet ([a]));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("items", [(_, String)]))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "choices"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.FnAppl (
                     (Sugartypes.TAppl ((Sugartypes.FreezeVar "map"),
                        [((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some (_, String)));
                          ((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some { |wild|_ }));
                          ((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some (_, String, Bool)))
                          ]
                        )),
                     [(Sugartypes.Block
                         ([(Sugartypes.Fun
                              { Sugartypes.fun_binder =
                                ("_fun__g102",
                                 ((a, String)) ~> (a, String, Bool));
                                fun_linearity =
                                CommonTypes.DeclaredLinearity.Unl;
                                fun_definition =
                                ([],
                                 ([[(Sugartypes.Pattern.Tuple
                                       [(Sugartypes.Pattern.Variable ("v", _));
                                         (Sugartypes.Pattern.Variable
                                            ("text", String))
                                         ])
                                     ]
                                    ],
                                  (Sugartypes.Block
                                     ([],
                                      (Sugartypes.TupleLit
                                         [(Sugartypes.Var "v");
                                           (Sugartypes.Var "text");
                                           (Sugartypes.Constant
                                              (CommonTypes.Constant.Bool
                                                 false))
                                           ])))));
                                fun_location = CommonTypes.Location.Unknown;
                                fun_signature = None;
                                fun_unsafe_signature = false;
                                fun_frozen = true })
                            ],
                          (Sugartypes.FreezeVar "_fun__g102")));
                       (Sugartypes.Var "items")]
                     ))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.List
                      (Sugartypes.Datatype.Tuple
                         [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                           (Sugartypes.Datatype.Primitive
                              CommonTypes.Primitive.String)
                           ]))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.List
                            (Sugartypes.Datatype.TypeVar ("a", None, `Rigid))))
                       ]
                     ))
                  )),
               (Some ([(a, String)]) ~> Formlet ([a]))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("choice", ([(a, String)]) ~> Formlet (a));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("items", [(_, String)]))]],
          (Sugartypes.Block
             ([(Sugartypes.Val (
                  (Sugartypes.Pattern.Tuple
                     [(Sugartypes.Pattern.Variable ("selected", _));
                       Sugartypes.Pattern.Any]),
                  ([],
                   (Sugartypes.FnAppl (
                      (Sugartypes.TAppl ((Sugartypes.FreezeVar "hd"),
                         [((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some (_, String)));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { |_ }))
                           ]
                         )),
                      [(Sugartypes.Var "items")]))),
                  CommonTypes.Location.Unknown, None))
                ],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "choiceDefault"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Var "items"); (Sugartypes.Var "selected")]))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.List
                      (Sugartypes.Datatype.Tuple
                         [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                           (Sugartypes.Datatype.Primitive
                              CommonTypes.Primitive.String)
                           ]))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                       ]
                     ))
                  )),
               (Some ([(a, String)]) ~> Formlet (a))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Typenames
      [("Either",
        [(("a", (None, None), `Rigid), (Some a));
          (("b", (None, None), `Rigid), (Some a))],
        ((Sugartypes.Datatype.Variant
            ([("Left",
               (Sugartypes.Datatype.Present
                  (Sugartypes.Datatype.TypeVar ("a", None, `Rigid))));
               ("Right",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))))
               ],
             Sugartypes.Datatype.Closed)),
         (Some [|Left:_|Right:_|])),
        File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 1085, columns 28534 to 28580)
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("satisfies",
         (Formlet (a), (a, Xml) {}~> Either (Xml,Xml)) -> Formlet (a));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("f", Formlet (_)));
             (Sugartypes.Pattern.Variable
                ("validate", (_, Xml) {}~> Either (Xml,Xml)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.InfixAppl (
                 ([Gen; (Xml, CheckedCollector (_));
                    (Xml, (Env) {}~> (Xml, [|Just:_|Nothing|])); { |_ }],
                  (Operators.BinaryOp.Name ">>=")),
                 (Sugartypes.Var "f"),
                 (Sugartypes.Block
                    ([(Sugartypes.Fun
                         { Sugartypes.fun_binder =
                           ("_fun__g104",
                            ((Xml, (Env) {}~> (Xml, [|Just:a|Nothing|]))) {}~> State (Gen,(Xml, (Env) {}~> (Xml, [|Just:a|Nothing|]))));
                           fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                           fun_definition =
                           ([],
                            ([[(Sugartypes.Pattern.Tuple
                                  [(Sugartypes.Pattern.Variable ("xml", Xml));
                                    (Sugartypes.Pattern.Variable
                                       ("collector",
                                        (Env) {}~> (Xml, [|Just:_|Nothing|])))
                                    ])
                                ]
                               ],
                             (Sugartypes.Block
                                ([],
                                 (Sugartypes.FnAppl (
                                    (Sugartypes.TAppl (
                                       (Sugartypes.FreezeVar "return"),
                                       [((Sugartypes.Datatype.Type
                                            (Sugartypes.Datatype.TypeVar
                                               ("$none", None, `Rigid))),
                                         (Some (Xml, (Env) {}~> (Xml, [|Just:_|Nothing|]))));
                                         ((Sugartypes.Datatype.Type
                                             (Sugartypes.Datatype.TypeVar
                                                ("$none", None, `Rigid))),
                                          (Some { |wild }));
                                         ((Sugartypes.Datatype.Type
                                             (Sugartypes.Datatype.TypeVar
                                                ("$none", None, `Rigid))),
                                          (Some Gen))
                                         ]
                                       )),
                                    [(Sugartypes.TupleLit
                                        [(Sugartypes.Var "xml");
                                          (Sugartypes.Block
                                             ([(Sugartypes.Fun
                                                  { Sugartypes.fun_binder =
                                                    ("_fun__g103",
                                                     (Env) {}~> (Xml, [|Just:_|Nothing|]));
                                                    fun_linearity =
                                                    CommonTypes.DeclaredLinearity.Unl;
                                                    fun_definition =
                                                    ([],
                                                     ([[(Sugartypes.Pattern.Variable
                                                           ("env", Env))
                                                         ]
                                                        ],
                                                      (Sugartypes.Block
                                                         ([(Sugartypes.Val (
                                                              (Sugartypes.Pattern.Tuple
                                                                 [(Sugartypes.Pattern.Variable
                                                                    ("cxml",
                                                                    Xml));
                                                                   (Sugartypes.Pattern.Variable
                                                                    ("val",
                                                                    [|Just:_|Nothing|]))
                                                                   ]),
                                                              ([],
                                                               (Sugartypes.FnAppl (
                                                                  (Sugartypes.Var
                                                                    "collector"),
                                                                  [(Sugartypes.Var
                                                                    "env")]
                                                                  ))),
                                                              CommonTypes.Location.Unknown,
                                                              None))
                                                            ],
                                                          (Sugartypes.Switch (
                                                             (Sugartypes.Var
                                                                "val"),
                                                             [((Sugartypes.Pattern.Variant (
                                                                  "Nothing",
                                                                  None)),
                                                               (Sugartypes.Block
                                                                  ([],
                                                                   (Sugartypes.TupleLit
                                                                    [(Sugartypes.Var
                                                                    "cxml");
                                                                    (Sugartypes.ConstructorLit (
                                                                    "Nothing",
                                                                    None,
                                                                    (Some [|Nothing|Just:_|])
                                                                    ))]))));
                                                               ((Sugartypes.Pattern.Variant (
                                                                   "Just",
                                                                   (Some (
                                                                   Sugartypes.Pattern.Variable
                                                                    ("v", _)))
                                                                   )),
                                                                (Sugartypes.Block
                                                                   ([],
                                                                    (
                                                                    Sugartypes.Switch (
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.Var
                                                                    "validate"),
                                                                    [(Sugartypes.Var
                                                                    "v");
                                                                    (Sugartypes.Var
                                                                    "cxml")]
                                                                    )),
                                                                    [((
                                                                    Sugartypes.Pattern.Variant (
                                                                    "Right",
                                                                    (Some (
                                                                    Sugartypes.Pattern.Variable
                                                                    ("xml",
                                                                    Xml))))),
                                                                    (Sugartypes.Block
                                                                    ([],
                                                                    (Sugartypes.TupleLit
                                                                    [(Sugartypes.Var
                                                                    "xml");
                                                                    (Sugartypes.ConstructorLit (
                                                                    "Nothing",
                                                                    None,
                                                                    (Some [|Nothing|Just:_|])
                                                                    ))]))));
                                                                    ((
                                                                    Sugartypes.Pattern.Variant (
                                                                    "Left",
                                                                    (Some (
                                                                    Sugartypes.Pattern.Variable
                                                                    ("xml",
                                                                    Xml))))),
                                                                    (Sugartypes.Block
                                                                    ([],
                                                                    (Sugartypes.TupleLit
                                                                    [(Sugartypes.Var
                                                                    "xml");
                                                                    (Sugartypes.ConstructorLit (
                                                                    "Just",
                                                                    (Some (
                                                                    Sugartypes.TupleLit
                                                                    [(Sugartypes.Var
                                                                    "v")])),
                                                                    (Some [|Just:_|Nothing|])
                                                                    ))]))))],
                                                                    (Some (Xml, [|Just:_|Nothing|]))
                                                                    )))))
                                                               ],
                                                             (Some (Xml, [|Just:_|Nothing|]))
                                                             ))))));
                                                    fun_location =
                                                    CommonTypes.Location.Unknown;
                                                    fun_signature = None;
                                                    fun_unsafe_signature =
                                                    false; fun_frozen = true
                                                    })
                                                ],
                                              (Sugartypes.FreezeVar
                                                 "_fun__g103")))
                                          ])
                                      ]
                                    ))))));
                           fun_location = CommonTypes.Location.Unknown;
                           fun_signature = None;
                           fun_unsafe_signature = false; fun_frozen = true })
                       ],
                     (Sugartypes.FreezeVar "_fun__g104")))
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Formlet",
                      [(Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                        ]
                      ));
                    (Sugartypes.Datatype.Function (
                       [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                         (Sugartypes.Datatype.TypeApplication ("Xml", []))],
                       ([("wild",
                          (Sugartypes.Datatype.Present
                             Sugartypes.Datatype.Unit))
                          ],
                        Sugartypes.Datatype.Closed),
                       (Sugartypes.Datatype.TypeApplication ("Either",
                          [(Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeApplication ("Xml", 
                                 [])));
                            (Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeApplication ("Xml",
                                  [])))
                            ]
                          ))
                       ))
                    ],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                       ]
                     ))
                  )),
               (Some (Formlet (a), (a, Xml) {}~> Either (Xml,Xml)) -> Formlet (a))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("errorMsg",
         ((a) ~b~> Bool, (a) ~b~> String) -> (a, Xml) ~b~> Either (Xml,Xml));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("f", (_) ~> Bool));
             (Sugartypes.Pattern.Variable ("msg", (_) ~> String))]
            ],
          (Sugartypes.Block
             ([(Sugartypes.Fun
                  { Sugartypes.fun_binder =
                    ("_fun__g105", (_, Xml) ~> Either (Xml,Xml));
                    fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                    fun_definition =
                    ([],
                     ([[(Sugartypes.Pattern.Variable ("x", _));
                         (Sugartypes.Pattern.Variable ("xml", Xml))]
                        ],
                      (Sugartypes.Block
                         ([],
                          (Sugartypes.Conditional (
                             (Sugartypes.FnAppl ((Sugartypes.Var "f"),
                                [(Sugartypes.Var "x")])),
                             (Sugartypes.ConstructorLit ("Left",
                                (Some (Sugartypes.TupleLit
                                         [(Sugartypes.Var "xml")])),
                                (Some [|Left:Xml|Right:[XmlItem]|]))),
                             (Sugartypes.ConstructorLit ("Right",
                                (Some (Sugartypes.TupleLit
                                         [(Sugartypes.InfixAppl (
                                             ([XmlItem; { |wild|_ }],
                                              (Operators.BinaryOp.Name "++")),
                                             (Sugartypes.Xml ("span",
                                                [("class",
                                                  [(Sugartypes.Constant
                                                      (CommonTypes.Constant.String
                                                         "errorinput"))
                                                    ])
                                                  ],
                                                None,
                                                [(Sugartypes.Block
                                                    ([],
                                                     (Sugartypes.Var "xml")));
                                                  (Sugartypes.TextNode " ")]
                                                )),
                                             (Sugartypes.Xml ("span",
                                                [("class",
                                                  [(Sugartypes.Constant
                                                      (CommonTypes.Constant.String
                                                         "error"))
                                                    ])
                                                  ],
                                                None,
                                                [(Sugartypes.TextNode " ");
                                                  (Sugartypes.Block
                                                     ([],
                                                      (Sugartypes.FnAppl (
                                                         (Sugartypes.TAppl (
                                                            (Sugartypes.FreezeVar
                                                               "stringToXml"),
                                                            [((Sugartypes.Datatype.Type
                                                                 (Sugartypes.Datatype.TypeVar
                                                                    (
                                                                    "$none",
                                                                    None,
                                                                    `Rigid))),
                                                              (Some { |wild|_ }))
                                                              ]
                                                            )),
                                                         [(Sugartypes.FnAppl (
                                                             (Sugartypes.Var
                                                                "msg"),
                                                             [(Sugartypes.Var
                                                                 "x")
                                                               ]
                                                             ))
                                                           ]
                                                         ))))
                                                  ]
                                                ))
                                             ))
                                           ])),
                                (Some [|Right:[XmlItem]|Left:Xml|])))
                             ))))));
                    fun_location = CommonTypes.Location.Unknown;
                    fun_signature = None; fun_unsafe_signature = false;
                    fun_frozen = false })
                ],
              (Sugartypes.FreezeVar "_fun__g105")))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Function (
                      [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                      ([("wild",
                         (Sugartypes.Datatype.Present
                            Sugartypes.Datatype.Unit))
                         ],
                       (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                      (Sugartypes.Datatype.Primitive
                         CommonTypes.Primitive.Bool)
                      ));
                    (Sugartypes.Datatype.Function (
                       [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                       ([("wild",
                          (Sugartypes.Datatype.Present
                             Sugartypes.Datatype.Unit))
                          ],
                        (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                       (Sugartypes.Datatype.Primitive
                          CommonTypes.Primitive.String)
                       ))
                    ],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                       (Sugartypes.Datatype.TypeApplication ("Xml", []))],
                     ([("wild",
                        (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                        ],
                      (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                     (Sugartypes.Datatype.TypeApplication ("Either",
                        [(Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeApplication ("Xml", [])));
                          (Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeApplication ("Xml", 
                                [])))
                          ]
                        ))
                     ))
                  )),
               (Some ((a) ~b~> Bool, (a) ~b~> String) -> (a, Xml) ~b~> Either (Xml,Xml))));
        fun_unsafe_signature = false; fun_frozen = true });
   Sugartypes.Infix;
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("transform",
         (Formlet (a), (a) {}~> Bool, (a) {}~> String, (a) {}~> b) -> Formlet (b));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("f", Formlet (_)));
             (Sugartypes.Pattern.Variable ("predicate", (_) {}~> Bool));
             (Sugartypes.Pattern.Variable ("error", (_) {}~> String));
             (Sugartypes.Pattern.Variable ("g", (_) {}~> _))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "@@@"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some _));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.FnAppl (
                     (Sugartypes.TAppl ((Sugartypes.FreezeVar "@@@"),
                        [((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some _));
                          ((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some _));
                          ((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some { |_ }))
                          ]
                        )),
                     [(Sugartypes.InfixAppl (
                         ([_; { |_ }], (Operators.BinaryOp.Name "satisfies")),
                         (Sugartypes.Var "f"),
                         (Sugartypes.TupleLit
                            [(Sugartypes.InfixAppl (
                                ([_; {  }; { |_ }],
                                 (Operators.BinaryOp.Name "errorMsg")),
                                (Sugartypes.Var "predicate"),
                                (Sugartypes.Var "error")))
                              ])
                         ));
                       (Sugartypes.FnAppl (
                          (Sugartypes.TAppl ((Sugartypes.FreezeVar "pure"),
                             [((Sugartypes.Datatype.Type
                                  (Sugartypes.Datatype.TypeVar
                                     ("$none", None, `Rigid))),
                               (Some (a) {}~> a));
                               ((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { |_ }))
                               ]
                             )),
                          [(Sugartypes.Block
                              ([(Sugartypes.Fun
                                   { Sugartypes.fun_binder =
                                     ("_fun__g106", (a) {}~> a);
                                     fun_linearity =
                                     CommonTypes.DeclaredLinearity.Unl;
                                     fun_definition =
                                     ([],
                                      ([[(Sugartypes.Pattern.As (
                                            ("_formlet__g17", _),
                                            (Sugartypes.Pattern.Variable
                                               ("v", _))
                                            ))
                                          ]
                                         ],
                                       (Sugartypes.TupleLit
                                          [(Sugartypes.Var "_formlet__g17")])));
                                     fun_location =
                                     CommonTypes.Location.Unknown;
                                     fun_signature = None;
                                     fun_unsafe_signature = false;
                                     fun_frozen = true })
                                 ],
                               (Sugartypes.FreezeVar "_fun__g106")))
                            ]
                          ))
                       ]
                     ));
                   (Sugartypes.FnAppl (
                      (Sugartypes.TAppl ((Sugartypes.FreezeVar "pure"),
                         [((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some (_) {}~> _));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { |_ }))
                           ]
                         )),
                      [(Sugartypes.Block
                          ([(Sugartypes.Fun
                               { Sugartypes.fun_binder =
                                 ("_fun__g107", (_) {}~> _);
                                 fun_linearity =
                                 CommonTypes.DeclaredLinearity.Unl;
                                 fun_definition =
                                 ([],
                                  ([[(Sugartypes.Pattern.As (
                                        ("_formlet__g16", _),
                                        (Sugartypes.Pattern.Variable ("v", _))
                                        ))
                                      ]
                                     ],
                                   (Sugartypes.FnAppl ((Sugartypes.Var "g"),
                                      [(Sugartypes.Var "v")]))));
                                 fun_location = CommonTypes.Location.Unknown;
                                 fun_signature = None;
                                 fun_unsafe_signature = false;
                                 fun_frozen = true })
                             ],
                           (Sugartypes.FreezeVar "_fun__g107")))
                        ]
                      ))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Formlet",
                      [(Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                        ]
                      ));
                    (Sugartypes.Datatype.Function (
                       [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                       ([("wild",
                          (Sugartypes.Datatype.Present
                             Sugartypes.Datatype.Unit))
                          ],
                        Sugartypes.Datatype.Closed),
                       (Sugartypes.Datatype.Primitive
                          CommonTypes.Primitive.Bool)
                       ));
                    (Sugartypes.Datatype.Function (
                       [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                       ([("wild",
                          (Sugartypes.Datatype.Present
                             Sugartypes.Datatype.Unit))
                          ],
                        Sugartypes.Datatype.Closed),
                       (Sugartypes.Datatype.Primitive
                          CommonTypes.Primitive.String)
                       ));
                    (Sugartypes.Datatype.Function (
                       [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                       ([("wild",
                          (Sugartypes.Datatype.Present
                             Sugartypes.Datatype.Unit))
                          ],
                        Sugartypes.Datatype.Closed),
                       (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))))
                    ],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("b", None, `Rigid)))
                       ]
                     ))
                  )),
               (Some (Formlet (a), (a) {}~> Bool, (a) {}~> String, (a) {}~> b) -> Formlet (b))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Val (
      (Sugartypes.Pattern.Variable ("inputInt", Formlet (Int))),
      ([],
       (Sugartypes.Block
          ([(Sugartypes.Fun
               { Sugartypes.fun_binder =
                 ("_fun__g109",
                  (Gen) {}~> ((Xml, CheckedCollector (Int)), Gen));
                 fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                 fun_definition =
                 ([],
                  ([[(Sugartypes.Pattern.Variable ("gen", Gen))]],
                   (Sugartypes.Block
                      ([],
                       (Sugartypes.FnAppl (
                          (Sugartypes.FnAppl (
                             (Sugartypes.TAppl (
                                (Sugartypes.FreezeVar "transform"),
                                [((Sugartypes.Datatype.Type
                                     (Sugartypes.Datatype.TypeVar
                                        ("$none", None, `Rigid))),
                                  (Some String));
                                  ((Sugartypes.Datatype.Type
                                      (Sugartypes.Datatype.TypeVar
                                         ("$none", None, `Rigid))),
                                   (Some Int));
                                  ((Sugartypes.Datatype.Type
                                      (Sugartypes.Datatype.TypeVar
                                         ("$none", None, `Rigid))),
                                   (Some { |wild }))
                                  ]
                                )),
                             [(Sugartypes.Var "input");
                               (Sugartypes.TAppl (
                                  (Sugartypes.FreezeVar "isInt"),
                                  [((Sugartypes.Datatype.Type
                                       (Sugartypes.Datatype.TypeVar
                                          ("$none", None, `Rigid))),
                                    (Some { |wild }))]
                                  ));
                               (Sugartypes.Block
                                  ([(Sugartypes.Fun
                                       { Sugartypes.fun_binder =
                                         ("_fun__g108", (String) {}~> String);
                                         fun_linearity =
                                         CommonTypes.DeclaredLinearity.Unl;
                                         fun_definition =
                                         ([],
                                          ([[(Sugartypes.Pattern.Variable
                                                ("s", String))
                                              ]
                                             ],
                                           (Sugartypes.Block
                                              ([],
                                               (Sugartypes.InfixAppl (
                                                  ([{ |wild }],
                                                   (Operators.BinaryOp.Name
                                                      "^^")),
                                                  (Sugartypes.Var "s"),
                                                  (Sugartypes.Constant
                                                     (CommonTypes.Constant.String
                                                        " is not an integer"))
                                                  ))))));
                                         fun_location =
                                         CommonTypes.Location.Unknown;
                                         fun_signature = None;
                                         fun_unsafe_signature = false;
                                         fun_frozen = true })
                                     ],
                                   (Sugartypes.FreezeVar "_fun__g108")));
                               (Sugartypes.TAppl (
                                  (Sugartypes.FreezeVar "stringToInt"),
                                  [((Sugartypes.Datatype.Type
                                       (Sugartypes.Datatype.TypeVar
                                          ("$none", None, `Rigid))),
                                    (Some { |wild }))]
                                  ))
                               ]
                             )),
                          [(Sugartypes.Var "gen")]))))));
                 fun_location = CommonTypes.Location.Unknown;
                 fun_signature = None; fun_unsafe_signature = false;
                 fun_frozen = true })
             ],
           (Sugartypes.FreezeVar "_fun__g109")))),
      CommonTypes.Location.Unknown,
      (Some ((Sugartypes.Datatype.TypeApplication ("Formlet",
                [(Sugartypes.Datatype.Type
                    (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int))
                  ]
                )),
             (Some Formlet (Int))))
      ));
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("inputIntA", (Attributes) ~> Formlet (Int));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("attributes", Attributes))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "transform"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some String));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some Int));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |wild|_ }))
                      ]
                    )),
                 [(Sugartypes.FnAppl (
                     (Sugartypes.TAppl ((Sugartypes.FreezeVar "inputA"),
                        [((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some { |_ }))]
                        )),
                     [(Sugartypes.Var "attributes")]));
                   (Sugartypes.TAppl ((Sugartypes.FreezeVar "isInt"),
                      [((Sugartypes.Datatype.Type
                           (Sugartypes.Datatype.TypeVar
                              ("$none", None, `Rigid))),
                        (Some { |wild }))]
                      ));
                   (Sugartypes.Block
                      ([(Sugartypes.Fun
                           { Sugartypes.fun_binder =
                             ("_fun__g110", (String) {}~> String);
                             fun_linearity =
                             CommonTypes.DeclaredLinearity.Unl;
                             fun_definition =
                             ([],
                              ([[(Sugartypes.Pattern.Variable ("s", String))]
                                 ],
                               (Sugartypes.Block
                                  ([],
                                   (Sugartypes.InfixAppl (
                                      ([{ |wild }],
                                       (Operators.BinaryOp.Name "^^")),
                                      (Sugartypes.Var "s"),
                                      (Sugartypes.Constant
                                         (CommonTypes.Constant.String
                                            " is not an integer"))
                                      ))))));
                             fun_location = CommonTypes.Location.Unknown;
                             fun_signature = None;
                             fun_unsafe_signature = false; fun_frozen = true
                             })
                         ],
                       (Sugartypes.FreezeVar "_fun__g110")));
                   (Sugartypes.TAppl ((Sugartypes.FreezeVar "stringToInt"),
                      [((Sugartypes.Datatype.Type
                           (Sugartypes.Datatype.TypeVar
                              ("$none", None, `Rigid))),
                        (Some { |wild }))]
                      ))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Attributes", []))],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.Primitive
                            CommonTypes.Primitive.Int))
                       ]
                     ))
                  )),
               (Some (Attributes) ~> Formlet (Int))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("inputIntValue", (Int) ~> Formlet (Int));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("v", Int))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "transform"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some String));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some Int));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |wild|_ }))
                      ]
                    )),
                 [(Sugartypes.FnAppl (
                     (Sugartypes.TAppl ((Sugartypes.FreezeVar "inputA"),
                        [((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some { |_ }))]
                        )),
                     [(Sugartypes.ListLit (
                         [(Sugartypes.TupleLit
                             [(Sugartypes.Constant
                                 (CommonTypes.Constant.String "value"));
                               (Sugartypes.FnAppl (
                                  (Sugartypes.TAppl (
                                     (Sugartypes.FreezeVar "intToString"),
                                     [((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some { |wild|_ }))]
                                     )),
                                  [(Sugartypes.Var "v")]))
                               ])
                           ],
                         (Some (String, String))))
                       ]
                     ));
                   (Sugartypes.TAppl ((Sugartypes.FreezeVar "isInt"),
                      [((Sugartypes.Datatype.Type
                           (Sugartypes.Datatype.TypeVar
                              ("$none", None, `Rigid))),
                        (Some { |wild }))]
                      ));
                   (Sugartypes.Block
                      ([(Sugartypes.Fun
                           { Sugartypes.fun_binder =
                             ("_fun__g111", (String) {}~> String);
                             fun_linearity =
                             CommonTypes.DeclaredLinearity.Unl;
                             fun_definition =
                             ([],
                              ([[(Sugartypes.Pattern.Variable ("s", String))]
                                 ],
                               (Sugartypes.Block
                                  ([],
                                   (Sugartypes.InfixAppl (
                                      ([{ |wild }],
                                       (Operators.BinaryOp.Name "^^")),
                                      (Sugartypes.Var "s"),
                                      (Sugartypes.Constant
                                         (CommonTypes.Constant.String
                                            "is not an integer"))
                                      ))))));
                             fun_location = CommonTypes.Location.Unknown;
                             fun_signature = None;
                             fun_unsafe_signature = false; fun_frozen = true
                             })
                         ],
                       (Sugartypes.FreezeVar "_fun__g111")));
                   (Sugartypes.TAppl ((Sugartypes.FreezeVar "stringToInt"),
                      [((Sugartypes.Datatype.Type
                           (Sugartypes.Datatype.TypeVar
                              ("$none", None, `Rigid))),
                        (Some { |wild }))]
                      ))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Formlet",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.Primitive
                            CommonTypes.Primitive.Int))
                       ]
                     ))
                  )),
               (Some (Int) ~> Formlet (Int))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Val (
      (Sugartypes.Pattern.Variable ("inputFloat", Formlet (Float))),
      ([],
       (Sugartypes.Block
          ([(Sugartypes.Fun
               { Sugartypes.fun_binder =
                 ("_fun__g113",
                  (Gen) {}~> ((Xml, CheckedCollector (Float)), Gen));
                 fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                 fun_definition =
                 ([],
                  ([[(Sugartypes.Pattern.Variable ("gen", Gen))]],
                   (Sugartypes.Block
                      ([],
                       (Sugartypes.FnAppl (
                          (Sugartypes.FnAppl (
                             (Sugartypes.TAppl (
                                (Sugartypes.FreezeVar "transform"),
                                [((Sugartypes.Datatype.Type
                                     (Sugartypes.Datatype.TypeVar
                                        ("$none", None, `Rigid))),
                                  (Some String));
                                  ((Sugartypes.Datatype.Type
                                      (Sugartypes.Datatype.TypeVar
                                         ("$none", None, `Rigid))),
                                   (Some Float));
                                  ((Sugartypes.Datatype.Type
                                      (Sugartypes.Datatype.TypeVar
                                         ("$none", None, `Rigid))),
                                   (Some { |wild }))
                                  ]
                                )),
                             [(Sugartypes.Var "input");
                               (Sugartypes.TAppl (
                                  (Sugartypes.FreezeVar "isFloat"),
                                  [((Sugartypes.Datatype.Type
                                       (Sugartypes.Datatype.TypeVar
                                          ("$none", None, `Rigid))),
                                    (Some { |wild }))]
                                  ));
                               (Sugartypes.Block
                                  ([(Sugartypes.Fun
                                       { Sugartypes.fun_binder =
                                         ("_fun__g112", (String) {}~> String);
                                         fun_linearity =
                                         CommonTypes.DeclaredLinearity.Unl;
                                         fun_definition =
                                         ([],
                                          ([[(Sugartypes.Pattern.Variable
                                                ("s", String))
                                              ]
                                             ],
                                           (Sugartypes.Block
                                              ([],
                                               (Sugartypes.InfixAppl (
                                                  ([{ |wild }],
                                                   (Operators.BinaryOp.Name
                                                      "^^")),
                                                  (Sugartypes.Var "s"),
                                                  (Sugartypes.Constant
                                                     (CommonTypes.Constant.String
                                                        " is not a float"))
                                                  ))))));
                                         fun_location =
                                         CommonTypes.Location.Unknown;
                                         fun_signature = None;
                                         fun_unsafe_signature = false;
                                         fun_frozen = true })
                                     ],
                                   (Sugartypes.FreezeVar "_fun__g112")));
                               (Sugartypes.TAppl (
                                  (Sugartypes.FreezeVar "stringToFloat"),
                                  [((Sugartypes.Datatype.Type
                                       (Sugartypes.Datatype.TypeVar
                                          ("$none", None, `Rigid))),
                                    (Some { |wild }))]
                                  ))
                               ]
                             )),
                          [(Sugartypes.Var "gen")]))))));
                 fun_location = CommonTypes.Location.Unknown;
                 fun_signature = None; fun_unsafe_signature = false;
                 fun_frozen = true })
             ],
           (Sugartypes.FreezeVar "_fun__g113")))),
      CommonTypes.Location.Unknown,
      (Some ((Sugartypes.Datatype.TypeApplication ("Formlet",
                [(Sugartypes.Datatype.Type
                    (Sugartypes.Datatype.Primitive
                       CommonTypes.Primitive.Float))
                  ]
                )),
             (Some Formlet (Float))))
      ));
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("freshResource", () ~> ());
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[]],
          (Sugartypes.Block
             ([],
              (Sugartypes.Escape (("esc", (()) ~> _),
                 (Sugartypes.Block
                    ([(Sugartypes.Exp
                         (Sugartypes.FnAppl (
                            (Sugartypes.TAppl (
                               (Sugartypes.FreezeVar "redirect"),
                               [((Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("$none", None, `Rigid))),
                                 (Some { |_ }))]
                               )),
                            [(Sugartypes.InfixAppl (
                                ([{ |wild|_ }],
                                 (Operators.BinaryOp.Name "^^")),
                                (Sugartypes.Constant
                                   (CommonTypes.Constant.String "?_k=")),
                                (Sugartypes.FnAppl (
                                   (Sugartypes.TAppl (
                                      (Sugartypes.FreezeVar
                                         "unsafePickleCont"),
                                      [((Sugartypes.Datatype.Type
                                           (Sugartypes.Datatype.TypeVar
                                              ("$none", None, `Rigid))),
                                        (Some { |wild|_ }));
                                        ((Sugartypes.Datatype.Type
                                            (Sugartypes.Datatype.TypeVar
                                               ("$none", None, `Rigid))),
                                         (Some _));
                                        ((Sugartypes.Datatype.Type
                                            (Sugartypes.Datatype.TypeVar
                                               ("$none", None, `Rigid))),
                                         (Some { |_ }))
                                        ]
                                      )),
                                   [(Sugartypes.Block
                                       ([(Sugartypes.Fun
                                            { Sugartypes.fun_binder =
                                              ("_fun__g114", () ~> _);
                                              fun_linearity =
                                              CommonTypes.DeclaredLinearity.Unl;
                                              fun_definition =
                                              ([],
                                               ([[]],
                                                (Sugartypes.Block
                                                   ([],
                                                    (Sugartypes.FnAppl (
                                                       (Sugartypes.Var "esc"),
                                                       [(Sugartypes.RecordLit (
                                                           [], None))
                                                         ]
                                                       ))))));
                                              fun_location =
                                              CommonTypes.Location.Unknown;
                                              fun_signature = None;
                                              fun_unsafe_signature = false;
                                              fun_frozen = true })
                                          ],
                                        (Sugartypes.FreezeVar "_fun__g114")))
                                     ]
                                   ))
                                ))
                              ]
                            )))
                       ],
                     (Sugartypes.FnAppl (
                        (Sugartypes.TAppl ((Sugartypes.FreezeVar "exit"),
                           [((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some [_::Any]));
                             ((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some { |_ }));
                             ((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some ()))
                             ]
                           )),
                        [(Sugartypes.ListLit ([], (Some _::Any)))]))))
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function ([],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  Sugartypes.Datatype.Unit)),
               (Some () ~> ())));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("sendSuspend", (((a) ~> Page) ~c~> Page) ~c~> a);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("pagef", ((_) ~> Page) ~> Page))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.Escape (("returnf", (_) ~> Page),
                 (Sugartypes.Block
                    ([],
                     (Sugartypes.FnAppl (
                        (Sugartypes.TAppl ((Sugartypes.FreezeVar "exit"),
                           [((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some Xml));
                             ((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some { |_ }));
                             ((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some _))
                             ]
                           )),
                        [(Sugartypes.FnAppl (
                            (Sugartypes.TAppl (
                               (Sugartypes.FreezeVar "renderPage"),
                               [((Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("$none", None, `Rigid))),
                                 (Some { |_ }))]
                               )),
                            [(Sugartypes.FnAppl ((Sugartypes.Var "pagef"),
                                [(Sugartypes.Var "returnf")]))
                              ]
                            ))
                          ]
                        ))))
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Function (
                      [(Sugartypes.Datatype.Function (
                          [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                          ([("wild",
                             (Sugartypes.Datatype.Present
                                Sugartypes.Datatype.Unit))
                             ],
                           (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                          (Sugartypes.Datatype.TypeApplication ("Page", []))
                          ))
                        ],
                      ([("wild",
                         (Sugartypes.Datatype.Present
                            Sugartypes.Datatype.Unit))
                         ],
                       (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                      (Sugartypes.Datatype.TypeApplication ("Page", []))))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                  (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))),
               (Some (((a) ~> Page) ~c~> Page) ~c~> a)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("fork",
         ((a::Session) {SessionFail:() {}-> [||]}~> ()) ~> ~a::Session);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Session; a::Row],
         ([[(Sugartypes.Pattern.Variable
               ("f", (_::Session) {SessionFail:() {}-> [||]}~> ()))
             ]
            ],
          (Sugartypes.Block
             ([(Sugartypes.Val (
                  (Sugartypes.Pattern.Variable ("ap", AP (_::Session))),
                  ([],
                   (Sugartypes.FnAppl (
                      (Sugartypes.TAppl ((Sugartypes.FreezeVar "new"),
                         [((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some { |_ }));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some _::Session))
                           ]
                         )),
                      []))),
                  CommonTypes.Location.Unknown, None));
                (Sugartypes.Val (Sugartypes.Pattern.Any,
                   ([],
                    (Sugartypes.FnAppl (
                       (Sugartypes.TAppl (
                          (Sugartypes.FreezeVar "spawnAngelAt"),
                          [((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { |SessionFail:() {}-> [||] }));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some ()));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some { wild|_ }))
                            ]
                          )),
                       [(Sugartypes.FnAppl (
                           (Sugartypes.TAppl ((Sugartypes.FreezeVar "here"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { wild|_ }))]
                              )),
                           []));
                         (Sugartypes.Block
                            ([(Sugartypes.Fun
                                 { Sugartypes.fun_binder =
                                   ("_fun__g115",
                                    () {|SessionFail:() {}-> [||]}~@ ());
                                   fun_linearity =
                                   CommonTypes.DeclaredLinearity.Lin;
                                   fun_definition =
                                   ([],
                                    ([[]],
                                     (Sugartypes.Block
                                        ([],
                                         (Sugartypes.FnAppl (
                                            (Sugartypes.Var "f"),
                                            [(Sugartypes.FnAppl (
                                                (Sugartypes.TAppl (
                                                   (Sugartypes.FreezeVar
                                                      "accept"),
                                                   [((Sugartypes.Datatype.Type
                                                        (Sugartypes.Datatype.TypeVar
                                                           ("$none", None,
                                                            `Rigid))),
                                                     (Some _::Session));
                                                     ((Sugartypes.Datatype.Type
                                                         (Sugartypes.Datatype.TypeVar
                                                            ("$none", None,
                                                             `Rigid))),
                                                      (Some { |SessionFail:() {}-> [||] }))
                                                     ]
                                                   )),
                                                [(Sugartypes.Var "ap")]))
                                              ]
                                            ))))));
                                   fun_location =
                                   CommonTypes.Location.Unknown;
                                   fun_signature = None;
                                   fun_unsafe_signature = false;
                                   fun_frozen = true })
                               ],
                             (Sugartypes.FreezeVar "_fun__g115")))
                         ]
                       ))),
                   CommonTypes.Location.Unknown, None))
                ],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "request"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Session));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Var "ap")]))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Forall (
                  [("s",
                    ((Some CommonTypes.PrimaryKind.Type),
                     (Some (CommonTypes.Linearity.Any,
                            CommonTypes.Restriction.Session))),
                    `Rigid);
                    ("e", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid)
                    ],
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.Function (
                         [(Sugartypes.Datatype.TypeVar ("s", None, `Rigid))],
                         ([("wild",
                            (Sugartypes.Datatype.Present
                               Sugartypes.Datatype.Unit));
                            ("SessionFail",
                             (Sugartypes.Datatype.Present
                                (Sugartypes.Datatype.Variant
                                   ([], Sugartypes.Datatype.Closed))))
                            ],
                          Sugartypes.Datatype.Closed),
                         Sugartypes.Datatype.Unit))
                       ],
                     ([("wild",
                        (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                        ],
                      (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                     (Sugartypes.Datatype.Dual
                        (Sugartypes.Datatype.TypeVar ("s", None, `Rigid)))
                     ))
                  )),
               (Some ((a::Session) {SessionFail:() {}-> [||]}~> ()) ~> ~a::Session)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("linFork",
         ((a::Session) {SessionFail:() {}-> [||]}~@ ()) ~> ~a::Session);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Session; a::Row],
         ([[(Sugartypes.Pattern.Variable
               ("f", (_::Session) {SessionFail:() {}-> [||]}~@ ()))
             ]
            ],
          (Sugartypes.Block
             ([(Sugartypes.Val (
                  (Sugartypes.Pattern.Variable ("ap", AP (_::Session))),
                  ([],
                   (Sugartypes.FnAppl (
                      (Sugartypes.TAppl ((Sugartypes.FreezeVar "new"),
                         [((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some { |_ }));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some _::Session))
                           ]
                         )),
                      []))),
                  CommonTypes.Location.Unknown, None));
                (Sugartypes.Val (Sugartypes.Pattern.Any,
                   ([],
                    (Sugartypes.FnAppl (
                       (Sugartypes.TAppl (
                          (Sugartypes.FreezeVar "spawnAngelAt"),
                          [((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { |SessionFail:() {}-> [||] }));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some ()));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some { wild|_ }))
                            ]
                          )),
                       [(Sugartypes.FnAppl (
                           (Sugartypes.TAppl ((Sugartypes.FreezeVar "here"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { wild|_ }))]
                              )),
                           []));
                         (Sugartypes.Block
                            ([(Sugartypes.Fun
                                 { Sugartypes.fun_binder =
                                   ("_fun__g116",
                                    () {|SessionFail:() {}-> [||]}~@ ());
                                   fun_linearity =
                                   CommonTypes.DeclaredLinearity.Lin;
                                   fun_definition =
                                   ([],
                                    ([[]],
                                     (Sugartypes.Block
                                        ([],
                                         (Sugartypes.FnAppl (
                                            (Sugartypes.Var "f"),
                                            [(Sugartypes.FnAppl (
                                                (Sugartypes.TAppl (
                                                   (Sugartypes.FreezeVar
                                                      "accept"),
                                                   [((Sugartypes.Datatype.Type
                                                        (Sugartypes.Datatype.TypeVar
                                                           ("$none", None,
                                                            `Rigid))),
                                                     (Some _::Session));
                                                     ((Sugartypes.Datatype.Type
                                                         (Sugartypes.Datatype.TypeVar
                                                            ("$none", None,
                                                             `Rigid))),
                                                      (Some { |SessionFail:() {}-> [||] }))
                                                     ]
                                                   )),
                                                [(Sugartypes.Var "ap")]))
                                              ]
                                            ))))));
                                   fun_location =
                                   CommonTypes.Location.Unknown;
                                   fun_signature = None;
                                   fun_unsafe_signature = false;
                                   fun_frozen = true })
                               ],
                             (Sugartypes.FreezeVar "_fun__g116")))
                         ]
                       ))),
                   CommonTypes.Location.Unknown, None))
                ],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "request"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Session));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Var "ap")]))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Forall (
                  [("s",
                    ((Some CommonTypes.PrimaryKind.Type),
                     (Some (CommonTypes.Linearity.Any,
                            CommonTypes.Restriction.Session))),
                    `Rigid);
                    ("e", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid)
                    ],
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.Lolli (
                         [(Sugartypes.Datatype.TypeVar ("s", None, `Rigid))],
                         ([("wild",
                            (Sugartypes.Datatype.Present
                               Sugartypes.Datatype.Unit));
                            ("SessionFail",
                             (Sugartypes.Datatype.Present
                                (Sugartypes.Datatype.Variant
                                   ([], Sugartypes.Datatype.Closed))))
                            ],
                          Sugartypes.Datatype.Closed),
                         Sugartypes.Datatype.Unit))
                       ],
                     ([("wild",
                        (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                        ],
                      (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                     (Sugartypes.Datatype.Dual
                        (Sugartypes.Datatype.TypeVar ("s", None, `Rigid)))
                     ))
                  )),
               (Some ((a::Session) {SessionFail:() {}-> [||]}~@ ()) ~> ~a::Session)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder =
         ("reproduce",
          (AP (a::Session), (a::Session) {SessionFail:() {}-> [||]}~> ()) ~> ());
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a::Session; a::Row],
           (Some ((AP (a::Session), (a::Session) {SessionFail:() {}-> [||]}~> ()) ~> (),
                  [None; None]))),
          ([[(Sugartypes.Pattern.Variable ("ap", AP (_::Session)));
              (Sugartypes.Pattern.Variable
                 ("f", (_::Session) {SessionFail:() {}-> [||]}~> ()))
              ]
             ],
           (Sugartypes.Block
              ([(Sugartypes.Val (
                   (Sugartypes.Pattern.Variable ("x", _::Session)),
                   ([],
                    (Sugartypes.FnAppl (
                       (Sugartypes.TAppl ((Sugartypes.FreezeVar "accept"),
                          [((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some _::Session));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some { |_ }))
                            ]
                          )),
                       [(Sugartypes.Var "ap")]))),
                   CommonTypes.Location.Unknown, None));
                 (Sugartypes.Val (Sugartypes.Pattern.Any,
                    ([],
                     (Sugartypes.FnAppl (
                        (Sugartypes.TAppl ((Sugartypes.FreezeVar "spawnAt"),
                           [((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some { |SessionFail:() {}-> [||] }));
                             ((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some ()));
                             ((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some { wild|_ }))
                             ]
                           )),
                        [(Sugartypes.FnAppl (
                            (Sugartypes.TAppl ((Sugartypes.FreezeVar "here"),
                               [((Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("$none", None, `Rigid))),
                                 (Some { wild|_ }))]
                               )),
                            []));
                          (Sugartypes.Block
                             ([(Sugartypes.Fun
                                  { Sugartypes.fun_binder =
                                    ("_fun__g117",
                                     () {|SessionFail:() {}-> [||]}~@ ());
                                    fun_linearity =
                                    CommonTypes.DeclaredLinearity.Lin;
                                    fun_definition =
                                    ([],
                                     ([[]],
                                      (Sugartypes.Block
                                         ([],
                                          (Sugartypes.FnAppl (
                                             (Sugartypes.Var "f"),
                                             [(Sugartypes.Var "x")]))))));
                                    fun_location =
                                    CommonTypes.Location.Unknown;
                                    fun_signature = None;
                                    fun_unsafe_signature = false;
                                    fun_frozen = true })
                                ],
                              (Sugartypes.FreezeVar "_fun__g117")))
                          ]
                        ))),
                    CommonTypes.Location.Unknown, None))
                 ],
               (Sugartypes.FnAppl (
                  (Sugartypes.TAppl ((Sugartypes.FreezeVar "reproduce"),
                     [((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some _::Session));
                       ((Sugartypes.Datatype.Type
                           (Sugartypes.Datatype.TypeVar
                              ("$none", None, `Rigid))),
                        (Some { |_ }))
                       ]
                     )),
                  [(Sugartypes.Var "ap"); (Sugartypes.Var "f")]))))));
         rec_location = CommonTypes.Location.Unknown;
         rec_signature =
         (Some ((Sugartypes.Datatype.Forall (
                   [("s",
                     ((Some CommonTypes.PrimaryKind.Type),
                      (Some (CommonTypes.Linearity.Any,
                             CommonTypes.Restriction.Session))),
                     `Rigid);
                     ("e", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid)
                     ],
                   (Sugartypes.Datatype.Function (
                      [(Sugartypes.Datatype.TypeApplication ("AP",
                          [(Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("s", None, `Rigid)))
                            ]
                          ));
                        (Sugartypes.Datatype.Function (
                           [(Sugartypes.Datatype.TypeVar ("s", None, `Rigid))
                             ],
                           ([("wild",
                              (Sugartypes.Datatype.Present
                                 Sugartypes.Datatype.Unit));
                              ("SessionFail",
                               (Sugartypes.Datatype.Present
                                  (Sugartypes.Datatype.Variant
                                     ([], Sugartypes.Datatype.Closed))))
                              ],
                            Sugartypes.Datatype.Closed),
                           Sugartypes.Datatype.Unit))
                        ],
                      ([("wild",
                         (Sugartypes.Datatype.Present
                            Sugartypes.Datatype.Unit))
                         ],
                       (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                      Sugartypes.Datatype.Unit))
                   )),
                (Some (AP (a::Session), (a::Session) {SessionFail:() {}-> [||]}~> ()) ~> ())));
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 1189, column 1193, to line 31975, column 32064
         }
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("connect",
         ((a::Session) {SessionFail:() {}-> [||]}~> (), (~a::Session) ~b~> c) ~b~> c);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Session; a::Row; a],
         ([[(Sugartypes.Pattern.Variable
               ("f", (_::Session) {SessionFail:() {}-> [||]}~> ()));
             (Sugartypes.Pattern.Variable ("g", (~_::Session) ~> _))]
            ],
          (Sugartypes.Block
             ([(Sugartypes.Val (
                  (Sugartypes.Pattern.Variable ("ap", AP (_::Session))),
                  ([],
                   (Sugartypes.FnAppl (
                      (Sugartypes.TAppl ((Sugartypes.FreezeVar "new"),
                         [((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some { |_ }));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some _::Session))
                           ]
                         )),
                      []))),
                  CommonTypes.Location.Unknown, None));
                (Sugartypes.Val (
                   (Sugartypes.Pattern.Variable
                      ("done", AP (!(())._::(Unl,Session)))),
                   ([],
                    (Sugartypes.FnAppl (
                       (Sugartypes.TAppl ((Sugartypes.FreezeVar "new"),
                          [((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { |_ }));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some !(())._::(Unl,Session)))
                            ]
                          )),
                       []))),
                   CommonTypes.Location.Unknown, None));
                (Sugartypes.Val (Sugartypes.Pattern.Any,
                   ([],
                    (Sugartypes.FnAppl (
                       (Sugartypes.TAppl ((Sugartypes.FreezeVar "spawnAt"),
                          [((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { |SessionFail:() {}-> [||] }));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some ()));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some { wild|_ }))
                            ]
                          )),
                       [(Sugartypes.FnAppl (
                           (Sugartypes.TAppl ((Sugartypes.FreezeVar "here"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { wild|_ }))]
                              )),
                           []));
                         (Sugartypes.Block
                            ([(Sugartypes.Fun
                                 { Sugartypes.fun_binder =
                                   ("_fun__g118",
                                    () {|SessionFail:() {}-> [||]}~@ ());
                                   fun_linearity =
                                   CommonTypes.DeclaredLinearity.Lin;
                                   fun_definition =
                                   ([],
                                    ([[]],
                                     (Sugartypes.Block
                                        ([(Sugartypes.Exp
                                             (Sugartypes.FnAppl (
                                                (Sugartypes.Var "f"),
                                                [(Sugartypes.FnAppl (
                                                    (Sugartypes.TAppl (
                                                       (Sugartypes.FreezeVar
                                                          "accept"),
                                                       [((Sugartypes.Datatype.Type
                                                            (Sugartypes.Datatype.TypeVar
                                                               ("$none",
                                                                None, `Rigid))),
                                                         (Some _::Session));
                                                         ((Sugartypes.Datatype.Type
                                                             (Sugartypes.Datatype.TypeVar
                                                                ("$none",
                                                                 None, `Rigid))),
                                                          (Some { |SessionFail:() {}-> [||] }))
                                                         ]
                                                       )),
                                                    [(Sugartypes.Var "ap")]))
                                                  ]
                                                )))
                                           ],
                                         (Sugartypes.FnAppl (
                                            (Sugartypes.TAppl (
                                               (Sugartypes.FreezeVar "ignore"),
                                               [((Sugartypes.Datatype.Type
                                                    (Sugartypes.Datatype.TypeVar
                                                       ("$none", None, `Rigid))),
                                                 (Some _::(Unl,Session)));
                                                 ((Sugartypes.Datatype.Type
                                                     (Sugartypes.Datatype.TypeVar
                                                        ("$none", None,
                                                         `Rigid))),
                                                  (Some { |SessionFail:() {}-> [||],wild }))
                                                 ]
                                               )),
                                            [(Sugartypes.FnAppl (
                                                (Sugartypes.TAppl (
                                                   (Sugartypes.FreezeVar
                                                      "send"),
                                                   [((Sugartypes.Datatype.Type
                                                        (Sugartypes.Datatype.TypeVar
                                                           ("$none", None,
                                                            `Rigid))),
                                                     (Some ()));
                                                     ((Sugartypes.Datatype.Type
                                                         (Sugartypes.Datatype.TypeVar
                                                            ("$none", None,
                                                             `Rigid))),
                                                      (Some _::(Unl,Session)));
                                                     ((Sugartypes.Datatype.Type
                                                         (Sugartypes.Datatype.TypeVar
                                                            ("$none", None,
                                                             `Rigid))),
                                                      (Some { |SessionFail:() {}-> [||] }))
                                                     ]
                                                   )),
                                                [(Sugartypes.RecordLit (
                                                    [], None));
                                                  (Sugartypes.FnAppl (
                                                     (Sugartypes.TAppl (
                                                        (Sugartypes.FreezeVar
                                                           "accept"),
                                                        [((Sugartypes.Datatype.Type
                                                             (Sugartypes.Datatype.TypeVar
                                                                ("$none",
                                                                 None, `Rigid))),
                                                          (Some !(())._::(Unl,Session)));
                                                          ((Sugartypes.Datatype.Type
                                                              (Sugartypes.Datatype.TypeVar
                                                                 ("$none",
                                                                  None,
                                                                  `Rigid))),
                                                           (Some { |SessionFail:() {}-> [||] }))
                                                          ]
                                                        )),
                                                     [(Sugartypes.Var "done")
                                                       ]
                                                     ))
                                                  ]
                                                ))
                                              ]
                                            ))))));
                                   fun_location =
                                   CommonTypes.Location.Unknown;
                                   fun_signature = None;
                                   fun_unsafe_signature = false;
                                   fun_frozen = true })
                               ],
                             (Sugartypes.FreezeVar "_fun__g118")))
                         ]
                       ))),
                   CommonTypes.Location.Unknown, None));
                (Sugartypes.Val ((Sugartypes.Pattern.Variable ("result", _)),
                   ([],
                    (Sugartypes.FnAppl ((Sugartypes.Var "g"),
                       [(Sugartypes.FnAppl (
                           (Sugartypes.TAppl (
                              (Sugartypes.FreezeVar "request"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some _::Session));
                                ((Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("$none", None, `Rigid))),
                                 (Some { |_ }))
                                ]
                              )),
                           [(Sugartypes.Var "ap")]))
                         ]
                       ))),
                   CommonTypes.Location.Unknown, None));
                (Sugartypes.Exp
                   (Sugartypes.FnAppl (
                      (Sugartypes.TAppl ((Sugartypes.FreezeVar "ignore"),
                         [((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some ((), ~_::(Unl,Session))));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { |wild|_ }))
                           ]
                         )),
                      [(Sugartypes.FnAppl (
                          (Sugartypes.TAppl (
                             (Sugartypes.FreezeVar "receive"),
                             [((Sugartypes.Datatype.Type
                                  (Sugartypes.Datatype.TypeVar
                                     ("$none", None, `Rigid))),
                               (Some ()));
                               ((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some ~_::(Unl,Session)));
                               ((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { |_ }))
                               ]
                             )),
                          [(Sugartypes.FnAppl (
                              (Sugartypes.TAppl (
                                 (Sugartypes.FreezeVar "request"),
                                 [((Sugartypes.Datatype.Type
                                      (Sugartypes.Datatype.TypeVar
                                         ("$none", None, `Rigid))),
                                   (Some !(())._::(Unl,Session)));
                                   ((Sugartypes.Datatype.Type
                                       (Sugartypes.Datatype.TypeVar
                                          ("$none", None, `Rigid))),
                                    (Some { |_ }))
                                   ]
                                 )),
                              [(Sugartypes.Var "done")]))
                            ]
                          ))
                        ]
                      )))
                ],
              (Sugartypes.Var "result")))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Forall (
                  [("s",
                    ((Some CommonTypes.PrimaryKind.Type),
                     (Some (CommonTypes.Linearity.Any,
                            CommonTypes.Restriction.Session))),
                    `Rigid);
                    ("e", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid);
                    ("a", (None, None), `Rigid)],
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.Function (
                         [(Sugartypes.Datatype.TypeVar ("s", None, `Rigid))],
                         ([("wild",
                            (Sugartypes.Datatype.Present
                               Sugartypes.Datatype.Unit));
                            ("SessionFail",
                             (Sugartypes.Datatype.Present
                                (Sugartypes.Datatype.Variant
                                   ([], Sugartypes.Datatype.Closed))))
                            ],
                          Sugartypes.Datatype.Closed),
                         Sugartypes.Datatype.Unit));
                       (Sugartypes.Datatype.Function (
                          [(Sugartypes.Datatype.Dual
                              (Sugartypes.Datatype.TypeVar
                                 ("s", None, `Rigid)))
                            ],
                          ([("wild",
                             (Sugartypes.Datatype.Present
                                Sugartypes.Datatype.Unit))
                             ],
                           (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                          (Sugartypes.Datatype.TypeVar ("a", None, `Rigid))))
                       ],
                     ([("wild",
                        (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                        ],
                      (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                     (Sugartypes.Datatype.TypeVar ("a", None, `Rigid))))
                  )),
               (Some ((a::Session) {SessionFail:() {}-> [||]}~> (), (~a::Session) ~b~> c) ~b~> c)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Typenames
      [("EndBang", [],
        ((Sugartypes.Datatype.Output (Sugartypes.Datatype.Unit,
            Sugartypes.Datatype.End)),
         (Some !(()).End)),
        File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 1219, columns 32936 to 32962)
        ]);
   (Sugartypes.Typenames
      [("EndQuery", [],
        ((Sugartypes.Datatype.Input (Sugartypes.Datatype.Unit,
            Sugartypes.Datatype.End)),
         (Some ?(()).End)),
        File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 1220, columns 32964 to 32991)
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("wait", (EndQuery) ~> ());
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("s", EndQuery))]],
          (Sugartypes.Block
             ([(Sugartypes.Val (
                  (Sugartypes.Pattern.Tuple
                     [Sugartypes.Pattern.Any;
                       (Sugartypes.Pattern.Variable ("s", End))]),
                  ([],
                   (Sugartypes.FnAppl (
                      (Sugartypes.TAppl ((Sugartypes.FreezeVar "receive"),
                         [((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some ()));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some End));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { |_ }))
                           ]
                         )),
                      [(Sugartypes.Var "s")]))),
                  CommonTypes.Location.Unknown, None))
                ],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "close"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |_ }))]
                    )),
                 [(Sugartypes.Var "s")]))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("EndQuery", []))],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  Sugartypes.Datatype.Unit)),
               (Some (EndQuery) ~> ())));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("closeBang", (EndBang) ~> ());
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("s", EndBang))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "close"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |_ }))]
                    )),
                 [(Sugartypes.FnAppl (
                     (Sugartypes.TAppl ((Sugartypes.FreezeVar "send"),
                        [((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some ()));
                          ((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some End));
                          ((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some { |_ }))
                          ]
                        )),
                     [(Sugartypes.RecordLit ([], None)); (Sugartypes.Var "s")
                       ]
                     ))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("EndBang", []))],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  Sugartypes.Datatype.Unit)),
               (Some (EndBang) ~> ())));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("makeEndBang", () ~> EndBang);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[]],
          (Sugartypes.Block
             ([(Sugartypes.Val (
                  (Sugartypes.Pattern.Variable ("ap", AP (EndQuery))),
                  ([],
                   (Sugartypes.FnAppl (
                      (Sugartypes.TAppl ((Sugartypes.FreezeVar "new"),
                         [((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some { |_ }));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some EndQuery))
                           ]
                         )),
                      []))),
                  CommonTypes.Location.Unknown, None));
                (Sugartypes.Val (Sugartypes.Pattern.Any,
                   ([],
                    (Sugartypes.FnAppl (
                       (Sugartypes.TAppl ((Sugartypes.FreezeVar "spawnAt"),
                          [((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { |_::(Unl,Mono) }));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some ()));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some { wild|_ }))
                            ]
                          )),
                       [(Sugartypes.FnAppl (
                           (Sugartypes.TAppl ((Sugartypes.FreezeVar "here"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { wild|_ }))]
                              )),
                           []));
                         (Sugartypes.Block
                            ([(Sugartypes.Fun
                                 { Sugartypes.fun_binder =
                                   ("_fun__g119", () ~@ ());
                                   fun_linearity =
                                   CommonTypes.DeclaredLinearity.Lin;
                                   fun_definition =
                                   ([],
                                    ([[]],
                                     (Sugartypes.Block
                                        ([(Sugartypes.Val (
                                             (Sugartypes.Pattern.Variable
                                                ("c", EndQuery)),
                                             ([],
                                              (Sugartypes.FnAppl (
                                                 (Sugartypes.TAppl (
                                                    (Sugartypes.FreezeVar
                                                       "accept"),
                                                    [((Sugartypes.Datatype.Type
                                                         (Sugartypes.Datatype.TypeVar
                                                            ("$none", None,
                                                             `Rigid))),
                                                      (Some EndQuery));
                                                      ((Sugartypes.Datatype.Type
                                                          (Sugartypes.Datatype.TypeVar
                                                             ("$none", None,
                                                              `Rigid))),
                                                       (Some { |_::(Unl,Mono) }))
                                                      ]
                                                    )),
                                                 [(Sugartypes.Var "ap")]))),
                                             CommonTypes.Location.Unknown,
                                             None))
                                           ],
                                         (Sugartypes.FnAppl (
                                            (Sugartypes.TAppl (
                                               (Sugartypes.FreezeVar "wait"),
                                               [((Sugartypes.Datatype.Type
                                                    (Sugartypes.Datatype.TypeVar
                                                       ("$none", None, `Rigid))),
                                                 (Some { |_::(Unl,Mono) }))]
                                               )),
                                            [(Sugartypes.Var "c")]))))));
                                   fun_location =
                                   CommonTypes.Location.Unknown;
                                   fun_signature = None;
                                   fun_unsafe_signature = false;
                                   fun_frozen = true })
                               ],
                             (Sugartypes.FreezeVar "_fun__g119")))
                         ]
                       ))),
                   CommonTypes.Location.Unknown, None))
                ],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "request"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some EndQuery));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Var "ap")]))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function ([],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("EndBang", [])))),
               (Some () ~> EndBang)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("forkSync",
         ((a::Session) {SessionFail:() {}-> [||]}~> EndBang) ~> ~a::Session);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Session; a::Row],
         ([[(Sugartypes.Pattern.Variable
               ("f", (_::Session) {SessionFail:() {}-> [||]}~> EndBang))
             ]
            ],
          (Sugartypes.Block
             ([(Sugartypes.Val (
                  (Sugartypes.Pattern.Variable ("ap", AP (_::Session))),
                  ([],
                   (Sugartypes.FnAppl (
                      (Sugartypes.TAppl ((Sugartypes.FreezeVar "new"),
                         [((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some { |_ }));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some _::Session))
                           ]
                         )),
                      []))),
                  CommonTypes.Location.Unknown, None));
                (Sugartypes.Val (Sugartypes.Pattern.Any,
                   ([],
                    (Sugartypes.FnAppl (
                       (Sugartypes.TAppl ((Sugartypes.FreezeVar "spawnAt"),
                          [((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { |SessionFail:() {}-> [||] }));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some ()));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some { wild|_ }))
                            ]
                          )),
                       [(Sugartypes.FnAppl (
                           (Sugartypes.TAppl ((Sugartypes.FreezeVar "here"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { wild|_ }))]
                              )),
                           []));
                         (Sugartypes.Block
                            ([(Sugartypes.Fun
                                 { Sugartypes.fun_binder =
                                   ("_fun__g120",
                                    () {|SessionFail:() {}-> [||]}~@ ());
                                   fun_linearity =
                                   CommonTypes.DeclaredLinearity.Lin;
                                   fun_definition =
                                   ([],
                                    ([[]],
                                     (Sugartypes.Block
                                        ([(Sugartypes.Val (
                                             (Sugartypes.Pattern.Variable
                                                ("c", _::Session)),
                                             ([],
                                              (Sugartypes.FnAppl (
                                                 (Sugartypes.TAppl (
                                                    (Sugartypes.FreezeVar
                                                       "accept"),
                                                    [((Sugartypes.Datatype.Type
                                                         (Sugartypes.Datatype.TypeVar
                                                            ("$none", None,
                                                             `Rigid))),
                                                      (Some _::Session));
                                                      ((Sugartypes.Datatype.Type
                                                          (Sugartypes.Datatype.TypeVar
                                                             ("$none", None,
                                                              `Rigid))),
                                                       (Some { |SessionFail:() {}-> [||] }))
                                                      ]
                                                    )),
                                                 [(Sugartypes.Var "ap")]))),
                                             CommonTypes.Location.Unknown,
                                             None));
                                           (Sugartypes.Val (
                                              (Sugartypes.Pattern.Variable
                                                 ("c", EndBang)),
                                              ([],
                                               (Sugartypes.FnAppl (
                                                  (Sugartypes.Var "f"),
                                                  [(Sugartypes.Var "c")]))),
                                              CommonTypes.Location.Unknown,
                                              None))
                                           ],
                                         (Sugartypes.FnAppl (
                                            (Sugartypes.TAppl (
                                               (Sugartypes.FreezeVar
                                                  "closeBang"),
                                               [((Sugartypes.Datatype.Type
                                                    (Sugartypes.Datatype.TypeVar
                                                       ("$none", None, `Rigid))),
                                                 (Some { |SessionFail:() {}-> [||] }))
                                                 ]
                                               )),
                                            [(Sugartypes.Var "c")]))))));
                                   fun_location =
                                   CommonTypes.Location.Unknown;
                                   fun_signature = None;
                                   fun_unsafe_signature = false;
                                   fun_frozen = true })
                               ],
                             (Sugartypes.FreezeVar "_fun__g120")))
                         ]
                       ))),
                   CommonTypes.Location.Unknown, None))
                ],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "request"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Session));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Var "ap")]))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Forall (
                  [("s",
                    ((Some CommonTypes.PrimaryKind.Type),
                     (Some (CommonTypes.Linearity.Any,
                            CommonTypes.Restriction.Session))),
                    `Rigid);
                    ("e", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid)
                    ],
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.Function (
                         [(Sugartypes.Datatype.TypeVar ("s", None, `Rigid))],
                         ([("wild",
                            (Sugartypes.Datatype.Present
                               Sugartypes.Datatype.Unit));
                            ("SessionFail",
                             (Sugartypes.Datatype.Present
                                (Sugartypes.Datatype.Variant
                                   ([], Sugartypes.Datatype.Closed))))
                            ],
                          Sugartypes.Datatype.Closed),
                         (Sugartypes.Datatype.TypeApplication ("EndBang", 
                            []))
                         ))
                       ],
                     ([("wild",
                        (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                        ],
                      (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                     (Sugartypes.Datatype.Dual
                        (Sugartypes.Datatype.TypeVar ("s", None, `Rigid)))
                     ))
                  )),
               (Some ((a::Session) {SessionFail:() {}-> [||]}~> EndBang) ~> ~a::Session)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("linForkSync",
         ((a::Session) {SessionFail:() {}-> [||]}~@ EndBang) ~> ~a::Session);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Session; a::Row],
         ([[(Sugartypes.Pattern.Variable
               ("f", (_::Session) {SessionFail:() {}-> [||]}~@ EndBang))
             ]
            ],
          (Sugartypes.Block
             ([(Sugartypes.Val (
                  (Sugartypes.Pattern.Variable ("ap", AP (_::Session))),
                  ([],
                   (Sugartypes.FnAppl (
                      (Sugartypes.TAppl ((Sugartypes.FreezeVar "new"),
                         [((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some { |_ }));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some _::Session))
                           ]
                         )),
                      []))),
                  CommonTypes.Location.Unknown, None));
                (Sugartypes.Val (Sugartypes.Pattern.Any,
                   ([],
                    (Sugartypes.FnAppl (
                       (Sugartypes.TAppl ((Sugartypes.FreezeVar "spawnAt"),
                          [((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { |SessionFail:() {}-> [||] }));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some ()));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some { wild|_ }))
                            ]
                          )),
                       [(Sugartypes.FnAppl (
                           (Sugartypes.TAppl ((Sugartypes.FreezeVar "here"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { wild|_ }))]
                              )),
                           []));
                         (Sugartypes.Block
                            ([(Sugartypes.Fun
                                 { Sugartypes.fun_binder =
                                   ("_fun__g121",
                                    () {|SessionFail:() {}-> [||]}~@ ());
                                   fun_linearity =
                                   CommonTypes.DeclaredLinearity.Lin;
                                   fun_definition =
                                   ([],
                                    ([[]],
                                     (Sugartypes.Block
                                        ([(Sugartypes.Val (
                                             (Sugartypes.Pattern.Variable
                                                ("c", _::Session)),
                                             ([],
                                              (Sugartypes.FnAppl (
                                                 (Sugartypes.TAppl (
                                                    (Sugartypes.FreezeVar
                                                       "accept"),
                                                    [((Sugartypes.Datatype.Type
                                                         (Sugartypes.Datatype.TypeVar
                                                            ("$none", None,
                                                             `Rigid))),
                                                      (Some _::Session));
                                                      ((Sugartypes.Datatype.Type
                                                          (Sugartypes.Datatype.TypeVar
                                                             ("$none", None,
                                                              `Rigid))),
                                                       (Some { |SessionFail:() {}-> [||] }))
                                                      ]
                                                    )),
                                                 [(Sugartypes.Var "ap")]))),
                                             CommonTypes.Location.Unknown,
                                             None));
                                           (Sugartypes.Val (
                                              (Sugartypes.Pattern.Variable
                                                 ("c", EndBang)),
                                              ([],
                                               (Sugartypes.FnAppl (
                                                  (Sugartypes.Var "f"),
                                                  [(Sugartypes.Var "c")]))),
                                              CommonTypes.Location.Unknown,
                                              None))
                                           ],
                                         (Sugartypes.FnAppl (
                                            (Sugartypes.TAppl (
                                               (Sugartypes.FreezeVar
                                                  "closeBang"),
                                               [((Sugartypes.Datatype.Type
                                                    (Sugartypes.Datatype.TypeVar
                                                       ("$none", None, `Rigid))),
                                                 (Some { |SessionFail:() {}-> [||] }))
                                                 ]
                                               )),
                                            [(Sugartypes.Var "c")]))))));
                                   fun_location =
                                   CommonTypes.Location.Unknown;
                                   fun_signature = None;
                                   fun_unsafe_signature = false;
                                   fun_frozen = true })
                               ],
                             (Sugartypes.FreezeVar "_fun__g121")))
                         ]
                       ))),
                   CommonTypes.Location.Unknown, None))
                ],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "request"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Session));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Var "ap")]))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Forall (
                  [("s",
                    ((Some CommonTypes.PrimaryKind.Type),
                     (Some (CommonTypes.Linearity.Any,
                            CommonTypes.Restriction.Session))),
                    `Rigid);
                    ("e", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid)
                    ],
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.Lolli (
                         [(Sugartypes.Datatype.TypeVar ("s", None, `Rigid))],
                         ([("wild",
                            (Sugartypes.Datatype.Present
                               Sugartypes.Datatype.Unit));
                            ("SessionFail",
                             (Sugartypes.Datatype.Present
                                (Sugartypes.Datatype.Variant
                                   ([], Sugartypes.Datatype.Closed))))
                            ],
                          Sugartypes.Datatype.Closed),
                         (Sugartypes.Datatype.TypeApplication ("EndBang", 
                            []))
                         ))
                       ],
                     ([("wild",
                        (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                        ],
                      (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                     (Sugartypes.Datatype.Dual
                        (Sugartypes.Datatype.TypeVar ("s", None, `Rigid)))
                     ))
                  )),
               (Some ((a::Session) {SessionFail:() {}-> [||]}~@ EndBang) ~> ~a::Session)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("linkSync",
         (a::Session, ~a::Session) {SessionFail:() {}-> [||]|_}~> EndBang);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Session; a::Row],
         ([[(Sugartypes.Pattern.Variable ("s", _::Session));
             (Sugartypes.Pattern.Variable ("c", ~_::Session))]
            ],
          (Sugartypes.Block
             ([(Sugartypes.Exp
                  (Sugartypes.FnAppl (
                     (Sugartypes.TAppl ((Sugartypes.FreezeVar "link"),
                        [((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some _::Session));
                          ((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some { |SessionFail:() {}-> [||]|_ }))
                          ]
                        )),
                     [(Sugartypes.Var "s"); (Sugartypes.Var "c")])))
                ],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "makeEndBang"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |SessionFail:() {}-> [||]|_ }))]
                    )),
                 []))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Forall (
                  [("s",
                    ((Some CommonTypes.PrimaryKind.Type),
                     (Some (CommonTypes.Linearity.Any,
                            CommonTypes.Restriction.Session))),
                    `Rigid);
                    ("e", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid)
                    ],
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.TypeVar ("s", None, `Rigid));
                       (Sugartypes.Datatype.Dual
                          (Sugartypes.Datatype.TypeVar ("s", None, `Rigid)))
                       ],
                     ([("wild",
                        (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit));
                        ("SessionFail",
                         (Sugartypes.Datatype.Present
                            (Sugartypes.Datatype.Variant
                               ([], Sugartypes.Datatype.Closed))))
                        ],
                      (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                     (Sugartypes.Datatype.TypeApplication ("EndBang", []))))
                  )),
               (Some (a::Session, ~a::Session) {SessionFail:() {}-> [||]|_}~> EndBang)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("runSync",
         ((!(a).EndBang) {SessionFail:() {}-> [||]}~> EndBang) ~> a);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable
               ("f", (!(_).EndBang) {SessionFail:() {}-> [||]}~> EndBang))
             ]
            ],
          (Sugartypes.Block
             ([(Sugartypes.Val (
                  (Sugartypes.Pattern.Variable ("c", ~!(_).EndBang)),
                  ([],
                   (Sugartypes.FnAppl (
                      (Sugartypes.TAppl ((Sugartypes.FreezeVar "forkSync"),
                         [((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some !(_).EndBang));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { |_ }))
                           ]
                         )),
                      [(Sugartypes.Var "f")]))),
                  CommonTypes.Location.Unknown, None));
                (Sugartypes.Val (
                   (Sugartypes.Pattern.Tuple
                      [(Sugartypes.Pattern.Variable ("v", _));
                        (Sugartypes.Pattern.Variable ("c", ?(()).End))]),
                   ([],
                    (Sugartypes.FnAppl (
                       (Sugartypes.TAppl ((Sugartypes.FreezeVar "receive"),
                          [((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some _));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some ?(()).End));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some { |_ }))
                            ]
                          )),
                       [(Sugartypes.Var "c")]))),
                   CommonTypes.Location.Unknown, None));
                (Sugartypes.Exp
                   (Sugartypes.FnAppl (
                      (Sugartypes.TAppl ((Sugartypes.FreezeVar "wait"),
                         [((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some { |_ }))]
                         )),
                      [(Sugartypes.Var "c")])))
                ],
              (Sugartypes.Var "v")))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Function (
                      [(Sugartypes.Datatype.Output (
                          (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)),
                          (Sugartypes.Datatype.TypeApplication ("EndBang", 
                             []))
                          ))
                        ],
                      ([("wild",
                         (Sugartypes.Datatype.Present
                            Sugartypes.Datatype.Unit));
                         ("SessionFail",
                          (Sugartypes.Datatype.Present
                             (Sugartypes.Datatype.Variant
                                ([], Sugartypes.Datatype.Closed))))
                         ],
                       Sugartypes.Datatype.Closed),
                      (Sugartypes.Datatype.TypeApplication ("EndBang", []))))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                  (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))),
               (Some ((!(a).EndBang) {SessionFail:() {}-> [||]}~> EndBang) ~> a)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("lf", ((a) -b-> c) -> (a) -b-@ c);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row; a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("f", (_) -> _))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.Block
                 ([(Sugartypes.Fun
                      { Sugartypes.fun_binder = ("_fun__g122", (_) -@ _);
                        fun_linearity = CommonTypes.DeclaredLinearity.Lin;
                        fun_definition =
                        ([],
                         ([[(Sugartypes.Pattern.Variable ("x", _))]],
                          (Sugartypes.Block
                             ([],
                              (Sugartypes.FnAppl ((Sugartypes.Var "f"),
                                 [(Sugartypes.Var "x")]))))));
                        fun_location = CommonTypes.Location.Unknown;
                        fun_signature = None; fun_unsafe_signature = false;
                        fun_frozen = true })
                    ],
                  (Sugartypes.FreezeVar "_fun__g122")))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Function (
                      [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                      ([], (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                      (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))))
                    ],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.Lolli (
                     [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                     ([], (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                     (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))))
                  )),
               (Some ((a) -b-> c) -> (a) -b-@ c)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Typenames
      [("Comp",
        [(("a", (None, None), `Rigid), (Some a));
          (("e",
            ((Some CommonTypes.PrimaryKind.Row),
             (Some (CommonTypes.Linearity.Unl, CommonTypes.Restriction.Effect))),
            `Rigid),
           (Some a::Row))
          ],
        ((Sugartypes.Datatype.Function ([],
            ([("wild", (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
               ],
             (Sugartypes.Datatype.Open ("e", None, `Rigid))),
            (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))),
         (Some () ~> _)),
        File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 1295, columns 34504 to 34540)
        ]);
   (Sugartypes.Typenames
      [("Zero", [],
        ((Sugartypes.Datatype.Variant ([], Sugartypes.Datatype.Closed)),
         (Some [||])),
        File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 1296, columns 34542 to 34562)
        ]);
   Sugartypes.Infix;
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("-<-", ((a) -b-> c, (d) -b-> a) -> (d) -b-> c);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row; a; a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("f", (_) -> _));
             (Sugartypes.Pattern.Variable ("g", (_) -> _))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.Block
                 ([(Sugartypes.Fun
                      { Sugartypes.fun_binder = ("_fun__g123", (_) -> _);
                        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                        fun_definition =
                        ([],
                         ([[(Sugartypes.Pattern.Variable ("x", _))]],
                          (Sugartypes.Block
                             ([],
                              (Sugartypes.FnAppl ((Sugartypes.Var "f"),
                                 [(Sugartypes.FnAppl ((Sugartypes.Var "g"),
                                     [(Sugartypes.Var "x")]))
                                   ]
                                 ))))));
                        fun_location = CommonTypes.Location.Unknown;
                        fun_signature = None; fun_unsafe_signature = false;
                        fun_frozen = true })
                    ],
                  (Sugartypes.FreezeVar "_fun__g123")))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Function (
                      [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                      ([], (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                      (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))));
                    (Sugartypes.Datatype.Function (
                       [(Sugartypes.Datatype.TypeVar ("c", None, `Rigid))],
                       ([], (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                       (Sugartypes.Datatype.TypeVar ("a", None, `Rigid))))
                    ],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.TypeVar ("c", None, `Rigid))],
                     ([], (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                     (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))))
                  )),
               (Some ((a) -b-> c, (d) -b-> a) -> (d) -b-> c)));
        fun_unsafe_signature = false; fun_frozen = true });
   Sugartypes.Infix;
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("->-", ((a) -b-> c, (c) -b-> d) -> (a) -b-> d);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row; a; a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("f", (_) -> _));
             (Sugartypes.Pattern.Variable ("g", (_) -> _))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.InfixAppl (
                 ([_; { |_ }; _; _; { |_ }], (Operators.BinaryOp.Name "-<-")),
                 (Sugartypes.Var "g"), (Sugartypes.Var "f")))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("gen0", (Comp (a,{  })) -> Comp (a,{ |_ }));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("f", Comp (_,{  })))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.TupleLit
                 [(Sugartypes.Upcast ((Sugartypes.Var "f"),
                     ((Sugartypes.Datatype.TypeApplication ("Comp",
                         [(Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)));
                           (Sugartypes.Datatype.Row
                              ([],
                               (Sugartypes.Datatype.Open ("e", None, `Rigid))))
                           ]
                         )),
                      (Some Comp (_,{ |_ }))),
                     ((Sugartypes.Datatype.TypeApplication ("Comp",
                         [(Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)));
                           (Sugartypes.Datatype.Row
                              ([], Sugartypes.Datatype.Closed))
                           ]
                         )),
                      (Some Comp (_,{  })))
                     ))
                   ])))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Comp",
                      [(Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)));
                        (Sugartypes.Datatype.Row
                           ([], Sugartypes.Datatype.Closed))
                        ]
                      ))
                    ],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Comp",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)));
                       (Sugartypes.Datatype.Row
                          ([], (Sugartypes.Datatype.Open ("e", None, `Rigid))))
                       ]
                     ))
                  )),
               (Some (Comp (a,{  })) -> Comp (a,{ |_ }))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("gen1", ((a) {}~> b) -> (a) ~> b);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a; a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("f", (_) {}~> _))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.TupleLit
                 [(Sugartypes.Upcast ((Sugartypes.Var "f"),
                     ((Sugartypes.Datatype.Function (
                         [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                         ([("wild",
                            (Sugartypes.Datatype.Present
                               Sugartypes.Datatype.Unit))
                            ],
                          (Sugartypes.Datatype.Open ("$", None, `Flexible))),
                         (Sugartypes.Datatype.TypeVar ("b", None, `Rigid)))),
                      (Some (_) ~> _)),
                     ((Sugartypes.Datatype.Function (
                         [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                         ([("wild",
                            (Sugartypes.Datatype.Present
                               Sugartypes.Datatype.Unit))
                            ],
                          Sugartypes.Datatype.Closed),
                         (Sugartypes.Datatype.TypeVar ("b", None, `Rigid)))),
                      (Some (_) {}~> _))
                     ))
                   ])))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Function (
                      [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                      ([("wild",
                         (Sugartypes.Datatype.Present
                            Sugartypes.Datatype.Unit))
                         ],
                       Sugartypes.Datatype.Closed),
                      (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))))
                    ],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                     ([("wild",
                        (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                        ],
                      (Sugartypes.Datatype.Open ("$", None, `Flexible))),
                     (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))))
                  )),
               (Some ((a) {}~> b) -> (a) ~> b)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("gen2", ((a, b) {}~> c) -> (a, b) ~> c);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a; a; a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("f", (_, _) {}~> _))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.TupleLit
                 [(Sugartypes.Upcast ((Sugartypes.Var "f"),
                     ((Sugartypes.Datatype.Function (
                         [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                           (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))],
                         ([("wild",
                            (Sugartypes.Datatype.Present
                               Sugartypes.Datatype.Unit))
                            ],
                          (Sugartypes.Datatype.Open ("$", None, `Flexible))),
                         (Sugartypes.Datatype.TypeVar ("c", None, `Rigid)))),
                      (Some (_, _) ~> _)),
                     ((Sugartypes.Datatype.Function (
                         [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                           (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))],
                         ([("wild",
                            (Sugartypes.Datatype.Present
                               Sugartypes.Datatype.Unit))
                            ],
                          Sugartypes.Datatype.Closed),
                         (Sugartypes.Datatype.TypeVar ("c", None, `Rigid)))),
                      (Some (_, _) {}~> _))
                     ))
                   ])))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Function (
                      [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                        (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))],
                      ([("wild",
                         (Sugartypes.Datatype.Present
                            Sugartypes.Datatype.Unit))
                         ],
                       Sugartypes.Datatype.Closed),
                      (Sugartypes.Datatype.TypeVar ("c", None, `Rigid))))
                    ],
                  ([], (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                       (Sugartypes.Datatype.TypeVar ("b", None, `Rigid))],
                     ([("wild",
                        (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                        ],
                      (Sugartypes.Datatype.Open ("$", None, `Flexible))),
                     (Sugartypes.Datatype.TypeVar ("c", None, `Rigid))))
                  )),
               (Some ((a, b) {}~> c) -> (a, b) ~> c)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("elemIndex", (a, [a]) ~> Maybe (Int));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("x", _));
             (Sugartypes.Pattern.Variable ("xs", [_]))]
            ],
          (Sugartypes.Block
             ([(Sugartypes.Val (
                  (Sugartypes.Pattern.Variable
                     ("n", (Int, [|Just:Int|Nothing|]))),
                  ([],
                   (Sugartypes.FnAppl (
                      (Sugartypes.TAppl ((Sugartypes.FreezeVar "fold_left"),
                         [((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some (Int, [|Just:Int|Nothing|])));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some _));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { |_ }))
                           ]
                         )),
                      [(Sugartypes.Block
                          ([(Sugartypes.Fun
                               { Sugartypes.fun_binder =
                                 ("_fun__g124",
                                  ((Int, [|Just:Int|Nothing|]), _) ~> (Int, [|Just:Int|Nothing|]));
                                 fun_linearity =
                                 CommonTypes.DeclaredLinearity.Unl;
                                 fun_definition =
                                 ([],
                                  ([[(Sugartypes.Pattern.Variable
                                        ("acc", (Int, [|Just:Int|Nothing|])));
                                      (Sugartypes.Pattern.Variable ("y", _))]
                                     ],
                                   (Sugartypes.Block
                                      ([],
                                       (Sugartypes.Switch (
                                          (Sugartypes.Var "acc"),
                                          [((Sugartypes.Pattern.Tuple
                                               [(Sugartypes.Pattern.Variable
                                                   ("n", Int));
                                                 (Sugartypes.Pattern.Variant (
                                                    "Just",
                                                    (Some (Sugartypes.Pattern.Variable
                                                             ("i", Int)))
                                                    ))
                                                 ]),
                                            (Sugartypes.Block
                                               ([],
                                                (Sugartypes.TupleLit
                                                   [(Sugartypes.Var "n");
                                                     (Sugartypes.ConstructorLit (
                                                        "Just",
                                                        (Some (Sugartypes.TupleLit
                                                                 [(Sugartypes.Var
                                                                    "i")
                                                                   ])),
                                                        (Some [|Just:Int|Nothing|])
                                                        ))
                                                     ]))));
                                            ((Sugartypes.Pattern.Tuple
                                                [(Sugartypes.Pattern.Variable
                                                    ("n", Int));
                                                  (Sugartypes.Pattern.Variant (
                                                     "Nothing", None))
                                                  ]),
                                             (Sugartypes.Block
                                                ([],
                                                 (Sugartypes.Conditional (
                                                    (Sugartypes.InfixAppl (
                                                       ([_; { |wild|_ }],
                                                        (Operators.BinaryOp.Name
                                                           "==")),
                                                       (Sugartypes.Var "x"),
                                                       (Sugartypes.Var "y"))),
                                                    (Sugartypes.Block
                                                       ([],
                                                        (Sugartypes.TupleLit
                                                           [(Sugartypes.Var
                                                               "n");
                                                             (Sugartypes.ConstructorLit (
                                                                "Just",
                                                                (Some (
                                                                Sugartypes.TupleLit
                                                                  [(Sugartypes.Var
                                                                    "n")])),
                                                                (Some [|Just:Int|Nothing|])
                                                                ))
                                                             ]))),
                                                    (Sugartypes.Block
                                                       ([],
                                                        (Sugartypes.TupleLit
                                                           [(Sugartypes.InfixAppl (
                                                               ([{ |wild|_ }],
                                                                (Operators.BinaryOp.Name
                                                                   "+")),
                                                               (Sugartypes.Var
                                                                  "n"),
                                                               (Sugartypes.Constant
                                                                  (CommonTypes.Constant.Int
                                                                    1))
                                                               ));
                                                             (Sugartypes.ConstructorLit (
                                                                "Nothing",
                                                                None,
                                                                (Some [|Nothing|Just:Int|])
                                                                ))
                                                             ])))
                                                    )))))
                                            ],
                                          (Some (Int, [|Just:Int|Nothing|]))
                                          ))))));
                                 fun_location = CommonTypes.Location.Unknown;
                                 fun_signature = None;
                                 fun_unsafe_signature = false;
                                 fun_frozen = true })
                             ],
                           (Sugartypes.FreezeVar "_fun__g124")));
                        (Sugartypes.TupleLit
                           [(Sugartypes.Constant (CommonTypes.Constant.Int 0));
                             (Sugartypes.ConstructorLit ("Nothing", None,
                                (Some [|Nothing|Just:Int|])))
                             ]);
                        (Sugartypes.Var "xs")]
                      ))),
                  CommonTypes.Location.Unknown, None))
                ],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "second"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some [|Just:Int|Nothing|]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |1:Int }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |wild|_ }))
                      ]
                    )),
                 [(Sugartypes.Var "n")]))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                    (Sugartypes.Datatype.List
                       (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Maybe",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.Primitive
                            CommonTypes.Primitive.Int))
                       ]
                     ))
                  )),
               (Some (a, [a]) ~> Maybe (Int))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("maximum", (a, a) -> a);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("a", _));
             (Sugartypes.Pattern.Variable ("b", _))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.Conditional (
                 (Sugartypes.InfixAppl (
                    ([_; { |_ }], (Operators.BinaryOp.Name ">")),
                    (Sugartypes.Var "a"), (Sugartypes.Var "b"))),
                 (Sugartypes.Block ([], (Sugartypes.Var "a"))),
                 (Sugartypes.Block ([], (Sugartypes.Var "b")))))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("partition", ((a) ~b~> Bool, [a]) ~b~> ([a], [a]));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("pred", (_) ~> Bool));
             (Sugartypes.Pattern.Variable ("xs", [_]))]
            ],
          (Sugartypes.Block
             ([(Sugartypes.Funs
                  [{ Sugartypes.rec_binder =
                     ("go", ([a], [a], [a]) ~> ([a], [a]));
                     rec_linearity = CommonTypes.DeclaredLinearity.Unl;
                     rec_definition =
                     (([], (Some (([a], [a], [a]) ~> ([a], [a]), []))),
                      ([[(Sugartypes.Pattern.Variable ("ayes", [_]));
                          (Sugartypes.Pattern.Variable ("noes", [_]));
                          (Sugartypes.Pattern.Variable ("xs", [_]))]
                         ],
                       (Sugartypes.Block
                          ([],
                           (Sugartypes.Switch ((Sugartypes.Var "xs"),
                              [(Sugartypes.Pattern.Nil,
                                (Sugartypes.Block
                                   ([],
                                    (Sugartypes.TupleLit
                                       [(Sugartypes.Var "ayes");
                                         (Sugartypes.Var "noes")]))));
                                ((Sugartypes.Pattern.Cons (
                                    (Sugartypes.Pattern.Variable ("x", _)),
                                    (Sugartypes.Pattern.Variable ("xs", [_]))
                                    )),
                                 (Sugartypes.Block
                                    ([],
                                     (Sugartypes.Conditional (
                                        (Sugartypes.FnAppl (
                                           (Sugartypes.Var "pred"),
                                           [(Sugartypes.Var "x")])),
                                        (Sugartypes.Block
                                           ([],
                                            (Sugartypes.FnAppl (
                                               (Sugartypes.FreezeVar "go"),
                                               [(Sugartypes.InfixAppl (
                                                   ([_; { |wild|_ }],
                                                    Operators.BinaryOp.Cons),
                                                   (Sugartypes.Var "x"),
                                                   (Sugartypes.Var "ayes")));
                                                 (Sugartypes.Var "noes");
                                                 (Sugartypes.Var "xs")]
                                               )))),
                                        (Sugartypes.Block
                                           ([],
                                            (Sugartypes.FnAppl (
                                               (Sugartypes.FreezeVar "go"),
                                               [(Sugartypes.Var "ayes");
                                                 (Sugartypes.InfixAppl (
                                                    ([_; { |wild|_ }],
                                                     Operators.BinaryOp.Cons),
                                                    (Sugartypes.Var "x"),
                                                    (Sugartypes.Var "noes")));
                                                 (Sugartypes.Var "xs")]
                                               ))))
                                        )))))
                                ],
                              (Some ([a], [a]))))))));
                     rec_location = CommonTypes.Location.Unknown;
                     rec_signature = None; rec_unsafe_signature = false;
                     rec_frozen = true;
                     rec_pos =
                     File /home/simon/git-repos/my-links/_build/default/lib/prelude.links, line 1353, column 1363, to line 35720, column 35941
                     }
                    ])
                ],
              (Sugartypes.FnAppl ((Sugartypes.Var "go"),
                 [(Sugartypes.ListLit ([], (Some _)));
                   (Sugartypes.ListLit ([], (Some _))); (Sugartypes.Var "xs")
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Function (
                      [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                      ([("wild",
                         (Sugartypes.Datatype.Present
                            Sugartypes.Datatype.Unit))
                         ],
                       (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                      (Sugartypes.Datatype.Primitive
                         CommonTypes.Primitive.Bool)
                      ));
                    (Sugartypes.Datatype.List
                       (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                  (Sugartypes.Datatype.Tuple
                     [(Sugartypes.Datatype.List
                         (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)));
                       (Sugartypes.Datatype.List
                          (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                       ])
                  )),
               (Some ((a) ~b~> Bool, [a]) ~b~> ([a], [a]))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("groupByFlat", ((a) -b-> c, [a]) -b-> [(c, [a])]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row; a],
         ([[(Sugartypes.Pattern.Variable ("project", (_) -> _));
             (Sugartypes.Pattern.Variable ("ts", [_]))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "concatMap"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some (_, [_])))
                      ]
                    )),
                 [(Sugartypes.Block
                     ([(Sugartypes.Fun
                          { Sugartypes.fun_binder =
                            ("_fun__g126", (a) -> [(_, [a])]);
                            fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                            fun_definition =
                            ([],
                             ([[(Sugartypes.Pattern.As (("_for__g8", _),
                                   (Sugartypes.Pattern.Variable ("t", _))))
                                 ]
                                ],
                              (Sugartypes.ListLit (
                                 [(Sugartypes.TupleLit
                                     [(Sugartypes.FnAppl (
                                         (Sugartypes.Var "project"),
                                         [(Sugartypes.Var "t")]));
                                       (Sugartypes.FnAppl (
                                          (Sugartypes.TAppl (
                                             (Sugartypes.FreezeVar
                                                "concatMap"),
                                             [((Sugartypes.Datatype.Type
                                                  (Sugartypes.Datatype.TypeVar
                                                     ("$none", None, `Rigid))),
                                               (Some _));
                                               ((Sugartypes.Datatype.Type
                                                   (Sugartypes.Datatype.TypeVar
                                                      ("$none", None, `Rigid))),
                                                (Some { |_ }));
                                               ((Sugartypes.Datatype.Type
                                                   (Sugartypes.Datatype.TypeVar
                                                      ("$none", None, `Rigid))),
                                                (Some _))
                                               ]
                                             )),
                                          [(Sugartypes.Block
                                              ([(Sugartypes.Fun
                                                   { Sugartypes.fun_binder =
                                                     ("_fun__g125",
                                                      (a) -> [a]);
                                                     fun_linearity =
                                                     CommonTypes.DeclaredLinearity.Unl;
                                                     fun_definition =
                                                     ([],
                                                      ([[(Sugartypes.Pattern.As (
                                                            ("_for__g9", _),
                                                            (Sugartypes.Pattern.Variable
                                                               ("u", _))
                                                            ))
                                                          ]
                                                         ],
                                                       (Sugartypes.Conditional (
                                                          (Sugartypes.InfixAppl (
                                                             ([_; { |_ }],
                                                              (Operators.BinaryOp.Name
                                                                 "==")),
                                                             (Sugartypes.FnAppl (
                                                                (Sugartypes.Var
                                                                   "project"),
                                                                [(Sugartypes.Var
                                                                    "t")
                                                                  ]
                                                                )),
                                                             (Sugartypes.FnAppl (
                                                                (Sugartypes.Var
                                                                   "project"),
                                                                [(Sugartypes.Var
                                                                    "u")
                                                                  ]
                                                                ))
                                                             )),
                                                          (Sugartypes.ListLit (
                                                             [(Sugartypes.Var
                                                                 "u")
                                                               ],
                                                             (Some _))),
                                                          (Sugartypes.ListLit (
                                                             [], (Some _)))
                                                          ))));
                                                     fun_location =
                                                     CommonTypes.Location.Unknown;
                                                     fun_signature = None;
                                                     fun_unsafe_signature =
                                                     false; fun_frozen = true
                                                     })
                                                 ],
                                               (Sugartypes.FreezeVar
                                                  "_fun__g125")));
                                            (Sugartypes.Var "ts")]
                                          ))
                                       ])
                                   ],
                                 (Some (_, [_]))))));
                            fun_location = CommonTypes.Location.Unknown;
                            fun_signature = None;
                            fun_unsafe_signature = false; fun_frozen = true })
                        ],
                      (Sugartypes.FreezeVar "_fun__g126")));
                   (Sugartypes.Var "ts")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Function (
                      [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                      ([], (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                      (Sugartypes.Datatype.TypeVar ("c", None, `Rigid))));
                    (Sugartypes.Datatype.List
                       (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                    ],
                  ([], (Sugartypes.Datatype.Open ("b", None, `Rigid))),
                  (Sugartypes.Datatype.List
                     (Sugartypes.Datatype.Tuple
                        [(Sugartypes.Datatype.TypeVar ("c", None, `Rigid));
                          (Sugartypes.Datatype.List
                             (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                          ]))
                  )),
               (Some ((a) -b-> c, [a]) -b-> [(c, [a])])));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("assertEq", (a, a) ~> ());
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[(Sugartypes.Pattern.Variable ("actual", _));
             (Sugartypes.Pattern.Variable ("expected", _))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.Conditional (
                 (Sugartypes.InfixAppl (
                    ([_; { |wild|_ }], (Operators.BinaryOp.Name "==")),
                    (Sugartypes.Var "expected"), (Sugartypes.Var "actual"))),
                 (Sugartypes.RecordLit ([], None)),
                 (Sugartypes.Block
                    ([(Sugartypes.Exp
                         (Sugartypes.FnAppl (
                            (Sugartypes.TAppl (
                               (Sugartypes.FreezeVar "print"),
                               [((Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("$none", None, `Rigid))),
                                 (Some { |_ }))]
                               )),
                            [(Sugartypes.Constant
                                (CommonTypes.Constant.String
                                   "Assertion failed."))
                              ]
                            )));
                       (Sugartypes.Exp
                          (Sugartypes.FnAppl (
                             (Sugartypes.TAppl (
                                (Sugartypes.FreezeVar "print"),
                                [((Sugartypes.Datatype.Type
                                     (Sugartypes.Datatype.TypeVar
                                        ("$none", None, `Rigid))),
                                  (Some { |_ }))]
                                )),
                             [(Sugartypes.Constant
                                 (CommonTypes.Constant.String "Expected:"))
                               ]
                             )));
                       (Sugartypes.Exp
                          (Sugartypes.FnAppl (
                             (Sugartypes.TAppl (
                                (Sugartypes.FreezeVar "print"),
                                [((Sugartypes.Datatype.Type
                                     (Sugartypes.Datatype.TypeVar
                                        ("$none", None, `Rigid))),
                                  (Some { |_ }))]
                                )),
                             [(Sugartypes.FnAppl (
                                 (Sugartypes.TAppl (
                                    (Sugartypes.FreezeVar "show"),
                                    [((Sugartypes.Datatype.Type
                                         (Sugartypes.Datatype.TypeVar
                                            ("$none", None, `Rigid))),
                                      (Some _));
                                      ((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some { |_ }))
                                      ]
                                    )),
                                 [(Sugartypes.Var "expected")]))
                               ]
                             )));
                       (Sugartypes.Exp
                          (Sugartypes.FnAppl (
                             (Sugartypes.TAppl (
                                (Sugartypes.FreezeVar "print"),
                                [((Sugartypes.Datatype.Type
                                     (Sugartypes.Datatype.TypeVar
                                        ("$none", None, `Rigid))),
                                  (Some { |_ }))]
                                )),
                             [(Sugartypes.Constant
                                 (CommonTypes.Constant.String "but got:"))
                               ]
                             )));
                       (Sugartypes.Exp
                          (Sugartypes.FnAppl (
                             (Sugartypes.TAppl (
                                (Sugartypes.FreezeVar "print"),
                                [((Sugartypes.Datatype.Type
                                     (Sugartypes.Datatype.TypeVar
                                        ("$none", None, `Rigid))),
                                  (Some { |_ }))]
                                )),
                             [(Sugartypes.FnAppl (
                                 (Sugartypes.TAppl (
                                    (Sugartypes.FreezeVar "show"),
                                    [((Sugartypes.Datatype.Type
                                         (Sugartypes.Datatype.TypeVar
                                            ("$none", None, `Rigid))),
                                      (Some _));
                                      ((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some { |_ }))
                                      ]
                                    )),
                                 [(Sugartypes.Var "actual")]))
                               ]
                             )));
                       (Sugartypes.Exp
                          (Sugartypes.FnAppl (
                             (Sugartypes.TAppl (
                                (Sugartypes.FreezeVar "sysexit"),
                                [((Sugartypes.Datatype.Type
                                     (Sugartypes.Datatype.TypeVar
                                        ("$none", None, `Rigid))),
                                  (Some { |_ }));
                                  ((Sugartypes.Datatype.Type
                                      (Sugartypes.Datatype.TypeVar
                                         ("$none", None, `Rigid))),
                                   (Some ()))
                                  ]
                                )),
                             [(Sugartypes.Constant
                                 (CommonTypes.Constant.Int 2))
                               ]
                             )))
                       ],
                     (Sugartypes.RecordLit ([], None))))
                 ))))));
        fun_location = CommonTypes.Location.Server;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeVar ("a", None, `Rigid));
                    (Sugartypes.Datatype.TypeVar ("a", None, `Rigid))],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  Sugartypes.Datatype.Unit)),
               (Some (a, a) ~> ())));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("defaultErrorPage", (String, String, Location) {}~> Page);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([],
         ([[Sugartypes.Pattern.Any;
             (Sugartypes.Pattern.Variable ("error_string", String));
             Sugartypes.Pattern.Any]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "bodyP"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |wild }))]
                    )),
                 [(Sugartypes.Xml ("html", [], None,
                     [(Sugartypes.TextNode "\n        ");
                       (Sugartypes.Xml ("body", [], None,
                          [(Sugartypes.TextNode "\n        ");
                            (Sugartypes.Xml ("h1", [], None,
                               [(Sugartypes.TextNode "Wrong")]));
                            (Sugartypes.TextNode "\n        ");
                            (Sugartypes.Xml ("p", [], None,
                               [(Sugartypes.TextNode
                                   "Links has encountered an internal error; the error message is ");
                                 (Sugartypes.Xml ("em", [], None,
                                    [(Sugartypes.Block
                                        ([],
                                         (Sugartypes.FnAppl (
                                            (Sugartypes.TAppl (
                                               (Sugartypes.FreezeVar
                                                  "stringToXml"),
                                               [((Sugartypes.Datatype.Type
                                                    (Sugartypes.Datatype.TypeVar
                                                       ("$none", None, `Rigid))),
                                                 (Some { |wild }))]
                                               )),
                                            [(Sugartypes.Var "error_string")]
                                            ))))
                                      ]
                                    ))
                                 ]
                               ));
                            (Sugartypes.TextNode "\n        ")]
                          ));
                       (Sugartypes.TextNode "\n        ")]
                     ))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.String);
                    (Sugartypes.Datatype.Primitive
                       CommonTypes.Primitive.String);
                    (Sugartypes.Datatype.TypeApplication ("Location", []))],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   Sugartypes.Datatype.Closed),
                  (Sugartypes.Datatype.TypeApplication ("Page", [])))),
               (Some (String, String, Location) {}~> Page)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("addLocatedRouteWithErrors",
         (String, (String, Location) {hear{_}}~> Page, (String, String, Location) {hear{_}}~> Page) ~> ());
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Presence; a::Presence; a::Row],
         ([[(Sugartypes.Pattern.Variable ("path", String));
             (Sugartypes.Pattern.Variable
                ("f", (String, Location) {hear{_}}~> Page));
             (Sugartypes.Pattern.Variable
                ("error_handler", (String, String, Location) {hear{_}}~> Page))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "unsafeAddRoute"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some ::Presence ({_})));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some Page));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some ::Presence ({_})));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Var "path"); (Sugartypes.Var "f");
                   (Sugartypes.Var "error_handler")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.String);
                    (Sugartypes.Datatype.Function (
                       [(Sugartypes.Datatype.Primitive
                           CommonTypes.Primitive.String);
                         (Sugartypes.Datatype.TypeApplication ("Location", 
                            []))
                         ],
                       ([("wild",
                          (Sugartypes.Datatype.Present
                             Sugartypes.Datatype.Unit));
                          ("hear",
                           (Sugartypes.Datatype.Var ("$", None, `Rigid)))
                          ],
                        Sugartypes.Datatype.Closed),
                       (Sugartypes.Datatype.TypeApplication ("Page", []))));
                    (Sugartypes.Datatype.Function (
                       [(Sugartypes.Datatype.Primitive
                           CommonTypes.Primitive.String);
                         (Sugartypes.Datatype.Primitive
                            CommonTypes.Primitive.String);
                         (Sugartypes.Datatype.TypeApplication ("Location", 
                            []))
                         ],
                       ([("wild",
                          (Sugartypes.Datatype.Present
                             Sugartypes.Datatype.Unit));
                          ("hear",
                           (Sugartypes.Datatype.Var ("$", None, `Rigid)))
                          ],
                        Sugartypes.Datatype.Closed),
                       (Sugartypes.Datatype.TypeApplication ("Page", []))))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  Sugartypes.Datatype.Unit)),
               (Some (String, (String, Location) {hear{_}}~> Page, (String, String, Location) {hear{_}}~> Page) ~> ())));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("addLocatedRouteHandler",
         (String, (String, Location) {hear{_}}~> Page) ~> ());
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Presence; a::Row],
         ([[(Sugartypes.Pattern.Variable ("path", String));
             (Sugartypes.Pattern.Variable
                ("f", (String, Location) {hear{_}}~> Page))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "addLocatedRouteWithErrors"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some ::Presence ({_})));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some ::Presence (-)));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Var "path");
                   (Sugartypes.Block
                      ([(Sugartypes.Fun
                           { Sugartypes.fun_binder =
                             ("_fun__g127",
                              (String, Location) {|hear{_},wild}~> Page);
                             fun_linearity =
                             CommonTypes.DeclaredLinearity.Unl;
                             fun_definition =
                             ([],
                              ([[(Sugartypes.Pattern.Variable ("p", String));
                                  (Sugartypes.Pattern.Variable
                                     ("l", Location))
                                  ]
                                 ],
                               (Sugartypes.Block
                                  ([],
                                   (Sugartypes.FnAppl ((Sugartypes.Var "f"),
                                      [(Sugartypes.Var "p");
                                        (Sugartypes.Var "l")]
                                      ))))));
                             fun_location = CommonTypes.Location.Unknown;
                             fun_signature = None;
                             fun_unsafe_signature = false; fun_frozen = true
                             })
                         ],
                       (Sugartypes.FreezeVar "_fun__g127")));
                   (Sugartypes.Var "defaultErrorPage")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.String);
                    (Sugartypes.Datatype.Function (
                       [(Sugartypes.Datatype.Primitive
                           CommonTypes.Primitive.String);
                         (Sugartypes.Datatype.TypeApplication ("Location", 
                            []))
                         ],
                       ([("wild",
                          (Sugartypes.Datatype.Present
                             Sugartypes.Datatype.Unit));
                          ("hear",
                           (Sugartypes.Datatype.Var ("$", None, `Rigid)))
                          ],
                        Sugartypes.Datatype.Closed),
                       (Sugartypes.Datatype.TypeApplication ("Page", []))))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  Sugartypes.Datatype.Unit)),
               (Some (String, (String, Location) {hear{_}}~> Page) ~> ())));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("addRoute", (String, (String) {hear{_}}~> Page) ~> ());
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Presence; a::Row],
         ([[(Sugartypes.Pattern.Variable ("path", String));
             (Sugartypes.Pattern.Variable ("f", (String) {hear{_}}~> Page))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "addLocatedRouteHandler"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some ::Presence ({_})));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Var "path");
                   (Sugartypes.Block
                      ([(Sugartypes.Fun
                           { Sugartypes.fun_binder =
                             ("_fun__g128",
                              (String, Location) {|hear{_},wild}~> Page);
                             fun_linearity =
                             CommonTypes.DeclaredLinearity.Unl;
                             fun_definition =
                             ([],
                              ([[(Sugartypes.Pattern.Variable ("p", String));
                                  Sugartypes.Pattern.Any]
                                 ],
                               (Sugartypes.Block
                                  ([],
                                   (Sugartypes.FnAppl ((Sugartypes.Var "f"),
                                      [(Sugartypes.Var "p")]))))));
                             fun_location = CommonTypes.Location.Unknown;
                             fun_signature = None;
                             fun_unsafe_signature = false; fun_frozen = true
                             })
                         ],
                       (Sugartypes.FreezeVar "_fun__g128")))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.String);
                    (Sugartypes.Datatype.Function (
                       [(Sugartypes.Datatype.Primitive
                           CommonTypes.Primitive.String)
                         ],
                       ([("wild",
                          (Sugartypes.Datatype.Present
                             Sugartypes.Datatype.Unit));
                          ("hear",
                           (Sugartypes.Datatype.Var ("$", None, `Rigid)))
                          ],
                        Sugartypes.Datatype.Closed),
                       (Sugartypes.Datatype.TypeApplication ("Page", []))))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  Sugartypes.Datatype.Unit)),
               (Some (String, (String) {hear{_}}~> Page) ~> ())));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("addSimpleRouteHandler", (String, (String) {hear{_}}~> Page) ~> ());
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Presence; a::Row],
         ([[(Sugartypes.Pattern.Variable ("path", String));
             (Sugartypes.Pattern.Variable ("f", (String) {hear{_}}~> Page))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "addRoute"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some ::Presence ({_})));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Var "path"); (Sugartypes.Var "f")]))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.String);
                    (Sugartypes.Datatype.Function (
                       [(Sugartypes.Datatype.Primitive
                           CommonTypes.Primitive.String)
                         ],
                       ([("wild",
                          (Sugartypes.Datatype.Present
                             Sugartypes.Datatype.Unit));
                          ("hear",
                           (Sugartypes.Datatype.Var ("$", None, `Rigid)))
                          ],
                        Sugartypes.Datatype.Closed),
                       (Sugartypes.Datatype.TypeApplication ("Page", []))))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  Sugartypes.Datatype.Unit)),
               (Some (String, (String) {hear{_}}~> Page) ~> ())));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("serveThis", (() {hear{_}}~> Page) ~> ());
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Presence; a::Row],
         ([[(Sugartypes.Pattern.Variable ("p", () {hear{_}}~> Page))]],
          (Sugartypes.Block
             ([(Sugartypes.Exp
                  (Sugartypes.FnAppl (
                     (Sugartypes.TAppl ((Sugartypes.FreezeVar "addRoute"),
                        [((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some ::Presence ({_})));
                          ((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some { |_ }))
                          ]
                        )),
                     [(Sugartypes.Constant (CommonTypes.Constant.String "/"));
                       (Sugartypes.Block
                          ([(Sugartypes.Fun
                               { Sugartypes.fun_binder =
                                 ("_fun__g129",
                                  (String) {|hear{_},wild}~> Page);
                                 fun_linearity =
                                 CommonTypes.DeclaredLinearity.Unl;
                                 fun_definition =
                                 ([],
                                  ([[Sugartypes.Pattern.Any]],
                                   (Sugartypes.Block
                                      ([],
                                       (Sugartypes.FnAppl (
                                          (Sugartypes.Var "p"), []))))));
                                 fun_location = CommonTypes.Location.Unknown;
                                 fun_signature = None;
                                 fun_unsafe_signature = false;
                                 fun_frozen = true })
                             ],
                           (Sugartypes.FreezeVar "_fun__g129")))
                       ]
                     )))
                ],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "servePages"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |_ }))]
                    )),
                 []))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.Function ([],
                      ([("wild",
                         (Sugartypes.Datatype.Present
                            Sugartypes.Datatype.Unit));
                         ("hear",
                          (Sugartypes.Datatype.Var ("$", None, `Rigid)))
                         ],
                       Sugartypes.Datatype.Closed),
                      (Sugartypes.Datatype.TypeApplication ("Page", []))))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  Sugartypes.Datatype.Unit)),
               (Some (() {hear{_}}~> Page) ~> ())));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("serveThese", ([(String, () {hear{_}}~> Page)]) ~> ());
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Presence; a::Row],
         ([[(Sugartypes.Pattern.Variable
               ("routes", [(String, () {hear{_}}~> Page)]))
             ]
            ],
          (Sugartypes.Block
             ([(Sugartypes.Val (Sugartypes.Pattern.Any,
                  ([],
                   (Sugartypes.FnAppl (
                      (Sugartypes.TAppl ((Sugartypes.FreezeVar "map"),
                         [((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some (String, () {|hear{_},wild}~> Page)));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { |wild|_ }));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some ()))
                           ]
                         )),
                      [(Sugartypes.Block
                          ([(Sugartypes.Fun
                               { Sugartypes.fun_binder =
                                 ("_fun__g131",
                                  ((String, () {|hear{_},wild}~> Page)) ~> ());
                                 fun_linearity =
                                 CommonTypes.DeclaredLinearity.Unl;
                                 fun_definition =
                                 ([],
                                  ([[(Sugartypes.Pattern.Tuple
                                        [(Sugartypes.Pattern.Variable
                                            ("s", String));
                                          (Sugartypes.Pattern.Variable
                                             ("p", () {|hear{_},wild}~> Page))
                                          ])
                                      ]
                                     ],
                                   (Sugartypes.Block
                                      ([],
                                       (Sugartypes.FnAppl (
                                          (Sugartypes.TAppl (
                                             (Sugartypes.FreezeVar "addRoute"),
                                             [((Sugartypes.Datatype.Type
                                                  (Sugartypes.Datatype.TypeVar
                                                     ("$none", None, `Rigid))),
                                               (Some ::Presence ({_})));
                                               ((Sugartypes.Datatype.Type
                                                   (Sugartypes.Datatype.TypeVar
                                                      ("$none", None, `Rigid))),
                                                (Some { |_ }))
                                               ]
                                             )),
                                          [(Sugartypes.Var "s");
                                            (Sugartypes.Block
                                               ([(Sugartypes.Fun
                                                    { Sugartypes.fun_binder =
                                                      ("_fun__g130",
                                                       (String) {|hear{_},wild}~> Page);
                                                      fun_linearity =
                                                      CommonTypes.DeclaredLinearity.Unl;
                                                      fun_definition =
                                                      ([],
                                                       ([[Sugartypes.Pattern.Any
                                                           ]
                                                          ],
                                                        (Sugartypes.Block
                                                           ([],
                                                            (Sugartypes.FnAppl (
                                                               (Sugartypes.Var
                                                                  "p"),
                                                               []))))));
                                                      fun_location =
                                                      CommonTypes.Location.Unknown;
                                                      fun_signature = None;
                                                      fun_unsafe_signature =
                                                      false;
                                                      fun_frozen = true })
                                                  ],
                                                (Sugartypes.FreezeVar
                                                   "_fun__g130")))
                                            ]
                                          ))))));
                                 fun_location = CommonTypes.Location.Unknown;
                                 fun_signature = None;
                                 fun_unsafe_signature = false;
                                 fun_frozen = true })
                             ],
                           (Sugartypes.FreezeVar "_fun__g131")));
                        (Sugartypes.Var "routes")]
                      ))),
                  CommonTypes.Location.Unknown, None))
                ],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "servePages"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |_ }))]
                    )),
                 []))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.List
                      (Sugartypes.Datatype.Tuple
                         [(Sugartypes.Datatype.Primitive
                             CommonTypes.Primitive.String);
                           (Sugartypes.Datatype.Function ([],
                              ([("wild",
                                 (Sugartypes.Datatype.Present
                                    Sugartypes.Datatype.Unit));
                                 ("hear",
                                  (Sugartypes.Datatype.Var
                                     ("$", None, `Rigid)))
                                 ],
                               Sugartypes.Datatype.Closed),
                              (Sugartypes.Datatype.TypeApplication ("Page",
                                 []))
                              ))
                           ]))
                    ],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  Sugartypes.Datatype.Unit)),
               (Some ([(String, () {hear{_}}~> Page)]) ~> ())));
        fun_unsafe_signature = false; fun_frozen = true })
   ],
 None)
compiling to IR
compiled IR
Finishing process MAIN
Post-Frontend AST:
([(Sugartypes.Typenames
     [("MvuEvents_0$PropertyName", [],
       ((Sugartypes.Datatype.Primitive CommonTypes.Primitive.String),
        (Some String)),
       File /home/simon/git-repos/my-links/_build/default/lib/stdlib/mvuEvents.links, line 4, columns 95 to 125)
       ]);
   (Sugartypes.Typenames
      [("MvuEvents_0$PropertyValue", [],
        ((Sugartypes.Datatype.Primitive CommonTypes.Primitive.String),
         (Some String)),
        File /home/simon/git-repos/my-links/_build/default/lib/stdlib/mvuEvents.links, line 5, columns 127 to 158)
        ]);
   (Sugartypes.Typenames
      [("MvuEvents_0$EventName", [],
        ((Sugartypes.Datatype.Primitive CommonTypes.Primitive.String),
         (Some String)),
        File /home/simon/git-repos/my-links/_build/default/lib/stdlib/mvuEvents.links, line 8, columns 192 to 219)
        ]);
   (Sugartypes.Typenames
      [("MvuEvents_0$EventKey", [],
        ((Sugartypes.Datatype.Primitive CommonTypes.Primitive.String),
         (Some String)),
        File /home/simon/git-repos/my-links/_build/default/lib/stdlib/mvuEvents.links, line 9, columns 221 to 247)
        ]);
   (Sugartypes.Typenames
      [("MvuEvents_0$EventValue", [],
        ((Sugartypes.Datatype.Primitive CommonTypes.Primitive.String),
         (Some String)),
        File /home/simon/git-repos/my-links/_build/default/lib/stdlib/mvuEvents.links, line 10, columns 249 to 277)
        ]);
   (Sugartypes.Typenames
      [("MvuEvents_0$MouseEvent", [],
        ((Sugartypes.Datatype.Record
            ([("altKey",
               (Sugartypes.Datatype.Present
                  (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Bool)));
               ("button",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)));
               ("buttons",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)));
               ("clientX",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)));
               ("clientY",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)));
               ("ctrlKey",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Bool)));
               ("metaKey",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Bool)));
               ("movementX",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)));
               ("movementY",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)));
               ("offsetX",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)));
               ("offsetY",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)));
               ("pageX",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)));
               ("pageY",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)));
               ("screenX",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)));
               ("screenY",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)));
               ("shiftKey",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Bool)));
               ("which",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)));
               ("x",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)));
               ("y",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)))
               ],
             Sugartypes.Datatype.Closed)),
         (Some (altKey:Bool,button:Int,buttons:Int,clientX:Int,clientY:Int,ctrlKey:Bool,metaKey:Bool,movementX:Int,movementY:Int,offsetX:Int,offsetY:Int,pageX:Int,pageY:Int,screenX:Int,screenY:Int,shiftKey:Bool,which:Int,x:Int,y:Int))),
        File /home/simon/git-repos/my-links/_build/default/lib/stdlib/mvuEvents.links, line 14, column 34, to line 282, column 667)
        ]);
   (Sugartypes.Typenames
      [("MvuEvents_0$KeyboardEvent", [],
        ((Sugartypes.Datatype.Record
            ([("altKey",
               (Sugartypes.Datatype.Present
                  (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Bool)));
               ("code",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)));
               ("ctrlKey",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Bool)));
               ("isComposing",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Bool)));
               ("key",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.String)));
               ("locale",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.String)));
               ("location",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)));
               ("metaKey",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Bool)));
               ("repeat",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Bool)));
               ("shiftKey",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Bool)))
               ],
             Sugartypes.Datatype.Closed)),
         (Some (altKey:Bool,code:Int,ctrlKey:Bool,isComposing:Bool,key:String,locale:String,location:Int,metaKey:Bool,repeat:Bool,shiftKey:Bool))),
        File /home/simon/git-repos/my-links/_build/default/lib/stdlib/mvuEvents.links, line 37, column 47, to line 724, column 926)
        ]);
   (Sugartypes.Typenames
      [("MvuEvents_0$EventHandler",
        [(("a",
           ((Some CommonTypes.PrimaryKind.Type),
            (Some (CommonTypes.Linearity.Any, CommonTypes.Restriction.Any))),
           `Rigid),
          (Some a::(Any,Any)))],
        ((Sugartypes.Datatype.Variant
            ([("PropertyHandler",
               (Sugartypes.Datatype.Present
                  (Sugartypes.Datatype.Tuple
                     [(Sugartypes.Datatype.TypeApplication (
                         "MvuEvents_0$EventName", []));
                       (Sugartypes.Datatype.TypeApplication (
                          "MvuEvents_0$PropertyName", []));
                       (Sugartypes.Datatype.Function (
                          [(Sugartypes.Datatype.TypeApplication (
                              "MvuEvents_0$PropertyValue", []))
                            ],
                          ([("wild",
                             (Sugartypes.Datatype.Present
                                Sugartypes.Datatype.Unit))
                             ],
                           Sugartypes.Datatype.Closed),
                          (Sugartypes.Datatype.TypeApplication ("Maybe",
                             [(Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("a", None, `Rigid)))
                               ]
                             ))
                          ))
                       ])));
               ("UnitHandler",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Tuple
                      [(Sugartypes.Datatype.TypeApplication (
                          "MvuEvents_0$EventName", []));
                        (Sugartypes.Datatype.Function ([],
                           ([("wild",
                              (Sugartypes.Datatype.Present
                                 Sugartypes.Datatype.Unit))
                              ],
                            Sugartypes.Datatype.Closed),
                           (Sugartypes.Datatype.TypeVar ("a", None, `Rigid))
                           ))
                        ])));
               ("MouseEventHandler",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Tuple
                      [(Sugartypes.Datatype.TypeApplication (
                          "MvuEvents_0$EventName", []));
                        (Sugartypes.Datatype.Function (
                           [(Sugartypes.Datatype.TypeApplication (
                               "MvuEvents_0$MouseEvent", []))
                             ],
                           ([("wild",
                              (Sugartypes.Datatype.Present
                                 Sugartypes.Datatype.Unit))
                              ],
                            Sugartypes.Datatype.Closed),
                           (Sugartypes.Datatype.TypeApplication ("Maybe",
                              [(Sugartypes.Datatype.Type
                                  (Sugartypes.Datatype.TypeVar
                                     ("a", None, `Rigid)))
                                ]
                              ))
                           ))
                        ])));
               ("KeyboardEventHandler",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Tuple
                      [(Sugartypes.Datatype.TypeApplication (
                          "MvuEvents_0$EventName", []));
                        (Sugartypes.Datatype.Function (
                           [(Sugartypes.Datatype.TypeApplication (
                               "MvuEvents_0$KeyboardEvent", []))
                             ],
                           ([("wild",
                              (Sugartypes.Datatype.Present
                                 Sugartypes.Datatype.Unit))
                              ],
                            Sugartypes.Datatype.Closed),
                           (Sugartypes.Datatype.TypeApplication ("Maybe",
                              [(Sugartypes.Datatype.Type
                                  (Sugartypes.Datatype.TypeVar
                                     ("a", None, `Rigid)))
                                ]
                              ))
                           ))
                        ])))
               ],
             Sugartypes.Datatype.Closed)),
         (Some [|KeyboardEventHandler:(MvuEvents.EventName, (MvuEvents.KeyboardEvent) {}~> Maybe (a::Any))|MouseEventHandler:(MvuEvents.EventName, (MvuEvents.MouseEvent) {}~> Maybe (a::Any))|PropertyHandler:(MvuEvents.EventName, MvuEvents.PropertyName, (MvuEvents.PropertyValue) {}~> Maybe (a::Any))|UnitHandler:(MvuEvents.EventName, () {}~> a::Any)|])),
        File /home/simon/git-repos/my-links/_build/default/lib/stdlib/mvuEvents.links, line 50, column 62, to line 956, column 1670)
        ]);
   (Sugartypes.Typenames
      [("MvuSubscriptions_1$Sub",
        [(("a",
           ((Some CommonTypes.PrimaryKind.Type),
            (Some (CommonTypes.Linearity.Any, CommonTypes.Restriction.Any))),
           `Rigid),
          (Some a::(Any,Any)))],
        ((Sugartypes.Datatype.Variant
            ([("SubEmpty",
               (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit));
               ("SubAppend",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Tuple
                      [(Sugartypes.Datatype.TypeApplication (
                          "MvuSubscriptions_1$Sub",
                          [(Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("a", None, `Rigid)))
                            ]
                          ));
                        (Sugartypes.Datatype.TypeApplication (
                           "MvuSubscriptions_1$Sub",
                           [(Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("a", None, `Rigid)))
                             ]
                           ))
                        ])));
               ("SubEventHandler",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.TypeApplication (
                      "MvuEvents_0$EventHandler",
                      [(Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                        ]
                      ))));
               ("SubInterval",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Tuple
                      [(Sugartypes.Datatype.Primitive
                          CommonTypes.Primitive.Int);
                        (Sugartypes.Datatype.Function ([],
                           ([("wild",
                              (Sugartypes.Datatype.Present
                                 Sugartypes.Datatype.Unit))
                              ],
                            Sugartypes.Datatype.Closed),
                           (Sugartypes.Datatype.TypeVar ("a", None, `Rigid))
                           ))
                        ])));
               ("SubAnimationFrame",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Function (
                      [(Sugartypes.Datatype.Primitive
                          CommonTypes.Primitive.Int)
                        ],
                      ([("wild",
                         (Sugartypes.Datatype.Present
                            Sugartypes.Datatype.Unit))
                         ],
                       Sugartypes.Datatype.Closed),
                      (Sugartypes.Datatype.TypeVar ("a", None, `Rigid))))))
               ],
             Sugartypes.Datatype.Closed)),
         (Some [|SubAnimationFrame:(Int) {}~> a::Any|SubAppend:(MvuSubscriptions.Sub (a::Any), MvuSubscriptions.Sub (a::Any))|SubEmpty|SubEventHandler:MvuEvents.EventHandler (a::Any)|SubInterval:(Int, () {}~> a::Any)|])),
        File /home/simon/git-repos/my-links/_build/default/lib/stdlib/mvuSubscriptions.links, line 3, column 9, to line 24, column 314)
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuSubscriptions_1$append",
         ([|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|c::Any)|])|c::Any)|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|c::Any)|], [|SubEmpty|b|])|c::Any)|]) -> [|SubAppend:([|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|c::Any)|])|c::Any)|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|c::Any)|], [|SubEmpty|b|])|c::Any)|])|SubEmpty|c::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable
               ("s1",
                [|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|c::Any)|])|c::Any)|]));
             (Sugartypes.Pattern.Variable
                ("s2",
                 [|SubEmpty|(mu a . SubAppend:([|SubEmpty|(mu b . SubAppend:([|SubEmpty|b|], [|SubEmpty|a|])|c::Any)|], [|SubEmpty|a|])|c::Any)|]))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.Switch (
                 (Sugartypes.TupleLit
                    [(Sugartypes.Var "s1"); (Sugartypes.Var "s2")]),
                 [((Sugartypes.Pattern.Tuple
                      [(Sugartypes.Pattern.Variant ("SubEmpty", None));
                        (Sugartypes.Pattern.Variable
                           ("s2",
                            [|SubEmpty|(mu a . SubAppend:([|SubEmpty|(mu b . SubAppend:([|SubEmpty|b|], [|SubEmpty|a|])|c::Any)|], [|SubEmpty|a|])|c::Any)|]))
                        ]),
                   (Sugartypes.Block ([], (Sugartypes.Var "s2"))));
                   ((Sugartypes.Pattern.Tuple
                       [(Sugartypes.Pattern.Variable
                           ("s1",
                            [|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|c::Any)|])|c::Any)|]));
                         (Sugartypes.Pattern.Variant ("SubEmpty", None))]),
                    (Sugartypes.Block ([], (Sugartypes.Var "s1"))));
                   ((Sugartypes.Pattern.Tuple
                       [(Sugartypes.Pattern.Variable
                           ("s1",
                            [|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|c::Any)|])|c::Any)|]));
                         (Sugartypes.Pattern.Variable
                            ("s2",
                             [|SubEmpty|(mu a . SubAppend:([|SubEmpty|(mu b . SubAppend:([|SubEmpty|b|], [|SubEmpty|a|])|c::Any)|], [|SubEmpty|a|])|c::Any)|]))
                         ]),
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.ConstructorLit ("SubAppend",
                           (Some (Sugartypes.TupleLit
                                    [(Sugartypes.Var "s1");
                                      (Sugartypes.Var "s2")])),
                           (Some [|SubAppend:([|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|c::Any)|])|c::Any)|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|c::Any)|], [|SubEmpty|b|])|c::Any)|])|SubEmpty|c::Any|])
                           )))))
                   ],
                 (Some [|SubAppend:([|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|c::Any)|])|c::Any)|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|c::Any)|], [|SubEmpty|b|])|c::Any)|])|SubEmpty|c::Any|])
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuSubscriptions_1$+^",
         ([|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|c::Any)|])|c::Any)|], [|SubEmpty|(mu d . SubAppend:([|SubEmpty|(mu e . SubAppend:([|SubEmpty|e|], [|SubEmpty|d|])|c::Any)|], [|SubEmpty|d|])|c::Any)|]) -> [|SubAppend:([|SubEmpty|(mu g . SubAppend:([|SubEmpty|g|], [|SubEmpty|(mu h . SubAppend:([|SubEmpty|g|], [|SubEmpty|h|])|c::Any)|])|c::Any)|], [|SubEmpty|(mu i . SubAppend:([|SubEmpty|(mu j . SubAppend:([|SubEmpty|j|], [|SubEmpty|i|])|c::Any)|], [|SubEmpty|i|])|c::Any)|])|SubEmpty|c::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable
               ("s1",
                [|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|c::Any)|])|c::Any)|]));
             (Sugartypes.Pattern.Variable
                ("s2",
                 [|SubEmpty|(mu a . SubAppend:([|SubEmpty|(mu b . SubAppend:([|SubEmpty|b|], [|SubEmpty|a|])|c::Any)|], [|SubEmpty|a|])|c::Any)|]))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuSubscriptions_1$append"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |_::Any }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Var "s1"); (Sugartypes.Var "s2")]))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuSubscriptions_1$concat",
         ([[|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|c::Any)|])|c::Any)|]]) ~> [|SubEmpty|(mu e . SubAppend:([|SubEmpty|(mu f . SubAppend:([|SubEmpty|f|], [|SubEmpty|e|])|c::Any)|], [|SubEmpty|e|])|c::Any)|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable
               ("nodes",
                [[|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|c::Any)|])|c::Any)|]]))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "fold_right"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some [|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|c::Any)|])|c::Any)|]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some [|SubEmpty|(mu a . SubAppend:([|SubEmpty|(mu b . SubAppend:([|SubEmpty|b|], [|SubEmpty|a|])|c::Any)|], [|SubEmpty|a|])|c::Any)|]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Block
                     ([(Sugartypes.Fun
                          { Sugartypes.fun_binder =
                            ("_fun__g132",
                             ([|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|c::Any)|])|c::Any)|], [|SubEmpty|(mu d . SubAppend:([|SubEmpty|(mu e . SubAppend:([|SubEmpty|e|], [|SubEmpty|d|])|c::Any)|], [|SubEmpty|d|])|c::Any)|]) ~> [|SubAppend:([|SubEmpty|(mu g . SubAppend:([|SubEmpty|g|], [|SubEmpty|(mu h . SubAppend:([|SubEmpty|g|], [|SubEmpty|h|])|c::Any)|])|c::Any)|], [|SubEmpty|(mu i . SubAppend:([|SubEmpty|(mu j . SubAppend:([|SubEmpty|j|], [|SubEmpty|i|])|c::Any)|], [|SubEmpty|i|])|c::Any)|])|SubEmpty|c::Any|]);
                            fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                            fun_definition =
                            ([],
                             ([[(Sugartypes.Pattern.Variable
                                   ("x",
                                    [|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|c::Any)|])|c::Any)|]));
                                 (Sugartypes.Pattern.Variable
                                    ("acc",
                                     [|SubEmpty|(mu a . SubAppend:([|SubEmpty|(mu b . SubAppend:([|SubEmpty|b|], [|SubEmpty|a|])|c::Any)|], [|SubEmpty|a|])|c::Any)|]))
                                 ]
                                ],
                              (Sugartypes.Block
                                 ([],
                                  (Sugartypes.FnAppl (
                                     (Sugartypes.TAppl (
                                        (Sugartypes.FreezeVar
                                           "MvuSubscriptions_1$append"),
                                        [((Sugartypes.Datatype.Type
                                             (Sugartypes.Datatype.TypeVar
                                                ("$none", None, `Rigid))),
                                          (Some { |_::Any }));
                                          ((Sugartypes.Datatype.Type
                                              (Sugartypes.Datatype.TypeVar
                                                 ("$none", None, `Rigid))),
                                           (Some { |wild|_ }))
                                          ]
                                        )),
                                     [(Sugartypes.Var "x");
                                       (Sugartypes.Var "acc")]
                                     ))))));
                            fun_location = CommonTypes.Location.Unknown;
                            fun_signature = None;
                            fun_unsafe_signature = false; fun_frozen = true })
                        ],
                      (Sugartypes.FreezeVar "_fun__g132")));
                   (Sugartypes.ConstructorLit ("SubEmpty", None,
                      (Some [|SubEmpty|SubAppend:([|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|c::Any)|])|c::Any)|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|c::Any)|], [|SubEmpty|b|])|c::Any)|])|c::Any|])
                      ));
                   (Sugartypes.Var "nodes")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuSubscriptions_1$onKeyboardEvent",
         (String, (MvuEvents.KeyboardEvent) {}~> Maybe (a::Any)) -> MvuSubscriptions.Sub (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("evtName", String));
             (Sugartypes.Pattern.Variable
                ("f", (MvuEvents.KeyboardEvent) {}~> Maybe (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([(Sugartypes.Val (
                  (Sugartypes.Pattern.Variable
                     ("hdler",
                      [|KeyboardEventHandler:(String, (MvuEvents.KeyboardEvent) {}~> Maybe (_::Any))|_::Any|])),
                  ([a::Row(Any,Any)],
                   (Sugartypes.ConstructorLit ("KeyboardEventHandler",
                      (Some (Sugartypes.TupleLit
                               [(Sugartypes.Var "evtName");
                                 (Sugartypes.Block
                                    ([(Sugartypes.Fun
                                         { Sugartypes.fun_binder =
                                           ("_fun__g133",
                                            (MvuEvents.KeyboardEvent) {}~> Maybe (_::Any));
                                           fun_linearity =
                                           CommonTypes.DeclaredLinearity.Unl;
                                           fun_definition =
                                           ([],
                                            ([[(Sugartypes.Pattern.Variable
                                                  ("evt",
                                                   MvuEvents.KeyboardEvent))
                                                ]
                                               ],
                                             (Sugartypes.Block
                                                ([],
                                                 (Sugartypes.FnAppl (
                                                    (Sugartypes.Var "f"),
                                                    [(Sugartypes.Var "evt")]
                                                    ))))));
                                           fun_location =
                                           CommonTypes.Location.Unknown;
                                           fun_signature = None;
                                           fun_unsafe_signature = false;
                                           fun_frozen = true })
                                       ],
                                     (Sugartypes.FreezeVar "_fun__g133")))
                                 ])),
                      (Some [|KeyboardEventHandler:(String, (MvuEvents.KeyboardEvent) {}~> Maybe (_::Any))|_::Any|])
                      ))),
                  CommonTypes.Location.Unknown, None))
                ],
              (Sugartypes.ConstructorLit ("SubEventHandler",
                 (Some (Sugartypes.TupleLit
                          [(Sugartypes.TAppl ((Sugartypes.FreezeVar "hdler"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { |MouseEventHandler:(MvuEvents.EventName, (MvuEvents.MouseEvent) {}~> Maybe (a::Any)),PropertyHandler:(MvuEvents.EventName, MvuEvents.PropertyName, (MvuEvents.PropertyValue) {}~> Maybe (a::Any)),UnitHandler:(MvuEvents.EventName, () {}~> a::Any) }))
                                ]
                              ))
                            ])),
                 (Some [|SubEventHandler:[|KeyboardEventHandler:(String, (MvuEvents.KeyboardEvent) {}~> Maybe (a::Any))|MouseEventHandler:(MvuEvents.EventName, (MvuEvents.MouseEvent) {}~> Maybe (a::Any))|PropertyHandler:(MvuEvents.EventName, MvuEvents.PropertyName, (MvuEvents.PropertyValue) {}~> Maybe (a::Any))|UnitHandler:(MvuEvents.EventName, () {}~> a::Any)|]|SubAnimationFrame:(Int) {}~> a::Any|SubAppend:(MvuSubscriptions.Sub (a::Any), MvuSubscriptions.Sub (a::Any))|SubEmpty|SubInterval:(Int, () {}~> a::Any)|])
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Forall (
                  [("a",
                    ((Some CommonTypes.PrimaryKind.Type),
                     (Some (CommonTypes.Linearity.Any,
                            CommonTypes.Restriction.Any))),
                    `Rigid);
                    ("e", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid)
                    ],
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.Primitive
                         CommonTypes.Primitive.String);
                       (Sugartypes.Datatype.Function (
                          [(Sugartypes.Datatype.TypeApplication (
                              "MvuEvents_0$KeyboardEvent", []))
                            ],
                          ([("wild",
                             (Sugartypes.Datatype.Present
                                Sugartypes.Datatype.Unit))
                             ],
                           Sugartypes.Datatype.Closed),
                          (Sugartypes.Datatype.TypeApplication ("Maybe",
                             [(Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("a", None, `Rigid)))
                               ]
                             ))
                          ))
                       ],
                     ([], (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                     (Sugartypes.Datatype.TypeApplication (
                        "MvuSubscriptions_1$Sub",
                        [(Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                          ]
                        ))
                     ))
                  )),
               (Some (String, (MvuEvents.KeyboardEvent) {}~> Maybe (a::Any)) -> MvuSubscriptions.Sub (a::Any))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuSubscriptions_1$onKeyDown",
         ((MvuEvents.KeyboardEvent) {}~> a::Any) -> MvuSubscriptions.Sub (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable
               ("f", (MvuEvents.KeyboardEvent) {}~> _::Any))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar
                       "MvuSubscriptions_1$onKeyboardEvent"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "keydown"));
                   (Sugartypes.Block
                      ([(Sugartypes.Fun
                           { Sugartypes.fun_binder =
                             ("_fun__g134",
                              (MvuEvents.KeyboardEvent) {}~> [|Just:_::Any|Nothing|]);
                             fun_linearity =
                             CommonTypes.DeclaredLinearity.Unl;
                             fun_definition =
                             ([],
                              ([[(Sugartypes.Pattern.Variable
                                    ("x", MvuEvents.KeyboardEvent))
                                  ]
                                 ],
                               (Sugartypes.Block
                                  ([],
                                   (Sugartypes.ConstructorLit ("Just",
                                      (Some (Sugartypes.TupleLit
                                               [(Sugartypes.FnAppl (
                                                   (Sugartypes.Var "f"),
                                                   [(Sugartypes.Var "x")]))
                                                 ])),
                                      (Some [|Just:_::Any|Nothing|])))))));
                             fun_location = CommonTypes.Location.Unknown;
                             fun_signature = None;
                             fun_unsafe_signature = false; fun_frozen = true
                             })
                         ],
                       (Sugartypes.FreezeVar "_fun__g134")))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuSubscriptions_1$onKeyUp",
         ((MvuEvents.KeyboardEvent) {}~> a::Any) -> MvuSubscriptions.Sub (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable
               ("f", (MvuEvents.KeyboardEvent) {}~> _::Any))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar
                       "MvuSubscriptions_1$onKeyboardEvent"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "keyup"));
                   (Sugartypes.Block
                      ([(Sugartypes.Fun
                           { Sugartypes.fun_binder =
                             ("_fun__g135",
                              (MvuEvents.KeyboardEvent) {}~> [|Just:_::Any|Nothing|]);
                             fun_linearity =
                             CommonTypes.DeclaredLinearity.Unl;
                             fun_definition =
                             ([],
                              ([[(Sugartypes.Pattern.Variable
                                    ("x", MvuEvents.KeyboardEvent))
                                  ]
                                 ],
                               (Sugartypes.Block
                                  ([],
                                   (Sugartypes.ConstructorLit ("Just",
                                      (Some (Sugartypes.TupleLit
                                               [(Sugartypes.FnAppl (
                                                   (Sugartypes.Var "f"),
                                                   [(Sugartypes.Var "x")]))
                                                 ])),
                                      (Some [|Just:_::Any|Nothing|])))))));
                             fun_location = CommonTypes.Location.Unknown;
                             fun_signature = None;
                             fun_unsafe_signature = false; fun_frozen = true
                             })
                         ],
                       (Sugartypes.FreezeVar "_fun__g135")))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuSubscriptions_1$onKeyPress",
         ((MvuEvents.KeyboardEvent) {}~> a::Any) -> MvuSubscriptions.Sub (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable
               ("f", (MvuEvents.KeyboardEvent) {}~> _::Any))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar
                       "MvuSubscriptions_1$onKeyboardEvent"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "keypress"));
                   (Sugartypes.Block
                      ([(Sugartypes.Fun
                           { Sugartypes.fun_binder =
                             ("_fun__g136",
                              (MvuEvents.KeyboardEvent) {}~> [|Just:_::Any|Nothing|]);
                             fun_linearity =
                             CommonTypes.DeclaredLinearity.Unl;
                             fun_definition =
                             ([],
                              ([[(Sugartypes.Pattern.Variable
                                    ("x", MvuEvents.KeyboardEvent))
                                  ]
                                 ],
                               (Sugartypes.Block
                                  ([],
                                   (Sugartypes.ConstructorLit ("Just",
                                      (Some (Sugartypes.TupleLit
                                               [(Sugartypes.FnAppl (
                                                   (Sugartypes.Var "f"),
                                                   [(Sugartypes.Var "x")]))
                                                 ])),
                                      (Some [|Just:_::Any|Nothing|])))))));
                             fun_location = CommonTypes.Location.Unknown;
                             fun_signature = None;
                             fun_unsafe_signature = false; fun_frozen = true
                             })
                         ],
                       (Sugartypes.FreezeVar "_fun__g136")))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuSubscriptions_1$onMouseEvent",
         (String, (MvuEvents.MouseEvent) {}~> Maybe (a::Any)) -> MvuSubscriptions.Sub (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("evtName", String));
             (Sugartypes.Pattern.Variable
                ("f", (MvuEvents.MouseEvent) {}~> Maybe (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([(Sugartypes.Val (
                  (Sugartypes.Pattern.Variable
                     ("hdler",
                      [|MouseEventHandler:(String, (MvuEvents.MouseEvent) {}~> Maybe (_::Any))|_::Any|])),
                  ([a::Row(Any,Any)],
                   (Sugartypes.ConstructorLit ("MouseEventHandler",
                      (Some (Sugartypes.TupleLit
                               [(Sugartypes.Var "evtName");
                                 (Sugartypes.Block
                                    ([(Sugartypes.Fun
                                         { Sugartypes.fun_binder =
                                           ("_fun__g137",
                                            (MvuEvents.MouseEvent) {}~> Maybe (_::Any));
                                           fun_linearity =
                                           CommonTypes.DeclaredLinearity.Unl;
                                           fun_definition =
                                           ([],
                                            ([[(Sugartypes.Pattern.Variable
                                                  ("evt",
                                                   MvuEvents.MouseEvent))
                                                ]
                                               ],
                                             (Sugartypes.Block
                                                ([],
                                                 (Sugartypes.FnAppl (
                                                    (Sugartypes.Var "f"),
                                                    [(Sugartypes.Var "evt")]
                                                    ))))));
                                           fun_location =
                                           CommonTypes.Location.Unknown;
                                           fun_signature = None;
                                           fun_unsafe_signature = false;
                                           fun_frozen = true })
                                       ],
                                     (Sugartypes.FreezeVar "_fun__g137")))
                                 ])),
                      (Some [|MouseEventHandler:(String, (MvuEvents.MouseEvent) {}~> Maybe (_::Any))|_::Any|])
                      ))),
                  CommonTypes.Location.Unknown, None))
                ],
              (Sugartypes.ConstructorLit ("SubEventHandler",
                 (Some (Sugartypes.TupleLit
                          [(Sugartypes.TAppl ((Sugartypes.FreezeVar "hdler"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { |KeyboardEventHandler:(MvuEvents.EventName, (MvuEvents.KeyboardEvent) {}~> Maybe (a::Any)),PropertyHandler:(MvuEvents.EventName, MvuEvents.PropertyName, (MvuEvents.PropertyValue) {}~> Maybe (a::Any)),UnitHandler:(MvuEvents.EventName, () {}~> a::Any) }))
                                ]
                              ))
                            ])),
                 (Some [|SubEventHandler:[|MouseEventHandler:(String, (MvuEvents.MouseEvent) {}~> Maybe (a::Any))|KeyboardEventHandler:(MvuEvents.EventName, (MvuEvents.KeyboardEvent) {}~> Maybe (a::Any))|PropertyHandler:(MvuEvents.EventName, MvuEvents.PropertyName, (MvuEvents.PropertyValue) {}~> Maybe (a::Any))|UnitHandler:(MvuEvents.EventName, () {}~> a::Any)|]|SubAnimationFrame:(Int) {}~> a::Any|SubAppend:(MvuSubscriptions.Sub (a::Any), MvuSubscriptions.Sub (a::Any))|SubEmpty|SubInterval:(Int, () {}~> a::Any)|])
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Forall (
                  [("a",
                    ((Some CommonTypes.PrimaryKind.Type),
                     (Some (CommonTypes.Linearity.Any,
                            CommonTypes.Restriction.Any))),
                    `Rigid);
                    ("e", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid)
                    ],
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.Primitive
                         CommonTypes.Primitive.String);
                       (Sugartypes.Datatype.Function (
                          [(Sugartypes.Datatype.TypeApplication (
                              "MvuEvents_0$MouseEvent", []))
                            ],
                          ([("wild",
                             (Sugartypes.Datatype.Present
                                Sugartypes.Datatype.Unit))
                             ],
                           Sugartypes.Datatype.Closed),
                          (Sugartypes.Datatype.TypeApplication ("Maybe",
                             [(Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("a", None, `Rigid)))
                               ]
                             ))
                          ))
                       ],
                     ([], (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                     (Sugartypes.Datatype.TypeApplication (
                        "MvuSubscriptions_1$Sub",
                        [(Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                          ]
                        ))
                     ))
                  )),
               (Some (String, (MvuEvents.MouseEvent) {}~> Maybe (a::Any)) -> MvuSubscriptions.Sub (a::Any))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuSubscriptions_1$onMouseMove",
         ((MvuEvents.MouseEvent) {}~> Maybe (a::Any)) -> MvuSubscriptions.Sub (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable
               ("f", (MvuEvents.MouseEvent) {}~> Maybe (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuSubscriptions_1$onMouseEvent"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "mousemove"));
                   (Sugartypes.Var "f")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuSubscriptions_1$getEvery",
         (a::Any, b::Any) -> [|SubInterval:(a::Any, b::Any)|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::(Any,Any); a::Row; a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("interval", _::Any));
             (Sugartypes.Pattern.Variable ("f", _::Any))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.ConstructorLit ("SubInterval",
                 (Some (Sugartypes.TupleLit
                          [(Sugartypes.Var "interval"); (Sugartypes.Var "f")])),
                 (Some [|SubInterval:(_::Any, _::Any)|_::Any|])))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuSubscriptions_1$animationFrame",
         (a::Any) -> [|SubAnimationFrame:a::Any|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("f", _::Any))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.ConstructorLit ("SubAnimationFrame",
                 (Some (Sugartypes.TupleLit [(Sugartypes.Var "f")])),
                 (Some [|SubAnimationFrame:_::Any|_::Any|])))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Typenames
      [("MvuAttrs_2$AttrKey", [],
        ((Sugartypes.Datatype.Primitive CommonTypes.Primitive.String),
         (Some String)),
        File /home/simon/git-repos/my-links/_build/default/lib/stdlib/mvuAttrs.links, line 5, columns 57 to 82)
        ]);
   (Sugartypes.Typenames
      [("MvuAttrs_2$AttrValue", [],
        ((Sugartypes.Datatype.Primitive CommonTypes.Primitive.String),
         (Some String)),
        File /home/simon/git-repos/my-links/_build/default/lib/stdlib/mvuAttrs.links, line 6, columns 84 to 111)
        ]);
   (Sugartypes.Typenames
      [("MvuAttrs_2$Attr",
        [(("a",
           ((Some CommonTypes.PrimaryKind.Type),
            (Some (CommonTypes.Linearity.Any, CommonTypes.Restriction.Any))),
           `Rigid),
          (Some a::(Any,Any)))],
        ((Sugartypes.Datatype.Variant
            ([("AttrEmpty",
               (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit));
               ("AttrAppend",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Tuple
                      [(Sugartypes.Datatype.TypeApplication (
                          "MvuAttrs_2$Attr",
                          [(Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("a", None, `Rigid)))
                            ]
                          ));
                        (Sugartypes.Datatype.TypeApplication (
                           "MvuAttrs_2$Attr",
                           [(Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("a", None, `Rigid)))
                             ]
                           ))
                        ])));
               ("AttrAttribute",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Tuple
                      [(Sugartypes.Datatype.TypeApplication (
                          "MvuAttrs_2$AttrKey", []));
                        (Sugartypes.Datatype.TypeApplication (
                           "MvuAttrs_2$AttrValue", []))
                        ])));
               ("AttrEventHandler",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.TypeApplication (
                      "MvuEvents_0$EventHandler",
                      [(Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                        ]
                      ))))
               ],
             Sugartypes.Datatype.Closed)),
         (Some [|AttrAppend:(MvuAttrs.Attr (a::Any), MvuAttrs.Attr (a::Any))|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEmpty|AttrEventHandler:MvuEvents.EventHandler (a::Any)|])),
        File /home/simon/git-repos/my-links/_build/default/lib/stdlib/mvuAttrs.links, line 9, column 13, to line 163, column 333)
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$attr",
         (MvuAttrs.AttrKey, MvuAttrs.AttrValue) -> MvuAttrs.Attr (_::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("k", MvuAttrs.AttrKey));
             (Sugartypes.Pattern.Variable ("v", MvuAttrs.AttrValue))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.ConstructorLit ("AttrAttribute",
                 (Some (Sugartypes.TupleLit
                          [(Sugartypes.Var "k"); (Sugartypes.Var "v")])),
                 (Some [|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrAppend:(MvuAttrs.Attr (a::Any), MvuAttrs.Attr (a::Any))|AttrEmpty|AttrEventHandler:MvuEvents.EventHandler (a::Any)|])
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Forall (
                  [("a",
                    ((Some CommonTypes.PrimaryKind.Type),
                     (Some (CommonTypes.Linearity.Any,
                            CommonTypes.Restriction.Any))),
                    `Rigid);
                    ("e", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid)
                    ],
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.TypeApplication (
                         "MvuAttrs_2$AttrKey", []));
                       (Sugartypes.Datatype.TypeApplication (
                          "MvuAttrs_2$AttrValue", []))
                       ],
                     ([], (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                     (Sugartypes.Datatype.TypeApplication ("MvuAttrs_2$Attr",
                        [(Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                          ]
                        ))
                     ))
                  )),
               (Some (MvuAttrs.AttrKey, MvuAttrs.AttrValue) -> MvuAttrs.Attr (_::Any))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Val (
      (Sugartypes.Pattern.Variable ("MvuAttrs_2$empty", [|AttrEmpty|_::Any|])),
      ([a::Row(Any,Any)],
       (Sugartypes.ConstructorLit ("AttrEmpty", None,
          (Some [|AttrEmpty|_::Any|])))),
      CommonTypes.Location.Unknown, None));
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$eventHandler",
         (a::Any) -> [|AttrEventHandler:a::Any|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("hndlr", _::Any))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.ConstructorLit ("AttrEventHandler",
                 (Some (Sugartypes.TupleLit [(Sugartypes.Var "hndlr")])),
                 (Some [|AttrEventHandler:_::Any|_::Any|])))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$append",
         (MvuAttrs.Attr (a::Any), MvuAttrs.Attr (a::Any)) -> MvuAttrs.Attr (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("a1", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("a2", MvuAttrs.Attr (_::Any)))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.Switch (
                 (Sugartypes.TupleLit
                    [(Sugartypes.Var "a1"); (Sugartypes.Var "a2")]),
                 [((Sugartypes.Pattern.Tuple
                      [(Sugartypes.Pattern.Variant ("AttrEmpty", None));
                        (Sugartypes.Pattern.Variable
                           ("a2",
                            [|AttrEmpty|(mu a . AttrAppend:([|AttrEmpty|(mu b . AttrAppend:([|AttrEmpty|b|], [|AttrEmpty|a|])|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEventHandler:MvuEvents.EventHandler (c::Any))|], [|AttrEmpty|a|])|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEventHandler:MvuEvents.EventHandler (c::Any))|]))
                        ]),
                   (Sugartypes.Block ([], (Sugartypes.Var "a2"))));
                   ((Sugartypes.Pattern.Tuple
                       [(Sugartypes.Pattern.Variable
                           ("a1",
                            [|AttrEmpty|(mu a . AttrAppend:([|AttrEmpty|a|], [|AttrEmpty|(mu b . AttrAppend:([|AttrEmpty|a|], [|AttrEmpty|b|])|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEventHandler:MvuEvents.EventHandler (c::Any))|])|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEventHandler:MvuEvents.EventHandler (c::Any))|]));
                         (Sugartypes.Pattern.Variant ("AttrEmpty", None))]),
                    (Sugartypes.Block ([], (Sugartypes.Var "a1"))));
                   ((Sugartypes.Pattern.Tuple
                       [(Sugartypes.Pattern.Variable
                           ("a1",
                            [|AttrEmpty|(mu a . AttrAppend:([|AttrEmpty|a|], [|AttrEmpty|(mu b . AttrAppend:([|AttrEmpty|a|], [|AttrEmpty|b|])|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEventHandler:MvuEvents.EventHandler (c::Any))|])|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEventHandler:MvuEvents.EventHandler (c::Any))|]));
                         (Sugartypes.Pattern.Variable
                            ("a2",
                             [|AttrEmpty|(mu a . AttrAppend:([|AttrEmpty|(mu b . AttrAppend:([|AttrEmpty|b|], [|AttrEmpty|a|])|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEventHandler:MvuEvents.EventHandler (c::Any))|], [|AttrEmpty|a|])|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEventHandler:MvuEvents.EventHandler (c::Any))|]))
                         ]),
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.ConstructorLit ("AttrAppend",
                           (Some (Sugartypes.TupleLit
                                    [(Sugartypes.Var "a1");
                                      (Sugartypes.Var "a2")])),
                           (Some [|AttrAppend:([|AttrEmpty|(mu a . AttrAppend:([|AttrEmpty|a|], [|AttrEmpty|(mu b . AttrAppend:([|AttrEmpty|a|], [|AttrEmpty|b|])|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEventHandler:MvuEvents.EventHandler (c::Any))|])|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEventHandler:MvuEvents.EventHandler (c::Any))|], [|AttrEmpty|(mu b . AttrAppend:([|AttrEmpty|(mu a . AttrAppend:([|AttrEmpty|a|], [|AttrEmpty|b|])|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEventHandler:MvuEvents.EventHandler (c::Any))|], [|AttrEmpty|b|])|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEventHandler:MvuEvents.EventHandler (c::Any))|])|AttrEmpty|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEventHandler:MvuEvents.EventHandler (c::Any)|])
                           )))))
                   ],
                 (Some [|AttrAppend:([|AttrEmpty|(mu a . AttrAppend:([|AttrEmpty|a|], [|AttrEmpty|(mu b . AttrAppend:([|AttrEmpty|a|], [|AttrEmpty|b|])|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEventHandler:MvuEvents.EventHandler (c::Any))|])|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEventHandler:MvuEvents.EventHandler (c::Any))|], [|AttrEmpty|(mu b . AttrAppend:([|AttrEmpty|(mu a . AttrAppend:([|AttrEmpty|a|], [|AttrEmpty|b|])|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEventHandler:MvuEvents.EventHandler (c::Any))|], [|AttrEmpty|b|])|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEventHandler:MvuEvents.EventHandler (c::Any))|])|AttrEmpty|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEventHandler:MvuEvents.EventHandler (c::Any)|])
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Forall (
                  [("a",
                    ((Some CommonTypes.PrimaryKind.Type),
                     (Some (CommonTypes.Linearity.Any,
                            CommonTypes.Restriction.Any))),
                    `Rigid);
                    ("e", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid)
                    ],
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.TypeApplication (
                         "MvuAttrs_2$Attr",
                         [(Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                           ]
                         ));
                       (Sugartypes.Datatype.TypeApplication (
                          "MvuAttrs_2$Attr",
                          [(Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("a", None, `Rigid)))
                            ]
                          ))
                       ],
                     ([], (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                     (Sugartypes.Datatype.TypeApplication ("MvuAttrs_2$Attr",
                        [(Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                          ]
                        ))
                     ))
                  )),
               (Some (MvuAttrs.Attr (a::Any), MvuAttrs.Attr (a::Any)) -> MvuAttrs.Attr (a::Any))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$+@",
         (MvuAttrs.Attr (a::Any), MvuAttrs.Attr (a::Any)) -> MvuAttrs.Attr (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("a1", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("a2", MvuAttrs.Attr (_::Any)))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuAttrs_2$append"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Var "a1"); (Sugartypes.Var "a2")]))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Forall (
                  [("a",
                    ((Some CommonTypes.PrimaryKind.Type),
                     (Some (CommonTypes.Linearity.Any,
                            CommonTypes.Restriction.Any))),
                    `Rigid);
                    ("e", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid)
                    ],
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.TypeApplication (
                         "MvuAttrs_2$Attr",
                         [(Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                           ]
                         ));
                       (Sugartypes.Datatype.TypeApplication (
                          "MvuAttrs_2$Attr",
                          [(Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("a", None, `Rigid)))
                            ]
                          ))
                       ],
                     ([], (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                     (Sugartypes.Datatype.TypeApplication ("MvuAttrs_2$Attr",
                        [(Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                          ]
                        ))
                     ))
                  )),
               (Some (MvuAttrs.Attr (a::Any), MvuAttrs.Attr (a::Any)) -> MvuAttrs.Attr (a::Any))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$concat",
         ([MvuAttrs.Attr (a::Any)]) ~> MvuAttrs.Attr (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", [MvuAttrs.Attr (_::Any)]))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "fold_right"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some MvuAttrs.Attr (_::Any)));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some MvuAttrs.Attr (_::Any)));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Block
                     ([(Sugartypes.Fun
                          { Sugartypes.fun_binder =
                            ("_fun__g138",
                             (MvuAttrs.Attr (a::Any), MvuAttrs.Attr (a::Any)) ~> MvuAttrs.Attr (a::Any));
                            fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                            fun_definition =
                            ([],
                             ([[(Sugartypes.Pattern.Variable
                                   ("x", MvuAttrs.Attr (_::Any)));
                                 (Sugartypes.Pattern.Variable
                                    ("acc", MvuAttrs.Attr (_::Any)))
                                 ]
                                ],
                              (Sugartypes.Block
                                 ([],
                                  (Sugartypes.FnAppl (
                                     (Sugartypes.TAppl (
                                        (Sugartypes.FreezeVar
                                           "MvuAttrs_2$append"),
                                        [((Sugartypes.Datatype.Type
                                             (Sugartypes.Datatype.TypeVar
                                                ("$none", None, `Rigid))),
                                          (Some _::Any));
                                          ((Sugartypes.Datatype.Type
                                              (Sugartypes.Datatype.TypeVar
                                                 ("$none", None, `Rigid))),
                                           (Some { |wild|_ }))
                                          ]
                                        )),
                                     [(Sugartypes.Var "x");
                                       (Sugartypes.Var "acc")]
                                     ))))));
                            fun_location = CommonTypes.Location.Unknown;
                            fun_signature = None;
                            fun_unsafe_signature = false; fun_frozen = true })
                        ],
                      (Sugartypes.FreezeVar "_fun__g138")));
                   (Sugartypes.ConstructorLit ("AttrEmpty", None,
                      (Some [|AttrEmpty|AttrAppend:(MvuAttrs.Attr (a::Any), MvuAttrs.Attr (a::Any))|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEventHandler:MvuEvents.EventHandler (a::Any)|])
                      ));
                   (Sugartypes.Var "attrs")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$placeholder",
         (MvuAttrs.AttrValue) -> MvuAttrs.Attr (_::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("val", MvuAttrs.AttrValue))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuAttrs_2$attr"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "placeholder"));
                   (Sugartypes.Var "val")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$id", (MvuAttrs.AttrValue) -> MvuAttrs.Attr (_::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("val", MvuAttrs.AttrValue))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuAttrs_2$attr"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "id"));
                   (Sugartypes.Var "val")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$type", (MvuAttrs.AttrValue) -> MvuAttrs.Attr (_::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("val", MvuAttrs.AttrValue))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuAttrs_2$attr"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "type"));
                   (Sugartypes.Var "val")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$width", (MvuAttrs.AttrValue) -> MvuAttrs.Attr (_::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("val", MvuAttrs.AttrValue))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuAttrs_2$attr"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "width"));
                   (Sugartypes.Var "val")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$height", (MvuAttrs.AttrValue) -> MvuAttrs.Attr (_::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("val", MvuAttrs.AttrValue))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuAttrs_2$attr"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "height"));
                   (Sugartypes.Var "val")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$style", (MvuAttrs.AttrValue) -> MvuAttrs.Attr (_::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("val", MvuAttrs.AttrValue))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuAttrs_2$attr"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "style"));
                   (Sugartypes.Var "val")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$class", (MvuAttrs.AttrValue) -> MvuAttrs.Attr (_::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("val", MvuAttrs.AttrValue))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuAttrs_2$attr"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "className"));
                   (Sugartypes.Var "val")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$color", (MvuAttrs.AttrValue) -> MvuAttrs.Attr (_::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("val", MvuAttrs.AttrValue))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuAttrs_2$attr"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "color"));
                   (Sugartypes.Var "val")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$title", (MvuAttrs.AttrValue) -> MvuAttrs.Attr (_::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("val", MvuAttrs.AttrValue))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuAttrs_2$attr"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "title"));
                   (Sugartypes.Var "val")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$href", (MvuAttrs.AttrValue) -> MvuAttrs.Attr (_::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("val", MvuAttrs.AttrValue))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuAttrs_2$attr"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "href"));
                   (Sugartypes.Var "val")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$dir", (MvuAttrs.AttrValue) -> MvuAttrs.Attr (_::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("val", MvuAttrs.AttrValue))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuAttrs_2$attr"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "dir"));
                   (Sugartypes.Var "val")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$lang", (MvuAttrs.AttrValue) -> MvuAttrs.Attr (_::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("val", MvuAttrs.AttrValue))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuAttrs_2$attr"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "lang"));
                   (Sugartypes.Var "val")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$face", (MvuAttrs.AttrValue) -> MvuAttrs.Attr (_::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("val", MvuAttrs.AttrValue))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuAttrs_2$attr"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "face"));
                   (Sugartypes.Var "val")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$name", (MvuAttrs.AttrValue) -> MvuAttrs.Attr (_::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("val", MvuAttrs.AttrValue))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuAttrs_2$attr"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "name"));
                   (Sugartypes.Var "val")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$value", (MvuAttrs.AttrValue) -> MvuAttrs.Attr (_::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("val", MvuAttrs.AttrValue))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuAttrs_2$attr"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "value"));
                   (Sugartypes.Var "val")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$for_", (MvuAttrs.AttrValue) -> MvuAttrs.Attr (_::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("val", MvuAttrs.AttrValue))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuAttrs_2$attr"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "htmlFor"));
                   (Sugartypes.Var "val")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$text", (MvuAttrs.AttrValue) -> MvuAttrs.Attr (_::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("val", MvuAttrs.AttrValue))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuAttrs_2$attr"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "text"));
                   (Sugartypes.Var "val")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$href", (MvuAttrs.AttrValue) -> MvuAttrs.Attr (_::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("val", MvuAttrs.AttrValue))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuAttrs_2$attr"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "href"));
                   (Sugartypes.Var "val")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$autofocus", (Bool) -> MvuAttrs.Attr (_::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("val", Bool))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.Conditional ((Sugartypes.Var "val"),
                 (Sugartypes.Block
                    ([],
                     (Sugartypes.FnAppl (
                        (Sugartypes.TAppl (
                           (Sugartypes.FreezeVar "MvuAttrs_2$attr"),
                           [((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some _::Any));
                             ((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some { |_ }))
                             ]
                           )),
                        [(Sugartypes.Constant
                            (CommonTypes.Constant.String "autofocus"));
                          (Sugartypes.Constant
                             (CommonTypes.Constant.String "true"))
                          ]
                        )))),
                 (Sugartypes.Block
                    ([],
                     (Sugartypes.ConstructorLit ("AttrEmpty", None,
                        (Some [|AttrEmpty|AttrAppend:(MvuAttrs.Attr (a::Any), MvuAttrs.Attr (a::Any))|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEventHandler:MvuEvents.EventHandler (a::Any)|])
                        ))))
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$checked", (Bool) -> MvuAttrs.Attr (_::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("val", Bool))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.Conditional ((Sugartypes.Var "val"),
                 (Sugartypes.Block
                    ([],
                     (Sugartypes.FnAppl (
                        (Sugartypes.TAppl (
                           (Sugartypes.FreezeVar "MvuAttrs_2$attr"),
                           [((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some _::Any));
                             ((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some { |_ }))
                             ]
                           )),
                        [(Sugartypes.Constant
                            (CommonTypes.Constant.String "checked"));
                          (Sugartypes.Constant
                             (CommonTypes.Constant.String "true"))
                          ]
                        )))),
                 (Sugartypes.Block
                    ([],
                     (Sugartypes.ConstructorLit ("AttrEmpty", None,
                        (Some [|AttrEmpty|AttrAppend:(MvuAttrs.Attr (a::Any), MvuAttrs.Attr (a::Any))|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEventHandler:MvuEvents.EventHandler (a::Any)|])
                        ))))
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$hidden", (Bool) -> MvuAttrs.Attr (_::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("val", Bool))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.Conditional (
                 (Sugartypes.InfixAppl (
                    ([Bool; { |_ }], (Operators.BinaryOp.Name "==")),
                    (Sugartypes.Var "val"),
                    (Sugartypes.Constant (CommonTypes.Constant.Bool true)))),
                 (Sugartypes.Block
                    ([],
                     (Sugartypes.FnAppl (
                        (Sugartypes.TAppl (
                           (Sugartypes.FreezeVar "MvuAttrs_2$attr"),
                           [((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some _::Any));
                             ((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some { |_ }))
                             ]
                           )),
                        [(Sugartypes.Constant
                            (CommonTypes.Constant.String "hidden"));
                          (Sugartypes.Constant
                             (CommonTypes.Constant.String "true"))
                          ]
                        )))),
                 (Sugartypes.Block
                    ([],
                     (Sugartypes.ConstructorLit ("AttrEmpty", None,
                        (Some [|AttrEmpty|AttrAppend:(MvuAttrs.Attr (a::Any), MvuAttrs.Attr (a::Any))|AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue)|AttrEventHandler:MvuEvents.EventHandler (a::Any)|])
                        ))))
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder =
         ("MvuAttrs_2$classList", ([(String, Bool)]) ~> String);
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a::Row], (Some (([(String, Bool)]) ~> String, [None]))),
          ([[(Sugartypes.Pattern.Variable ("classes", [(String, Bool)]))]],
           (Sugartypes.Block
              ([],
               (Sugartypes.Switch ((Sugartypes.Var "classes"),
                  [((Sugartypes.Pattern.Cons (
                       (Sugartypes.Pattern.Tuple
                          [(Sugartypes.Pattern.Variable ("val", String));
                            (Sugartypes.Pattern.Variable ("b", Bool))]),
                       (Sugartypes.Pattern.Variable ("xs", [(String, Bool)]))
                       )),
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.Conditional (
                           (Sugartypes.InfixAppl (
                              ([Bool; { |wild|_ }],
                               (Operators.BinaryOp.Name "==")),
                              (Sugartypes.Var "b"),
                              (Sugartypes.Constant
                                 (CommonTypes.Constant.Bool true))
                              )),
                           (Sugartypes.Block
                              ([],
                               (Sugartypes.InfixAppl (
                                  ([{ |wild|_ }],
                                   (Operators.BinaryOp.Name "^^")),
                                  (Sugartypes.Var "val"),
                                  (Sugartypes.InfixAppl (
                                     ([{ |wild|_ }],
                                      (Operators.BinaryOp.Name "^^")),
                                     (Sugartypes.Constant
                                        (CommonTypes.Constant.String " ")),
                                     (Sugartypes.FnAppl (
                                        (Sugartypes.TAppl (
                                           (Sugartypes.FreezeVar
                                              "MvuAttrs_2$classList"),
                                           [((Sugartypes.Datatype.Type
                                                (Sugartypes.Datatype.TypeVar
                                                   ("$none", None, `Rigid))),
                                             (Some { |_ }))]
                                           )),
                                        [(Sugartypes.Var "xs")]))
                                     ))
                                  )))),
                           (Sugartypes.Block
                              ([],
                               (Sugartypes.FnAppl (
                                  (Sugartypes.TAppl (
                                     (Sugartypes.FreezeVar
                                        "MvuAttrs_2$classList"),
                                     [((Sugartypes.Datatype.Type
                                          (Sugartypes.Datatype.TypeVar
                                             ("$none", None, `Rigid))),
                                       (Some { |_ }))]
                                     )),
                                  [(Sugartypes.Var "xs")]))))
                           )))));
                    (Sugartypes.Pattern.Nil,
                     (Sugartypes.Block
                        ([],
                         (Sugartypes.Constant
                            (CommonTypes.Constant.String "")))))
                    ],
                  (Some String)))))));
         rec_location = CommonTypes.Location.Unknown; rec_signature = None;
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/stdlib/mvuAttrs.links, line 140, column 150, to line 2057, column 2302
         }
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$onClick",
         (a::Any) -> [|AttrEventHandler:[|UnitHandler:(String, a::Any)|_::Any|]|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row(Any,Any); a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("f", _::Any))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuAttrs_2$eventHandler"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some [|UnitHandler:(String, _::Any)|_::Any|]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_::Any }))
                      ]
                    )),
                 [(Sugartypes.ConstructorLit ("UnitHandler",
                     (Some (Sugartypes.TupleLit
                              [(Sugartypes.Constant
                                  (CommonTypes.Constant.String "click"));
                                (Sugartypes.Var "f")])),
                     (Some [|UnitHandler:(String, _::Any)|_::Any|])))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$onMouseMove",
         (a::Any) -> [|AttrEventHandler:[|UnitHandler:(String, a::Any)|_::Any|]|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row(Any,Any); a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("f", _::Any))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuAttrs_2$eventHandler"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some [|UnitHandler:(String, _::Any)|_::Any|]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_::Any }))
                      ]
                    )),
                 [(Sugartypes.ConstructorLit ("UnitHandler",
                     (Some (Sugartypes.TupleLit
                              [(Sugartypes.Constant
                                  (CommonTypes.Constant.String "mousemove"));
                                (Sugartypes.Var "f")])),
                     (Some [|UnitHandler:(String, _::Any)|_::Any|])))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$onMouseDown",
         (a::Any) -> [|AttrEventHandler:[|UnitHandler:(String, a::Any)|_::Any|]|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row(Any,Any); a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("f", _::Any))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuAttrs_2$eventHandler"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some [|UnitHandler:(String, _::Any)|_::Any|]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_::Any }))
                      ]
                    )),
                 [(Sugartypes.ConstructorLit ("UnitHandler",
                     (Some (Sugartypes.TupleLit
                              [(Sugartypes.Constant
                                  (CommonTypes.Constant.String "mousedown"));
                                (Sugartypes.Var "f")])),
                     (Some [|UnitHandler:(String, _::Any)|_::Any|])))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$onMouseUp",
         (a::Any) -> [|AttrEventHandler:[|UnitHandler:(String, a::Any)|_::Any|]|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row(Any,Any); a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("f", _::Any))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuAttrs_2$eventHandler"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some [|UnitHandler:(String, _::Any)|_::Any|]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_::Any }))
                      ]
                    )),
                 [(Sugartypes.ConstructorLit ("UnitHandler",
                     (Some (Sugartypes.TupleLit
                              [(Sugartypes.Constant
                                  (CommonTypes.Constant.String "mouseup"));
                                (Sugartypes.Var "f")])),
                     (Some [|UnitHandler:(String, _::Any)|_::Any|])))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$onMouseEnter",
         (a::Any) -> [|AttrEventHandler:[|UnitHandler:(String, a::Any)|_::Any|]|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row(Any,Any); a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("f", _::Any))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuAttrs_2$eventHandler"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some [|UnitHandler:(String, _::Any)|_::Any|]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_::Any }))
                      ]
                    )),
                 [(Sugartypes.ConstructorLit ("UnitHandler",
                     (Some (Sugartypes.TupleLit
                              [(Sugartypes.Constant
                                  (CommonTypes.Constant.String "mouseenter"));
                                (Sugartypes.Var "f")])),
                     (Some [|UnitHandler:(String, _::Any)|_::Any|])))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$onMouseLeave",
         (a::Any) -> [|AttrEventHandler:[|UnitHandler:(String, a::Any)|_::Any|]|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row(Any,Any); a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("f", _::Any))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuAttrs_2$eventHandler"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some [|UnitHandler:(String, _::Any)|_::Any|]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_::Any }))
                      ]
                    )),
                 [(Sugartypes.ConstructorLit ("UnitHandler",
                     (Some (Sugartypes.TupleLit
                              [(Sugartypes.Constant
                                  (CommonTypes.Constant.String "mouseleave"));
                                (Sugartypes.Var "f")])),
                     (Some [|UnitHandler:(String, _::Any)|_::Any|])))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$onDoubleClick",
         (a::Any) -> [|AttrEventHandler:[|UnitHandler:(String, a::Any)|_::Any|]|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row(Any,Any); a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("f", _::Any))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuAttrs_2$eventHandler"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some [|UnitHandler:(String, _::Any)|_::Any|]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_::Any }))
                      ]
                    )),
                 [(Sugartypes.ConstructorLit ("UnitHandler",
                     (Some (Sugartypes.TupleLit
                              [(Sugartypes.Constant
                                  (CommonTypes.Constant.String "dblclick"));
                                (Sugartypes.Var "f")])),
                     (Some [|UnitHandler:(String, _::Any)|_::Any|])))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$onMouseOver",
         (a::Any) -> [|AttrEventHandler:[|UnitHandler:(String, a::Any)|_::Any|]|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row(Any,Any); a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("f", _::Any))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuAttrs_2$eventHandler"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some [|UnitHandler:(String, _::Any)|_::Any|]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_::Any }))
                      ]
                    )),
                 [(Sugartypes.ConstructorLit ("UnitHandler",
                     (Some (Sugartypes.TupleLit
                              [(Sugartypes.Constant
                                  (CommonTypes.Constant.String "mouseover"));
                                (Sugartypes.Var "f")])),
                     (Some [|UnitHandler:(String, _::Any)|_::Any|])))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$onMouseOut",
         (a::Any) -> [|AttrEventHandler:[|UnitHandler:(String, a::Any)|_::Any|]|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row(Any,Any); a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("f", _::Any))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuAttrs_2$eventHandler"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some [|UnitHandler:(String, _::Any)|_::Any|]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_::Any }))
                      ]
                    )),
                 [(Sugartypes.ConstructorLit ("UnitHandler",
                     (Some (Sugartypes.TupleLit
                              [(Sugartypes.Constant
                                  (CommonTypes.Constant.String "mouseout"));
                                (Sugartypes.Var "f")])),
                     (Some [|UnitHandler:(String, _::Any)|_::Any|])))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$onFocus",
         (a::Any) -> [|AttrEventHandler:[|UnitHandler:(String, a::Any)|_::Any|]|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row(Any,Any); a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("f", _::Any))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuAttrs_2$eventHandler"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some [|UnitHandler:(String, _::Any)|_::Any|]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_::Any }))
                      ]
                    )),
                 [(Sugartypes.ConstructorLit ("UnitHandler",
                     (Some (Sugartypes.TupleLit
                              [(Sugartypes.Constant
                                  (CommonTypes.Constant.String "focus"));
                                (Sugartypes.Var "f")])),
                     (Some [|UnitHandler:(String, _::Any)|_::Any|])))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$onBlur",
         (a::Any) -> [|AttrEventHandler:[|UnitHandler:(String, a::Any)|_::Any|]|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row(Any,Any); a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("f", _::Any))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuAttrs_2$eventHandler"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some [|UnitHandler:(String, _::Any)|_::Any|]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_::Any }))
                      ]
                    )),
                 [(Sugartypes.ConstructorLit ("UnitHandler",
                     (Some (Sugartypes.TupleLit
                              [(Sugartypes.Constant
                                  (CommonTypes.Constant.String "blur"));
                                (Sugartypes.Var "f")])),
                     (Some [|UnitHandler:(String, _::Any)|_::Any|])))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$onKeyUp",
         ((a::Any) -b-> c::Any) -> [|AttrEventHandler:[|PropertyHandler:(String, String, (a::Any) -b-> [|Just:c::Any|_::Any|])|_::Any|]|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::(Any,Any); a::Row; a::Row(Any,Any);
           a::Row(Any,Any); a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("f", (_::Any) -> _::Any))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuAttrs_2$eventHandler"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some [|PropertyHandler:(String, String, (_::Any) -> [|Just:_::Any|_::Any|])|_::Any|]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_::Any }))
                      ]
                    )),
                 [(Sugartypes.ConstructorLit ("PropertyHandler",
                     (Some (Sugartypes.TupleLit
                              [(Sugartypes.Constant
                                  (CommonTypes.Constant.String "keyup"));
                                (Sugartypes.Constant
                                   (CommonTypes.Constant.String "value"));
                                (Sugartypes.Block
                                   ([(Sugartypes.Fun
                                        { Sugartypes.fun_binder =
                                          ("_fun__g139",
                                           (_::Any) -> [|Just:_::Any|_::Any|]);
                                          fun_linearity =
                                          CommonTypes.DeclaredLinearity.Unl;
                                          fun_definition =
                                          ([],
                                           ([[(Sugartypes.Pattern.Variable
                                                 ("val", _::Any))
                                               ]
                                              ],
                                            (Sugartypes.Block
                                               ([],
                                                (Sugartypes.ConstructorLit (
                                                   "Just",
                                                   (Some (Sugartypes.TupleLit
                                                            [(Sugartypes.FnAppl (
                                                                (Sugartypes.Var
                                                                   "f"),
                                                                [(Sugartypes.Var
                                                                    "val")
                                                                  ]
                                                                ))
                                                              ])),
                                                   (Some [|Just:_::Any|_::Any|])
                                                   ))))));
                                          fun_location =
                                          CommonTypes.Location.Unknown;
                                          fun_signature = None;
                                          fun_unsafe_signature = false;
                                          fun_frozen = true })
                                      ],
                                    (Sugartypes.FreezeVar "_fun__g139")))
                                ])),
                     (Some [|PropertyHandler:(String, String, (_::Any) -> [|Just:_::Any|_::Any|])|_::Any|])
                     ))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$onKeyDown",
         ((a::Any) -b-> c::Any) -> [|AttrEventHandler:[|PropertyHandler:(String, String, (a::Any) -b-> [|Just:c::Any|_::Any|])|_::Any|]|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::(Any,Any); a::Row; a::Row(Any,Any);
           a::Row(Any,Any); a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("f", (_::Any) -> _::Any))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuAttrs_2$eventHandler"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some [|PropertyHandler:(String, String, (_::Any) -> [|Just:_::Any|_::Any|])|_::Any|]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_::Any }))
                      ]
                    )),
                 [(Sugartypes.ConstructorLit ("PropertyHandler",
                     (Some (Sugartypes.TupleLit
                              [(Sugartypes.Constant
                                  (CommonTypes.Constant.String "keydown"));
                                (Sugartypes.Constant
                                   (CommonTypes.Constant.String "value"));
                                (Sugartypes.Block
                                   ([(Sugartypes.Fun
                                        { Sugartypes.fun_binder =
                                          ("_fun__g140",
                                           (_::Any) -> [|Just:_::Any|_::Any|]);
                                          fun_linearity =
                                          CommonTypes.DeclaredLinearity.Unl;
                                          fun_definition =
                                          ([],
                                           ([[(Sugartypes.Pattern.Variable
                                                 ("val", _::Any))
                                               ]
                                              ],
                                            (Sugartypes.Block
                                               ([],
                                                (Sugartypes.ConstructorLit (
                                                   "Just",
                                                   (Some (Sugartypes.TupleLit
                                                            [(Sugartypes.FnAppl (
                                                                (Sugartypes.Var
                                                                   "f"),
                                                                [(Sugartypes.Var
                                                                    "val")
                                                                  ]
                                                                ))
                                                              ])),
                                                   (Some [|Just:_::Any|_::Any|])
                                                   ))))));
                                          fun_location =
                                          CommonTypes.Location.Unknown;
                                          fun_signature = None;
                                          fun_unsafe_signature = false;
                                          fun_frozen = true })
                                      ],
                                    (Sugartypes.FreezeVar "_fun__g140")))
                                ])),
                     (Some [|PropertyHandler:(String, String, (_::Any) -> [|Just:_::Any|_::Any|])|_::Any|])
                     ))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$onKeyPress",
         ((a::Any) -b-> c::Any) -> [|AttrEventHandler:[|PropertyHandler:(String, String, (a::Any) -b-> [|Just:c::Any|_::Any|])|_::Any|]|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::(Any,Any); a::Row; a::Row(Any,Any);
           a::Row(Any,Any); a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("f", (_::Any) -> _::Any))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuAttrs_2$eventHandler"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some [|PropertyHandler:(String, String, (_::Any) -> [|Just:_::Any|_::Any|])|_::Any|]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_::Any }))
                      ]
                    )),
                 [(Sugartypes.ConstructorLit ("PropertyHandler",
                     (Some (Sugartypes.TupleLit
                              [(Sugartypes.Constant
                                  (CommonTypes.Constant.String "keypress"));
                                (Sugartypes.Constant
                                   (CommonTypes.Constant.String "value"));
                                (Sugartypes.Block
                                   ([(Sugartypes.Fun
                                        { Sugartypes.fun_binder =
                                          ("_fun__g141",
                                           (_::Any) -> [|Just:_::Any|_::Any|]);
                                          fun_linearity =
                                          CommonTypes.DeclaredLinearity.Unl;
                                          fun_definition =
                                          ([],
                                           ([[(Sugartypes.Pattern.Variable
                                                 ("val", _::Any))
                                               ]
                                              ],
                                            (Sugartypes.Block
                                               ([],
                                                (Sugartypes.ConstructorLit (
                                                   "Just",
                                                   (Some (Sugartypes.TupleLit
                                                            [(Sugartypes.FnAppl (
                                                                (Sugartypes.Var
                                                                   "f"),
                                                                [(Sugartypes.Var
                                                                    "val")
                                                                  ]
                                                                ))
                                                              ])),
                                                   (Some [|Just:_::Any|_::Any|])
                                                   ))))));
                                          fun_location =
                                          CommonTypes.Location.Unknown;
                                          fun_signature = None;
                                          fun_unsafe_signature = false;
                                          fun_frozen = true })
                                      ],
                                    (Sugartypes.FreezeVar "_fun__g141")))
                                ])),
                     (Some [|PropertyHandler:(String, String, (_::Any) -> [|Just:_::Any|_::Any|])|_::Any|])
                     ))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$onInput",
         ((a::Any) -b-> c::Any) -> [|AttrEventHandler:[|PropertyHandler:(String, String, (a::Any) -b-> [|Just:c::Any|_::Any|])|_::Any|]|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::(Any,Any); a::Row; a::Row(Any,Any);
           a::Row(Any,Any); a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("f", (_::Any) -> _::Any))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuAttrs_2$eventHandler"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some [|PropertyHandler:(String, String, (_::Any) -> [|Just:_::Any|_::Any|])|_::Any|]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_::Any }))
                      ]
                    )),
                 [(Sugartypes.ConstructorLit ("PropertyHandler",
                     (Some (Sugartypes.TupleLit
                              [(Sugartypes.Constant
                                  (CommonTypes.Constant.String "input"));
                                (Sugartypes.Constant
                                   (CommonTypes.Constant.String "value"));
                                (Sugartypes.Block
                                   ([(Sugartypes.Fun
                                        { Sugartypes.fun_binder =
                                          ("_fun__g142",
                                           (_::Any) -> [|Just:_::Any|_::Any|]);
                                          fun_linearity =
                                          CommonTypes.DeclaredLinearity.Unl;
                                          fun_definition =
                                          ([],
                                           ([[(Sugartypes.Pattern.Variable
                                                 ("val", _::Any))
                                               ]
                                              ],
                                            (Sugartypes.Block
                                               ([],
                                                (Sugartypes.ConstructorLit (
                                                   "Just",
                                                   (Some (Sugartypes.TupleLit
                                                            [(Sugartypes.FnAppl (
                                                                (Sugartypes.Var
                                                                   "f"),
                                                                [(Sugartypes.Var
                                                                    "val")
                                                                  ]
                                                                ))
                                                              ])),
                                                   (Some [|Just:_::Any|_::Any|])
                                                   ))))));
                                          fun_location =
                                          CommonTypes.Location.Unknown;
                                          fun_signature = None;
                                          fun_unsafe_signature = false;
                                          fun_frozen = true })
                                      ],
                                    (Sugartypes.FreezeVar "_fun__g142")))
                                ])),
                     (Some [|PropertyHandler:(String, String, (_::Any) -> [|Just:_::Any|_::Any|])|_::Any|])
                     ))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$onChange",
         ((a::Any) -b-> c::Any) -> [|AttrEventHandler:[|PropertyHandler:(String, String, (a::Any) -b-> [|Just:c::Any|_::Any|])|_::Any|]|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::(Any,Any); a::Row; a::Row(Any,Any);
           a::Row(Any,Any); a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("f", (_::Any) -> _::Any))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuAttrs_2$eventHandler"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some [|PropertyHandler:(String, String, (_::Any) -> [|Just:_::Any|_::Any|])|_::Any|]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_::Any }))
                      ]
                    )),
                 [(Sugartypes.ConstructorLit ("PropertyHandler",
                     (Some (Sugartypes.TupleLit
                              [(Sugartypes.Constant
                                  (CommonTypes.Constant.String "change"));
                                (Sugartypes.Constant
                                   (CommonTypes.Constant.String "value"));
                                (Sugartypes.Block
                                   ([(Sugartypes.Fun
                                        { Sugartypes.fun_binder =
                                          ("_fun__g143",
                                           (_::Any) -> [|Just:_::Any|_::Any|]);
                                          fun_linearity =
                                          CommonTypes.DeclaredLinearity.Unl;
                                          fun_definition =
                                          ([],
                                           ([[(Sugartypes.Pattern.Variable
                                                 ("val", _::Any))
                                               ]
                                              ],
                                            (Sugartypes.Block
                                               ([],
                                                (Sugartypes.ConstructorLit (
                                                   "Just",
                                                   (Some (Sugartypes.TupleLit
                                                            [(Sugartypes.FnAppl (
                                                                (Sugartypes.Var
                                                                   "f"),
                                                                [(Sugartypes.Var
                                                                    "val")
                                                                  ]
                                                                ))
                                                              ])),
                                                   (Some [|Just:_::Any|_::Any|])
                                                   ))))));
                                          fun_location =
                                          CommonTypes.Location.Unknown;
                                          fun_signature = None;
                                          fun_unsafe_signature = false;
                                          fun_frozen = true })
                                      ],
                                    (Sugartypes.FreezeVar "_fun__g143")))
                                ])),
                     (Some [|PropertyHandler:(String, String, (_::Any) -> [|Just:_::Any|_::Any|])|_::Any|])
                     ))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$getKey",
         (a::Any, (b::Any) -c-> d::Any) -> [|AttrEventHandler:[|KeyboardEventHandler:(a::Any, ((key:b::Any|_)) -c-> [|Just:d::Any|_::Any|])|_::Any|]|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::(Any,Any); a::Row; a::(Any,Any); a::Row; a::Row;
           a::Row(Any,Any); a::Row(Any,Any); a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("event", _::Any));
             (Sugartypes.Pattern.Variable ("f", (_::Any) -> _::Any))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuAttrs_2$eventHandler"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some [|KeyboardEventHandler:(_::Any, ((key:_::Any|_)) -> [|Just:_::Any|_::Any|])|_::Any|]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_::Any }))
                      ]
                    )),
                 [(Sugartypes.ConstructorLit ("KeyboardEventHandler",
                     (Some (Sugartypes.TupleLit
                              [(Sugartypes.Var "event");
                                (Sugartypes.Block
                                   ([(Sugartypes.Fun
                                        { Sugartypes.fun_binder =
                                          ("_fun__g144",
                                           ((key:_::Any|_)) -> [|Just:_::Any|_::Any|]);
                                          fun_linearity =
                                          CommonTypes.DeclaredLinearity.Unl;
                                          fun_definition =
                                          ([],
                                           ([[(Sugartypes.Pattern.Variable
                                                 ("evt", (key:_::Any|_)))
                                               ]
                                              ],
                                            (Sugartypes.Block
                                               ([],
                                                (Sugartypes.ConstructorLit (
                                                   "Just",
                                                   (Some (Sugartypes.TupleLit
                                                            [(Sugartypes.FnAppl (
                                                                (Sugartypes.Var
                                                                   "f"),
                                                                [(Sugartypes.Projection (
                                                                    (
                                                                    Sugartypes.Var
                                                                    "evt"),
                                                                    "key"))
                                                                  ]
                                                                ))
                                                              ])),
                                                   (Some [|Just:_::Any|_::Any|])
                                                   ))))));
                                          fun_location =
                                          CommonTypes.Location.Unknown;
                                          fun_signature = None;
                                          fun_unsafe_signature = false;
                                          fun_frozen = true })
                                      ],
                                    (Sugartypes.FreezeVar "_fun__g144")))
                                ])),
                     (Some [|KeyboardEventHandler:(_::Any, ((key:_::Any|_)) -> [|Just:_::Any|_::Any|])|_::Any|])
                     ))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$onKey",
         (a::Any, b, () -c-> d::Any) -> [|AttrEventHandler:[|KeyboardEventHandler:(a::Any, ((key:b|_)) -c-> [|Just:d::Any|Nothing|_::Any|])|_::Any|]|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a; a::Row; a::(Any,Any); a::Row; a::Row;
           a::Row(Any,Any); a::Row(Any,Any); a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("eventName", _::Any));
             (Sugartypes.Pattern.Variable ("key", _));
             (Sugartypes.Pattern.Variable ("f", () -> _::Any))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuAttrs_2$eventHandler"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some [|KeyboardEventHandler:(_::Any, ((key:_|_)) -> [|Just:_::Any|Nothing|_::Any|])|_::Any|]));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_::Any }))
                      ]
                    )),
                 [(Sugartypes.ConstructorLit ("KeyboardEventHandler",
                     (Some (Sugartypes.TupleLit
                              [(Sugartypes.Var "eventName");
                                (Sugartypes.Block
                                   ([(Sugartypes.Fun
                                        { Sugartypes.fun_binder =
                                          ("_fun__g145",
                                           ((key:_|_)) -> [|Just:_::Any|Nothing|_::Any|]);
                                          fun_linearity =
                                          CommonTypes.DeclaredLinearity.Unl;
                                          fun_definition =
                                          ([],
                                           ([[(Sugartypes.Pattern.Variable
                                                 ("evt", (key:_|_)))
                                               ]
                                              ],
                                            (Sugartypes.Block
                                               ([],
                                                (Sugartypes.Conditional (
                                                   (Sugartypes.InfixAppl (
                                                      ([_; { |_ }],
                                                       (Operators.BinaryOp.Name
                                                          "==")),
                                                      (Sugartypes.Var "key"),
                                                      (Sugartypes.Projection (
                                                         (Sugartypes.Var
                                                            "evt"),
                                                         "key"))
                                                      )),
                                                   (Sugartypes.Block
                                                      ([],
                                                       (Sugartypes.ConstructorLit (
                                                          "Just",
                                                          (Some (Sugartypes.TupleLit
                                                                   [(Sugartypes.FnAppl (
                                                                    (Sugartypes.Var
                                                                    "f"), 
                                                                    []))])),
                                                          (Some [|Just:_::Any|Nothing|_::Any|])
                                                          )))),
                                                   (Sugartypes.Block
                                                      ([],
                                                       (Sugartypes.ConstructorLit (
                                                          "Nothing", None,
                                                          (Some [|Nothing|Just:_::Any|_::Any|])
                                                          ))))
                                                   ))))));
                                          fun_location =
                                          CommonTypes.Location.Unknown;
                                          fun_signature = None;
                                          fun_unsafe_signature = false;
                                          fun_frozen = true })
                                      ],
                                    (Sugartypes.FreezeVar "_fun__g145")))
                                ])),
                     (Some [|KeyboardEventHandler:(_::Any, ((key:_|_)) -> [|Just:_::Any|Nothing|_::Any|])|_::Any|])
                     ))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuAttrs_2$onEnter",
         (() -a-> b::Any) -> [|AttrEventHandler:[|KeyboardEventHandler:(String, ((key:String|_)) -a-> [|Just:b::Any|Nothing|_::Any|])|_::Any|]|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row; a::(Any,Any); a::Row; a::Row; a::Row(Any,Any);
           a::Row(Any,Any); a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("f", () -> _::Any))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuAttrs_2$onKey"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some String));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some String));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_::Any }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_::Any }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_::Any }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "keydown"));
                   (Sugartypes.Constant (CommonTypes.Constant.String "Enter"));
                   (Sugartypes.Var "f")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Typenames
      [("MvuHTML_3$HTML",
        [(("a",
           ((Some CommonTypes.PrimaryKind.Type),
            (Some (CommonTypes.Linearity.Any, CommonTypes.Restriction.Any))),
           `Rigid),
          (Some a::(Any,Any)))],
        ((Sugartypes.Datatype.Variant
            ([("HTMLEmpty",
               (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit));
               ("HTMLAppend",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Tuple
                      [(Sugartypes.Datatype.TypeApplication (
                          "MvuHTML_3$HTML",
                          [(Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("a", None, `Rigid)))
                            ]
                          ));
                        (Sugartypes.Datatype.TypeApplication (
                           "MvuHTML_3$HTML",
                           [(Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("a", None, `Rigid)))
                             ]
                           ))
                        ])));
               ("HTMLText",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.String)));
               ("HTMLRaw",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive
                      CommonTypes.Primitive.String)));
               ("HTMLTag",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Record
                      ([("tagName",
                         (Sugartypes.Datatype.Present
                            (Sugartypes.Datatype.Primitive
                               CommonTypes.Primitive.String)));
                         ("attrs",
                          (Sugartypes.Datatype.Present
                             (Sugartypes.Datatype.TypeApplication (
                                "MvuAttrs_2$Attr",
                                [(Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("a", None, `Rigid)))
                                  ]
                                ))));
                         ("children",
                          (Sugartypes.Datatype.Present
                             (Sugartypes.Datatype.TypeApplication (
                                "MvuHTML_3$HTML",
                                [(Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("a", None, `Rigid)))
                                  ]
                                ))))
                         ],
                       Sugartypes.Datatype.Closed))))
               ],
             Sugartypes.Datatype.Closed)),
         (Some [|HTMLAppend:(MvuHTML.HTML (a::Any), MvuHTML.HTML (a::Any))|HTMLEmpty|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr (a::Any),children:MvuHTML.HTML (a::Any),tagName:String)|HTMLText:String|])),
        File /home/simon/git-repos/my-links/_build/default/lib/stdlib/mvuHTML.links, line 4, column 10, to line 35, column 242)
        ]);
   (Sugartypes.Val (
      (Sugartypes.Pattern.Variable ("MvuHTML_3$empty", [|HTMLEmpty|_::Any|])),
      ([a::Row(Any,Any)],
       (Sugartypes.ConstructorLit ("HTMLEmpty", None,
          (Some [|HTMLEmpty|_::Any|])))),
      CommonTypes.Location.Unknown, None));
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$textNode", (a::Any) -> [|HTMLText:a::Any|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("str", _::Any))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.ConstructorLit ("HTMLText",
                 (Some (Sugartypes.TupleLit [(Sugartypes.Var "str")])),
                 (Some [|HTMLText:_::Any|_::Any|])))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$unescapedTextNode", (a::Any) -> [|HTMLRaw:a::Any|_::Any|]);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::Row(Any,Any)],
         ([[(Sugartypes.Pattern.Variable ("str", _::Any))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.ConstructorLit ("HTMLRaw",
                 (Some (Sugartypes.TupleLit [(Sugartypes.Var "str")])),
                 (Some [|HTMLRaw:_::Any|_::Any|])))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$tag",
         (String, MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("nameOfTag", String));
             (Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.ConstructorLit ("HTMLTag",
                 (Some (Sugartypes.TupleLit
                          [(Sugartypes.RecordLit (
                              [("tagName", (Sugartypes.Var "nameOfTag"));
                                ("attrs", (Sugartypes.Var "attrs"));
                                ("children", (Sugartypes.Var "children"))],
                              None))
                            ])),
                 (Some [|HTMLTag:(attrs:MvuAttrs.Attr (a::Any),children:MvuHTML.HTML (a::Any),tagName:String)|HTMLAppend:(MvuHTML.HTML (a::Any), MvuHTML.HTML (a::Any))|HTMLEmpty|HTMLRaw:String|HTMLText:String|])
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Forall (
                  [("a",
                    ((Some CommonTypes.PrimaryKind.Type),
                     (Some (CommonTypes.Linearity.Any,
                            CommonTypes.Restriction.Any))),
                    `Rigid);
                    ("e", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid)
                    ],
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.Primitive
                         CommonTypes.Primitive.String);
                       (Sugartypes.Datatype.TypeApplication (
                          "MvuAttrs_2$Attr",
                          [(Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("a", None, `Rigid)))
                            ]
                          ));
                       (Sugartypes.Datatype.TypeApplication (
                          "MvuHTML_3$HTML",
                          [(Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("a", None, `Rigid)))
                            ]
                          ))
                       ],
                     ([], (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                     (Sugartypes.Datatype.TypeApplication ("MvuHTML_3$HTML",
                        [(Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                          ]
                        ))
                     ))
                  )),
               (Some (String, MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$append",
         (MvuHTML.HTML (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("h1", MvuHTML.HTML (_::Any)));
             (Sugartypes.Pattern.Variable ("h2", MvuHTML.HTML (_::Any)))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.Switch (
                 (Sugartypes.TupleLit
                    [(Sugartypes.Var "h1"); (Sugartypes.Var "h2")]),
                 [((Sugartypes.Pattern.Tuple
                      [(Sugartypes.Pattern.Variant ("HTMLEmpty", None));
                        (Sugartypes.Pattern.Variable
                           ("h2",
                            [|HTMLEmpty|(mu a . HTMLAppend:([|HTMLEmpty|(mu b . HTMLAppend:([|HTMLEmpty|b|], [|HTMLEmpty|a|])|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr (c::Any),children:MvuHTML.HTML (c::Any),tagName:String)|HTMLText:String)|], [|HTMLEmpty|a|])|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr (c::Any),children:MvuHTML.HTML (c::Any),tagName:String)|HTMLText:String)|]))
                        ]),
                   (Sugartypes.Block ([], (Sugartypes.Var "h2"))));
                   ((Sugartypes.Pattern.Tuple
                       [(Sugartypes.Pattern.Variable
                           ("h1",
                            [|HTMLEmpty|(mu a . HTMLAppend:([|HTMLEmpty|a|], [|HTMLEmpty|(mu b . HTMLAppend:([|HTMLEmpty|a|], [|HTMLEmpty|b|])|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr (c::Any),children:MvuHTML.HTML (c::Any),tagName:String)|HTMLText:String)|])|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr (c::Any),children:MvuHTML.HTML (c::Any),tagName:String)|HTMLText:String)|]));
                         (Sugartypes.Pattern.Variant ("HTMLEmpty", None))]),
                    (Sugartypes.Block ([], (Sugartypes.Var "h1"))));
                   ((Sugartypes.Pattern.Tuple
                       [(Sugartypes.Pattern.Variable
                           ("h1",
                            [|HTMLEmpty|(mu a . HTMLAppend:([|HTMLEmpty|a|], [|HTMLEmpty|(mu b . HTMLAppend:([|HTMLEmpty|a|], [|HTMLEmpty|b|])|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr (c::Any),children:MvuHTML.HTML (c::Any),tagName:String)|HTMLText:String)|])|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr (c::Any),children:MvuHTML.HTML (c::Any),tagName:String)|HTMLText:String)|]));
                         (Sugartypes.Pattern.Variable
                            ("h2",
                             [|HTMLEmpty|(mu a . HTMLAppend:([|HTMLEmpty|(mu b . HTMLAppend:([|HTMLEmpty|b|], [|HTMLEmpty|a|])|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr (c::Any),children:MvuHTML.HTML (c::Any),tagName:String)|HTMLText:String)|], [|HTMLEmpty|a|])|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr (c::Any),children:MvuHTML.HTML (c::Any),tagName:String)|HTMLText:String)|]))
                         ]),
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.ConstructorLit ("HTMLAppend",
                           (Some (Sugartypes.TupleLit
                                    [(Sugartypes.Var "h1");
                                      (Sugartypes.Var "h2")])),
                           (Some [|HTMLAppend:([|HTMLEmpty|(mu a . HTMLAppend:([|HTMLEmpty|a|], [|HTMLEmpty|(mu b . HTMLAppend:([|HTMLEmpty|a|], [|HTMLEmpty|b|])|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr (c::Any),children:MvuHTML.HTML (c::Any),tagName:String)|HTMLText:String)|])|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr (c::Any),children:MvuHTML.HTML (c::Any),tagName:String)|HTMLText:String)|], [|HTMLEmpty|(mu b . HTMLAppend:([|HTMLEmpty|(mu a . HTMLAppend:([|HTMLEmpty|a|], [|HTMLEmpty|b|])|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr (c::Any),children:MvuHTML.HTML (c::Any),tagName:String)|HTMLText:String)|], [|HTMLEmpty|b|])|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr (c::Any),children:MvuHTML.HTML (c::Any),tagName:String)|HTMLText:String)|])|HTMLEmpty|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr (c::Any),children:MvuHTML.HTML (c::Any),tagName:String)|HTMLText:String|])
                           )))))
                   ],
                 (Some [|HTMLAppend:([|HTMLEmpty|(mu a . HTMLAppend:([|HTMLEmpty|a|], [|HTMLEmpty|(mu b . HTMLAppend:([|HTMLEmpty|a|], [|HTMLEmpty|b|])|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr (c::Any),children:MvuHTML.HTML (c::Any),tagName:String)|HTMLText:String)|])|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr (c::Any),children:MvuHTML.HTML (c::Any),tagName:String)|HTMLText:String)|], [|HTMLEmpty|(mu b . HTMLAppend:([|HTMLEmpty|(mu a . HTMLAppend:([|HTMLEmpty|a|], [|HTMLEmpty|b|])|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr (c::Any),children:MvuHTML.HTML (c::Any),tagName:String)|HTMLText:String)|], [|HTMLEmpty|b|])|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr (c::Any),children:MvuHTML.HTML (c::Any),tagName:String)|HTMLText:String)|])|HTMLEmpty|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr (c::Any),children:MvuHTML.HTML (c::Any),tagName:String)|HTMLText:String|])
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Forall (
                  [("a",
                    ((Some CommonTypes.PrimaryKind.Type),
                     (Some (CommonTypes.Linearity.Any,
                            CommonTypes.Restriction.Any))),
                    `Rigid);
                    ("e", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid)
                    ],
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.TypeApplication ("MvuHTML_3$HTML",
                         [(Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                           ]
                         ));
                       (Sugartypes.Datatype.TypeApplication (
                          "MvuHTML_3$HTML",
                          [(Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("a", None, `Rigid)))
                            ]
                          ))
                       ],
                     ([], (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                     (Sugartypes.Datatype.TypeApplication ("MvuHTML_3$HTML",
                        [(Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                          ]
                        ))
                     ))
                  )),
               (Some (MvuHTML.HTML (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$+*",
         (MvuHTML.HTML (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("a1", MvuHTML.HTML (_::Any)));
             (Sugartypes.Pattern.Variable ("a2", MvuHTML.HTML (_::Any)))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuHTML_3$append"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Var "a1"); (Sugartypes.Var "a2")]))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Forall (
                  [("a",
                    ((Some CommonTypes.PrimaryKind.Type),
                     (Some (CommonTypes.Linearity.Any,
                            CommonTypes.Restriction.Any))),
                    `Rigid);
                    ("e", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid)
                    ],
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.TypeApplication ("MvuHTML_3$HTML",
                         [(Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                           ]
                         ));
                       (Sugartypes.Datatype.TypeApplication (
                          "MvuHTML_3$HTML",
                          [(Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("a", None, `Rigid)))
                            ]
                          ))
                       ],
                     ([], (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                     (Sugartypes.Datatype.TypeApplication ("MvuHTML_3$HTML",
                        [(Sugartypes.Datatype.Type
                            (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                          ]
                        ))
                     ))
                  )),
               (Some (MvuHTML.HTML (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$concat",
         ([MvuHTML.HTML (a::Any)]) ~> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("nodes", [MvuHTML.HTML (_::Any)]))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "fold_right"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some MvuHTML.HTML (_::Any)));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some MvuHTML.HTML (_::Any)));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Block
                     ([(Sugartypes.Fun
                          { Sugartypes.fun_binder =
                            ("_fun__g146",
                             (MvuHTML.HTML (a::Any), MvuHTML.HTML (a::Any)) ~> MvuHTML.HTML (a::Any));
                            fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                            fun_definition =
                            ([],
                             ([[(Sugartypes.Pattern.Variable
                                   ("x", MvuHTML.HTML (_::Any)));
                                 (Sugartypes.Pattern.Variable
                                    ("acc", MvuHTML.HTML (_::Any)))
                                 ]
                                ],
                              (Sugartypes.Block
                                 ([],
                                  (Sugartypes.FnAppl (
                                     (Sugartypes.TAppl (
                                        (Sugartypes.FreezeVar
                                           "MvuHTML_3$append"),
                                        [((Sugartypes.Datatype.Type
                                             (Sugartypes.Datatype.TypeVar
                                                ("$none", None, `Rigid))),
                                          (Some _::Any));
                                          ((Sugartypes.Datatype.Type
                                              (Sugartypes.Datatype.TypeVar
                                                 ("$none", None, `Rigid))),
                                           (Some { |wild|_ }))
                                          ]
                                        )),
                                     [(Sugartypes.Var "x");
                                       (Sugartypes.Var "acc")]
                                     ))))));
                            fun_location = CommonTypes.Location.Unknown;
                            fun_signature = None;
                            fun_unsafe_signature = false; fun_frozen = true })
                        ],
                      (Sugartypes.FreezeVar "_fun__g146")));
                   (Sugartypes.ConstructorLit ("HTMLEmpty", None,
                      (Some [|HTMLEmpty|HTMLAppend:(MvuHTML.HTML (a::Any), MvuHTML.HTML (a::Any))|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr (a::Any),children:MvuHTML.HTML (a::Any),tagName:String)|HTMLText:String|])
                      ));
                   (Sugartypes.Var "nodes")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$concatMap",
         ((a::Any) ~b~> MvuHTML.HTML (c::Any), [a::Any]) ~b~> MvuHTML.HTML (c::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row; a::(Any,Any)],
         ([[(Sugartypes.Pattern.Variable
               ("f", (_::Any) ~> MvuHTML.HTML (_::Any)));
             (Sugartypes.Pattern.Variable ("nodes", [_::Any]))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "fold_right"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some MvuHTML.HTML (_::Any)));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Block
                     ([(Sugartypes.Fun
                          { Sugartypes.fun_binder =
                            ("_fun__g147",
                             (_::Any, MvuHTML.HTML (b::Any)) ~> MvuHTML.HTML (b::Any));
                            fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                            fun_definition =
                            ([],
                             ([[(Sugartypes.Pattern.Variable ("x", _::Any));
                                 (Sugartypes.Pattern.Variable
                                    ("acc", MvuHTML.HTML (_::Any)))
                                 ]
                                ],
                              (Sugartypes.Block
                                 ([],
                                  (Sugartypes.FnAppl (
                                     (Sugartypes.TAppl (
                                        (Sugartypes.FreezeVar
                                           "MvuHTML_3$append"),
                                        [((Sugartypes.Datatype.Type
                                             (Sugartypes.Datatype.TypeVar
                                                ("$none", None, `Rigid))),
                                          (Some _::Any));
                                          ((Sugartypes.Datatype.Type
                                              (Sugartypes.Datatype.TypeVar
                                                 ("$none", None, `Rigid))),
                                           (Some { |wild|_ }))
                                          ]
                                        )),
                                     [(Sugartypes.FnAppl (
                                         (Sugartypes.Var "f"),
                                         [(Sugartypes.Var "x")]));
                                       (Sugartypes.Var "acc")]
                                     ))))));
                            fun_location = CommonTypes.Location.Unknown;
                            fun_signature = None;
                            fun_unsafe_signature = false; fun_frozen = true })
                        ],
                      (Sugartypes.FreezeVar "_fun__g147")));
                   (Sugartypes.ConstructorLit ("HTMLEmpty", None,
                      (Some [|HTMLEmpty|HTMLAppend:(MvuHTML.HTML (a::Any), MvuHTML.HTML (a::Any))|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr (a::Any),children:MvuHTML.HTML (a::Any),tagName:String)|HTMLText:String|])
                      ));
                   (Sugartypes.Var "nodes")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$html",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "html"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$head",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "head"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$title",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "title"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$base",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "base"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$isindex",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "isindex"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$link",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "link"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$meta",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "meta"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$style",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "style"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$script",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "script"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$noscript",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "noscript"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$body",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "body"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$section",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "section"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$nav",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "nav"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$article",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "article"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$aside",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "aside"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$h1",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "h1"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$h2",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "h2"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$h3",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "h3"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$h4",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "h4"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$h5",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "h5"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$h6",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "h6"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$hgroup",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "hgroup"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$header",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "header"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$footer",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "footer"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$address",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "address"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$p",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "p"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$hr",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "hr"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$pre",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "pre"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$blockquote",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "blockquote"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$ol",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "ol"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$ul",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "ul"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$li",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "li"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$dl",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "dl"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$dt",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "dt"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$dd",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "dd"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$figure",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "figure"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$figcaption",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "figcaption"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$div",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "div"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$center",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "center"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$a",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "a"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$abbr",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "abbr"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$acronym",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "acronym"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$b",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "b"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$basefont",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "basefont"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$bdo",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "bdo"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$big",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "big"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$blink",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "blink"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$br",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "br"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$cite",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "cite"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$code",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "code"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$dfn",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "dfn"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$em",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "em"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$font",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "font"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$i",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "i"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$kbd",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "kbd"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$listing",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "listing"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$mark",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "mark"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$marquee",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "marquee"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$nextid",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "nextid"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$nobr",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "nobr"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$q",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "q"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$rp",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "rp"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$rt",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "rt"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$ruby",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "ruby"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$s",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "s"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$samp",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "samp"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$small",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "small"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$spacer",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "spacer"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$span",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "span"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$strike",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "strike"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$strong",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "strong"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$sub",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "sub"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$sup",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "sup"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$time",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "time"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$tt",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "tt"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$u",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "u"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$var_",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "var"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$wbr",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "wbr"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$xmp",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "xmp"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$ins",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "ins"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$del",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "del"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$img",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "img"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$iframe",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "iframe"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$embed",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "embed"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$object",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "object"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$param",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "param"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$video",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "video"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$audio",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "audio"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$source",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "source"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$track",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "track"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$canvas",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "canvas"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$map_",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "map"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$area",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "area"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$math",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "math"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$svg",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "svg"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$applet",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "applet"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$frame",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "frame"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$frameset",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "frameset"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$noframes",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "noframes"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$bgsound",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "bgsound"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$noembed",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "noembed"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$plaintext",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "plaintext"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$table_",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "table"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$caption",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "caption"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$colgroup",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "colgroup"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$col",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "col"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$tbody",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "tbody"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$thead",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "thead"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$tfoot",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "tfoot"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$tr",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "tr"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$td",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "td"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$th",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "th"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$form",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "form"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$fieldset",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "fieldset"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$legend",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "legend"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$label",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "label"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$input",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "input"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$button",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "button"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$select_",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "select"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$datalist",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "datalist"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$optgroup",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "optgroup"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$option",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "option"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$textarea",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "textarea"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$keygen",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "keygen"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$output",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "output"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$progress",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "progress"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$meter",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "meter"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$details",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "details"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$summary",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "summary"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$command",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "command"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$menu",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "menu"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$acronym",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "acronym"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$applet",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "applet"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$basefont",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "basefont"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$bgsound",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "bgsound"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$big",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "big"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$blink",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "blink"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$c",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "c"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$span",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "span"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$center",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "center"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$font",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "font"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$frame",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "frame"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$frameset",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "frameset"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$isindex",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "isindex"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$listing",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "listing"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$marquee",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "marquee"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$nextid",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "nextid"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$nobr",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "nobr"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$noembed",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "noembed"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$noframes",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "noframes"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$plaintext",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant
                     (CommonTypes.Constant.String "plaintext"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$spacer",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "spacer"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$strike",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "strike"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$tt",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "tt"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$u",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "u"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("MvuHTML_3$xmp",
         (MvuAttrs.Attr (a::Any), MvuHTML.HTML (a::Any)) -> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("attrs", MvuAttrs.Attr (_::Any)));
             (Sugartypes.Pattern.Variable ("children", MvuHTML.HTML (_::Any)))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$tag"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Constant (CommonTypes.Constant.String "xmp"));
                   (Sugartypes.Var "attrs"); (Sugartypes.Var "children")]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Foreign (("Mvu_4$VirtualDom_5$dummy", ()), "dummy",
      "javascript", "/lib/virtual-dom.js",
      (Sugartypes.Datatype.Unit, (Some ()))));
   (Sugartypes.Foreign (
      ("Mvu_4$VDom_6$runDom",
       (String, MvuHTML.HTML (a::Any), AP (?(a::Any).End), MvuSubscriptions.Sub (a::Any)) ~> ()),
      "runDom", "javascript", "/lib/vdom.js",
      ((Sugartypes.Datatype.Forall (
          [("a",
            ((Some CommonTypes.PrimaryKind.Type),
             (Some (CommonTypes.Linearity.Any, CommonTypes.Restriction.Any))),
            `Rigid);
            ("e", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid)],
          (Sugartypes.Datatype.Function (
             [(Sugartypes.Datatype.Primitive CommonTypes.Primitive.String);
               (Sugartypes.Datatype.TypeApplication ("MvuHTML_3$HTML",
                  [(Sugartypes.Datatype.Type
                      (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                    ]
                  ));
               (Sugartypes.Datatype.TypeApplication ("AP",
                  [(Sugartypes.Datatype.Type
                      (Sugartypes.Datatype.Input (
                         (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)),
                         Sugartypes.Datatype.End)))
                    ]
                  ));
               (Sugartypes.Datatype.TypeApplication (
                  "MvuSubscriptions_1$Sub",
                  [(Sugartypes.Datatype.Type
                      (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                    ]
                  ))
               ],
             ([("wild",
                (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
              (Sugartypes.Datatype.Open ("e", None, `Rigid))),
             Sugartypes.Datatype.Unit))
          )),
       (Some (String, MvuHTML.HTML (a::Any), AP (?(a::Any).End), MvuSubscriptions.Sub (a::Any)) ~> ()))
      ));
   (Sugartypes.Foreign (
      ("Mvu_4$VDom_6$updateDom",
       (MvuHTML.HTML (a::Any), MvuSubscriptions.Sub (a::Any)) ~> ()),
      "updateDom", "javascript", "/lib/vdom.js",
      ((Sugartypes.Datatype.Forall (
          [("a",
            ((Some CommonTypes.PrimaryKind.Type),
             (Some (CommonTypes.Linearity.Any, CommonTypes.Restriction.Any))),
            `Rigid);
            ("e", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid)],
          (Sugartypes.Datatype.Function (
             [(Sugartypes.Datatype.TypeApplication ("MvuHTML_3$HTML",
                 [(Sugartypes.Datatype.Type
                     (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                   ]
                 ));
               (Sugartypes.Datatype.TypeApplication (
                  "MvuSubscriptions_1$Sub",
                  [(Sugartypes.Datatype.Type
                      (Sugartypes.Datatype.TypeVar ("a", None, `Rigid)))
                    ]
                  ))
               ],
             ([("wild",
                (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
              (Sugartypes.Datatype.Open ("e", None, `Rigid))),
             Sugartypes.Datatype.Unit))
          )),
       (Some (MvuHTML.HTML (a::Any), MvuSubscriptions.Sub (a::Any)) ~> ()))
      ));
   (Sugartypes.Funs
      [{ Sugartypes.rec_binder =
         ("Mvu_4$evtLoop",
          (AP (?(a).End), b, (b) ~c~> MvuHTML.HTML (a), (a, b) ~c~> b, (b) ~c~> MvuSubscriptions.Sub (a), MvuSubscriptions.Sub (a)) ~c~> ());
         rec_linearity = CommonTypes.DeclaredLinearity.Unl;
         rec_definition =
         (([a; a; a::Row],
           (Some ((AP (?(a).End), b, (b) ~c~> MvuHTML.HTML (a), (a, b) ~c~> b, (b) ~c~> MvuSubscriptions.Sub (a), MvuSubscriptions.Sub (a)) ~c~> (),
                  [None; None; None]))),
          ([[(Sugartypes.Pattern.Variable ("ap", AP (?(_).End)));
              (Sugartypes.Pattern.Variable ("model", _));
              (Sugartypes.Pattern.Variable ("view", (_) ~> MvuHTML.HTML (_)));
              (Sugartypes.Pattern.Variable ("updt", (_, b) ~> b));
              (Sugartypes.Pattern.Variable
                 ("subscriptionsFn", (_) ~> MvuSubscriptions.Sub (_)));
              (Sugartypes.Pattern.Variable
                 ("prevSubscriptions", MvuSubscriptions.Sub (_)))
              ]
             ],
           (Sugartypes.Block
              ([(Sugartypes.Val (
                   (Sugartypes.Pattern.Tuple
                      [(Sugartypes.Pattern.Variable ("message", _));
                        (Sugartypes.Pattern.Variable ("s", End))]),
                   ([],
                    (Sugartypes.FnAppl (
                       (Sugartypes.TAppl ((Sugartypes.FreezeVar "receive"),
                          [((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some _));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some End));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some { |_ }))
                            ]
                          )),
                       [(Sugartypes.FnAppl (
                           (Sugartypes.TAppl (
                              (Sugartypes.FreezeVar "accept"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some ?(_).End));
                                ((Sugartypes.Datatype.Type
                                    (Sugartypes.Datatype.TypeVar
                                       ("$none", None, `Rigid))),
                                 (Some { |_ }))
                                ]
                              )),
                           [(Sugartypes.Var "ap")]))
                         ]
                       ))),
                   CommonTypes.Location.Unknown, None));
                 (Sugartypes.Exp
                    (Sugartypes.FnAppl (
                       (Sugartypes.TAppl ((Sugartypes.FreezeVar "close"),
                          [((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { |_ }))]
                          )),
                       [(Sugartypes.Var "s")])));
                 (Sugartypes.Val ((Sugartypes.Pattern.Variable ("model", _)),
                    ([],
                     (Sugartypes.FnAppl ((Sugartypes.Var "updt"),
                        [(Sugartypes.Var "message"); (Sugartypes.Var "model")
                          ]
                        ))),
                    CommonTypes.Location.Unknown, None));
                 (Sugartypes.Val (
                    (Sugartypes.Pattern.Variable
                       ("newSubscriptions", MvuSubscriptions.Sub (_))),
                    ([],
                     (Sugartypes.FnAppl ((Sugartypes.Var "subscriptionsFn"),
                        [(Sugartypes.Var "model")]))),
                    CommonTypes.Location.Unknown, None));
                 (Sugartypes.Exp
                    (Sugartypes.FnAppl (
                       (Sugartypes.TAppl (
                          (Sugartypes.FreezeVar "Mvu_4$VDom_6$updateDom"),
                          [((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some _));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some { |_ }))
                            ]
                          )),
                       [(Sugartypes.FnAppl ((Sugartypes.Var "view"),
                           [(Sugartypes.Var "model")]));
                         (Sugartypes.Var "newSubscriptions")]
                       )))
                 ],
               (Sugartypes.FnAppl (
                  (Sugartypes.TAppl ((Sugartypes.FreezeVar "Mvu_4$evtLoop"),
                     [((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some _));
                       ((Sugartypes.Datatype.Type
                           (Sugartypes.Datatype.TypeVar
                              ("$none", None, `Rigid))),
                        (Some _));
                       ((Sugartypes.Datatype.Type
                           (Sugartypes.Datatype.TypeVar
                              ("$none", None, `Rigid))),
                        (Some { |_ }))
                       ]
                     )),
                  [(Sugartypes.Var "ap"); (Sugartypes.Var "model");
                    (Sugartypes.Var "view"); (Sugartypes.Var "updt");
                    (Sugartypes.Var "subscriptionsFn");
                    (Sugartypes.Var "newSubscriptions")]
                  ))))));
         rec_location = CommonTypes.Location.Unknown;
         rec_signature =
         (Some ((Sugartypes.Datatype.Forall (
                   [("msg", (None, None), `Rigid);
                     ("model", (None, None), `Rigid);
                     ("e", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid)
                     ],
                   (Sugartypes.Datatype.Function (
                      [(Sugartypes.Datatype.TypeApplication ("AP",
                          [(Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.Input (
                                 (Sugartypes.Datatype.TypeVar
                                    ("msg", None, `Rigid)),
                                 Sugartypes.Datatype.End)))
                            ]
                          ));
                        (Sugartypes.Datatype.TypeVar ("model", None, `Rigid));
                        (Sugartypes.Datatype.Function (
                           [(Sugartypes.Datatype.TypeVar
                               ("model", None, `Rigid))
                             ],
                           ([("wild",
                              (Sugartypes.Datatype.Present
                                 Sugartypes.Datatype.Unit))
                              ],
                            (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                           (Sugartypes.Datatype.TypeApplication (
                              "MvuHTML_3$HTML",
                              [(Sugartypes.Datatype.Type
                                  (Sugartypes.Datatype.TypeVar
                                     ("msg", None, `Rigid)))
                                ]
                              ))
                           ));
                        (Sugartypes.Datatype.Function (
                           [(Sugartypes.Datatype.TypeVar
                               ("msg", None, `Rigid));
                             (Sugartypes.Datatype.TypeVar
                                ("model", None, `Rigid))
                             ],
                           ([("wild",
                              (Sugartypes.Datatype.Present
                                 Sugartypes.Datatype.Unit))
                              ],
                            (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                           (Sugartypes.Datatype.TypeVar
                              ("model", None, `Rigid))
                           ));
                        (Sugartypes.Datatype.Function (
                           [(Sugartypes.Datatype.TypeVar
                               ("model", None, `Rigid))
                             ],
                           ([("wild",
                              (Sugartypes.Datatype.Present
                                 Sugartypes.Datatype.Unit))
                              ],
                            (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                           (Sugartypes.Datatype.TypeApplication (
                              "MvuSubscriptions_1$Sub",
                              [(Sugartypes.Datatype.Type
                                  (Sugartypes.Datatype.TypeVar
                                     ("msg", None, `Rigid)))
                                ]
                              ))
                           ));
                        (Sugartypes.Datatype.TypeApplication (
                           "MvuSubscriptions_1$Sub",
                           [(Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("msg", None, `Rigid)))
                             ]
                           ))
                        ],
                      ([("wild",
                         (Sugartypes.Datatype.Present
                            Sugartypes.Datatype.Unit))
                         ],
                       (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                      Sugartypes.Datatype.Unit))
                   )),
                (Some (AP (?(a).End), b, (b) ~c~> MvuHTML.HTML (a), (a, b) ~c~> b, (b) ~c~> MvuSubscriptions.Sub (a), MvuSubscriptions.Sub (a)) ~c~> ())));
         rec_unsafe_signature = false; rec_frozen = true;
         rec_pos =
         File /home/simon/git-repos/my-links/_build/default/lib/stdlib/mvu.links, line 34, column 44, to line 747, column 1142
         }
        ]);
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("Mvu_4$run",
         (String, a, (a) ~b~> MvuHTML.HTML (c), (c, a) ~b~> a, (a) ~b~> MvuSubscriptions.Sub (c)) ~> ());
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a; a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("placeholder", String));
             (Sugartypes.Pattern.Variable ("model", _));
             (Sugartypes.Pattern.Variable ("view", (_) ~> MvuHTML.HTML (_)));
             (Sugartypes.Pattern.Variable ("updt", (_, b) ~> b));
             (Sugartypes.Pattern.Variable
                ("subscriptions", (_) ~> MvuSubscriptions.Sub (_)))
             ]
            ],
          (Sugartypes.Block
             ([(Sugartypes.Val (
                  (Sugartypes.Pattern.Variable
                     ("evtHandler", Process ({ |_ }))),
                  ([],
                   (Sugartypes.FnAppl (
                      (Sugartypes.TAppl ((Sugartypes.FreezeVar "spawnAt"),
                         [((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some { |_ }));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some ()));
                           ((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some { wild|_ }))
                           ]
                         )),
                      [(Sugartypes.FnAppl (
                          (Sugartypes.TAppl ((Sugartypes.FreezeVar "there"),
                             [((Sugartypes.Datatype.Type
                                  (Sugartypes.Datatype.TypeVar
                                     ("$none", None, `Rigid))),
                               (Some { wild|_ }))]
                             )),
                          []));
                        (Sugartypes.Block
                           ([(Sugartypes.Fun
                                { Sugartypes.fun_binder =
                                  ("_fun__g148", () ~@ ());
                                  fun_linearity =
                                  CommonTypes.DeclaredLinearity.Lin;
                                  fun_definition =
                                  ([],
                                   ([[]],
                                    (Sugartypes.Block
                                       ([(Sugartypes.Val (
                                            (Sugartypes.Pattern.Variable
                                               ("ap", AP (?(_).End))),
                                            ([],
                                             (Sugartypes.FnAppl (
                                                (Sugartypes.TAppl (
                                                   (Sugartypes.FreezeVar
                                                      "new"),
                                                   [((Sugartypes.Datatype.Type
                                                        (Sugartypes.Datatype.TypeVar
                                                           ("$none", None,
                                                            `Rigid))),
                                                     (Some { |_ }));
                                                     ((Sugartypes.Datatype.Type
                                                         (Sugartypes.Datatype.TypeVar
                                                            ("$none", None,
                                                             `Rigid))),
                                                      (Some ?(_).End))
                                                     ]
                                                   )),
                                                []))),
                                            CommonTypes.Location.Unknown,
                                            None));
                                          (Sugartypes.Exp
                                             (Sugartypes.FnAppl (
                                                (Sugartypes.TAppl (
                                                   (Sugartypes.FreezeVar
                                                      "Mvu_4$VDom_6$runDom"),
                                                   [((Sugartypes.Datatype.Type
                                                        (Sugartypes.Datatype.TypeVar
                                                           ("$none", None,
                                                            `Rigid))),
                                                     (Some _));
                                                     ((Sugartypes.Datatype.Type
                                                         (Sugartypes.Datatype.TypeVar
                                                            ("$none", None,
                                                             `Rigid))),
                                                      (Some { |_ }))
                                                     ]
                                                   )),
                                                [(Sugartypes.Var
                                                    "placeholder");
                                                  (Sugartypes.FnAppl (
                                                     (Sugartypes.Var "view"),
                                                     [(Sugartypes.Var "model")
                                                       ]
                                                     ));
                                                  (Sugartypes.Var "ap");
                                                  (Sugartypes.FnAppl (
                                                     (Sugartypes.Var
                                                        "subscriptions"),
                                                     [(Sugartypes.Var "model")
                                                       ]
                                                     ))
                                                  ]
                                                )))
                                          ],
                                        (Sugartypes.FnAppl (
                                           (Sugartypes.TAppl (
                                              (Sugartypes.FreezeVar
                                                 "Mvu_4$evtLoop"),
                                              [((Sugartypes.Datatype.Type
                                                   (Sugartypes.Datatype.TypeVar
                                                      ("$none", None, `Rigid))),
                                                (Some _));
                                                ((Sugartypes.Datatype.Type
                                                    (Sugartypes.Datatype.TypeVar
                                                       ("$none", None, `Rigid))),
                                                 (Some _));
                                                ((Sugartypes.Datatype.Type
                                                    (Sugartypes.Datatype.TypeVar
                                                       ("$none", None, `Rigid))),
                                                 (Some { |_ }))
                                                ]
                                              )),
                                           [(Sugartypes.Var "ap");
                                             (Sugartypes.Var "model");
                                             (Sugartypes.Var "view");
                                             (Sugartypes.Var "updt");
                                             (Sugartypes.Var "subscriptions");
                                             (Sugartypes.FnAppl (
                                                (Sugartypes.Var
                                                   "subscriptions"),
                                                [(Sugartypes.Var "model")]))
                                             ]
                                           ))))));
                                  fun_location = CommonTypes.Location.Unknown;
                                  fun_signature = None;
                                  fun_unsafe_signature = false;
                                  fun_frozen = true })
                              ],
                            (Sugartypes.FreezeVar "_fun__g148")))
                        ]
                      ))),
                  CommonTypes.Location.Unknown, None))
                ],
              (Sugartypes.RecordLit ([], None))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Forall (
                  [("msg", (None, None), `Rigid);
                    ("model", (None, None), `Rigid);
                    ("e", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid);
                    ("f", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid)
                    ],
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.Primitive
                         CommonTypes.Primitive.String);
                       (Sugartypes.Datatype.TypeVar ("model", None, `Rigid));
                       (Sugartypes.Datatype.Function (
                          [(Sugartypes.Datatype.TypeVar
                              ("model", None, `Rigid))
                            ],
                          ([("wild",
                             (Sugartypes.Datatype.Present
                                Sugartypes.Datatype.Unit))
                             ],
                           (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                          (Sugartypes.Datatype.TypeApplication (
                             "MvuHTML_3$HTML",
                             [(Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("msg", None, `Rigid)))
                               ]
                             ))
                          ));
                       (Sugartypes.Datatype.Function (
                          [(Sugartypes.Datatype.TypeVar ("msg", None, `Rigid));
                            (Sugartypes.Datatype.TypeVar
                               ("model", None, `Rigid))
                            ],
                          ([("wild",
                             (Sugartypes.Datatype.Present
                                Sugartypes.Datatype.Unit))
                             ],
                           (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                          (Sugartypes.Datatype.TypeVar
                             ("model", None, `Rigid))
                          ));
                       (Sugartypes.Datatype.Function (
                          [(Sugartypes.Datatype.TypeVar
                              ("model", None, `Rigid))
                            ],
                          ([("wild",
                             (Sugartypes.Datatype.Present
                                Sugartypes.Datatype.Unit))
                             ],
                           (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                          (Sugartypes.Datatype.TypeApplication (
                             "MvuSubscriptions_1$Sub",
                             [(Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("msg", None, `Rigid)))
                               ]
                             ))
                          ))
                       ],
                     ([("wild",
                        (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                        ],
                      (Sugartypes.Datatype.Open ("f", None, `Rigid))),
                     Sugartypes.Datatype.Unit))
                  )),
               (Some (String, a, (a) ~b~> MvuHTML.HTML (c), (c, a) ~b~> a, (a) ~b~> MvuSubscriptions.Sub (c)) ~> ())));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("Mvu_4$runSimple",
         (String, a, (a) ~b~> MvuHTML.HTML (c), (c, a) ~b~> a) ~> ());
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a; a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("placeholder", String));
             (Sugartypes.Pattern.Variable ("model", _));
             (Sugartypes.Pattern.Variable ("view", (_) ~> MvuHTML.HTML (_)));
             (Sugartypes.Pattern.Variable ("updt", (_, b) ~> b))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "Mvu_4$run"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some _));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Var "placeholder"); (Sugartypes.Var "model");
                   (Sugartypes.Var "view"); (Sugartypes.Var "updt");
                   (Sugartypes.Block
                      ([(Sugartypes.Fun
                           { Sugartypes.fun_binder =
                             ("_fun__g149",
                              (_) ~> [|SubEmpty|SubAnimationFrame:(Int) {}~> c|SubAppend:(MvuSubscriptions.Sub (c), MvuSubscriptions.Sub (c))|SubEventHandler:MvuEvents.EventHandler (c)|SubInterval:(Int, () {}~> c)|]);
                             fun_linearity =
                             CommonTypes.DeclaredLinearity.Unl;
                             fun_definition =
                             ([],
                              ([[Sugartypes.Pattern.Any]],
                               (Sugartypes.Block
                                  ([],
                                   (Sugartypes.ConstructorLit ("SubEmpty",
                                      None,
                                      (Some [|SubEmpty|SubAnimationFrame:(Int) {}~> a|SubAppend:(MvuSubscriptions.Sub (a), MvuSubscriptions.Sub (a))|SubEventHandler:MvuEvents.EventHandler (a)|SubInterval:(Int, () {}~> a)|])
                                      ))))));
                             fun_location = CommonTypes.Location.Unknown;
                             fun_signature = None;
                             fun_unsafe_signature = false; fun_frozen = true
                             })
                         ],
                       (Sugartypes.FreezeVar "_fun__g149")))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Forall (
                  [("msg", (None, None), `Rigid);
                    ("model", (None, None), `Rigid);
                    ("e", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid);
                    ("f", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid)
                    ],
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.Primitive
                         CommonTypes.Primitive.String);
                       (Sugartypes.Datatype.TypeVar ("model", None, `Rigid));
                       (Sugartypes.Datatype.Function (
                          [(Sugartypes.Datatype.TypeVar
                              ("model", None, `Rigid))
                            ],
                          ([("wild",
                             (Sugartypes.Datatype.Present
                                Sugartypes.Datatype.Unit))
                             ],
                           (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                          (Sugartypes.Datatype.TypeApplication (
                             "MvuHTML_3$HTML",
                             [(Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("msg", None, `Rigid)))
                               ]
                             ))
                          ));
                       (Sugartypes.Datatype.Function (
                          [(Sugartypes.Datatype.TypeVar ("msg", None, `Rigid));
                            (Sugartypes.Datatype.TypeVar
                               ("model", None, `Rigid))
                            ],
                          ([("wild",
                             (Sugartypes.Datatype.Present
                                Sugartypes.Datatype.Unit))
                             ],
                           (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                          (Sugartypes.Datatype.TypeVar
                             ("model", None, `Rigid))
                          ))
                       ],
                     ([("wild",
                        (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                        ],
                      (Sugartypes.Datatype.Open ("f", None, `Rigid))),
                     Sugartypes.Datatype.Unit))
                  )),
               (Some (String, a, (a) ~b~> MvuHTML.HTML (c), (c, a) ~b~> a) ~> ())));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("Mvu_4$runStatic", (String, a, (a) ~> MvuHTML.HTML (())) ~> ());
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row; a::Row],
         ([[(Sugartypes.Pattern.Variable ("placeholder", String));
             (Sugartypes.Pattern.Variable ("model", _));
             (Sugartypes.Pattern.Variable ("view", (_) ~> MvuHTML.HTML (())))
             ]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "Mvu_4$runSimple"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some ()));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some _));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Var "placeholder"); (Sugartypes.Var "model");
                   (Sugartypes.Var "view");
                   (Sugartypes.Block
                      ([(Sugartypes.Fun
                           { Sugartypes.fun_binder =
                             ("_fun__g150", ((), a) ~> a);
                             fun_linearity =
                             CommonTypes.DeclaredLinearity.Unl;
                             fun_definition =
                             ([],
                              ([[Sugartypes.Pattern.Any;
                                  (Sugartypes.Pattern.Variable ("model", _))]
                                 ],
                               (Sugartypes.Block
                                  ([], (Sugartypes.Var "model")))));
                             fun_location = CommonTypes.Location.Unknown;
                             fun_signature = None;
                             fun_unsafe_signature = false; fun_frozen = true
                             })
                         ],
                       (Sugartypes.FreezeVar "_fun__g150")))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Forall (
                  [("model", (None, None), `Rigid);
                    ("e", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid);
                    ("f", ((Some CommonTypes.PrimaryKind.Row), None), `Rigid)
                    ],
                  (Sugartypes.Datatype.Function (
                     [(Sugartypes.Datatype.Primitive
                         CommonTypes.Primitive.String);
                       (Sugartypes.Datatype.TypeVar ("model", None, `Rigid));
                       (Sugartypes.Datatype.Function (
                          [(Sugartypes.Datatype.TypeVar
                              ("model", None, `Rigid))
                            ],
                          ([("wild",
                             (Sugartypes.Datatype.Present
                                Sugartypes.Datatype.Unit))
                             ],
                           (Sugartypes.Datatype.Open ("e", None, `Rigid))),
                          (Sugartypes.Datatype.TypeApplication (
                             "MvuHTML_3$HTML",
                             [(Sugartypes.Datatype.Type
                                 Sugartypes.Datatype.Unit)
                               ]
                             ))
                          ))
                       ],
                     ([("wild",
                        (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
                        ],
                      (Sugartypes.Datatype.Open ("f", None, `Rigid))),
                     Sugartypes.Datatype.Unit))
                  )),
               (Some (String, a, (a) ~> MvuHTML.HTML (())) ~> ())));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Typenames
      [("Model", [],
        ((Sugartypes.Datatype.Record
            ([("seconds",
               (Sugartypes.Datatype.Present
                  (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)));
               ("minutes",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Int)));
               ("paused",
                (Sugartypes.Datatype.Present
                   (Sugartypes.Datatype.Primitive CommonTypes.Primitive.Bool)))
               ],
             Sugartypes.Datatype.Closed)),
         (Some (minutes:Int,paused:Bool,seconds:Int))),
        File time.links, line 7, columns 104 to 165)]);
   (Sugartypes.Typenames
      [("Msg", [],
        ((Sugartypes.Datatype.Variant
            ([("Tick", (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit));
               ("Reset",
                (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit));
               ("TogglePause",
                (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit));
               ("Stop",
                (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit));
               ("NoOp",
                (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))
               ],
             Sugartypes.Datatype.Closed)),
         (Some [|NoOp|Reset|Stop|Tick|TogglePause|])),
        File time.links, line 8, columns 167 to 228)]);
   (Sugartypes.Val ((Sugartypes.Pattern.Variable ("pKey", String)),
      ([], (Sugartypes.Constant (CommonTypes.Constant.String "p"))),
      CommonTypes.Location.Unknown, None));
   (Sugartypes.Val ((Sugartypes.Pattern.Variable ("rKey", String)),
      ([], (Sugartypes.Constant (CommonTypes.Constant.String "r"))),
      CommonTypes.Location.Unknown, None));
   (Sugartypes.Val ((Sugartypes.Pattern.Variable ("sKey", String)),
      ([], (Sugartypes.Constant (CommonTypes.Constant.String "s"))),
      CommonTypes.Location.Unknown, None));
   (Sugartypes.Val (
      (Sugartypes.Pattern.Variable
         ("resetHandler",
          [|AttrEventHandler:[|UnitHandler:(String, () -> [|Reset|_::(Any,Mono)|])|_::(Any,Mono)|]|_::(Any,Mono)|])),
      ([],
       (Sugartypes.FnAppl (
          (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuAttrs_2$onClick"),
             [((Sugartypes.Datatype.Type
                  (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
               (Some () -> [|Reset|_::(Any,Mono)|]));
               ((Sugartypes.Datatype.Type
                   (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                (Some { |wild }));
               ((Sugartypes.Datatype.Type
                   (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                (Some { |_::(Any,Mono) }));
               ((Sugartypes.Datatype.Type
                   (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                (Some { |_::(Any,Mono) }))
               ]
             )),
          [(Sugartypes.Block
              ([(Sugartypes.Fun
                   { Sugartypes.fun_binder =
                     ("_fun__g151", () -> [|Reset|_::(Any,Mono)|]);
                     fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                     fun_definition =
                     ([],
                      ([[]],
                       (Sugartypes.Block
                          ([],
                           (Sugartypes.ConstructorLit ("Reset", None,
                              (Some [|Reset|_::(Any,Mono)|])))))));
                     fun_location = CommonTypes.Location.Unknown;
                     fun_signature = None; fun_unsafe_signature = false;
                     fun_frozen = true })
                 ],
               (Sugartypes.FreezeVar "_fun__g151")))
            ]
          ))),
      CommonTypes.Location.Unknown, None));
   (Sugartypes.Val (
      (Sugartypes.Pattern.Variable
         ("stopHandler",
          [|AttrEventHandler:[|UnitHandler:(String, () -> [|Stop|_::(Any,Mono)|])|_::(Any,Mono)|]|_::(Any,Mono)|])),
      ([],
       (Sugartypes.FnAppl (
          (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuAttrs_2$onClick"),
             [((Sugartypes.Datatype.Type
                  (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
               (Some () -> [|Stop|_::(Any,Mono)|]));
               ((Sugartypes.Datatype.Type
                   (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                (Some { |wild }));
               ((Sugartypes.Datatype.Type
                   (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                (Some { |_::(Any,Mono) }));
               ((Sugartypes.Datatype.Type
                   (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                (Some { |_::(Any,Mono) }))
               ]
             )),
          [(Sugartypes.Block
              ([(Sugartypes.Fun
                   { Sugartypes.fun_binder =
                     ("_fun__g152", () -> [|Stop|_::(Any,Mono)|]);
                     fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                     fun_definition =
                     ([],
                      ([[]],
                       (Sugartypes.Block
                          ([],
                           (Sugartypes.ConstructorLit ("Stop", None,
                              (Some [|Stop|_::(Any,Mono)|])))))));
                     fun_location = CommonTypes.Location.Unknown;
                     fun_signature = None; fun_unsafe_signature = false;
                     fun_frozen = true })
                 ],
               (Sugartypes.FreezeVar "_fun__g152")))
            ]
          ))),
      CommonTypes.Location.Unknown, None));
   (Sugartypes.Val (
      (Sugartypes.Pattern.Variable
         ("togglePauseHandler",
          [|AttrEventHandler:[|UnitHandler:(String, () -> [|TogglePause|_::(Any,Mono)|])|_::(Any,Mono)|]|_::(Any,Mono)|])),
      ([],
       (Sugartypes.FnAppl (
          (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuAttrs_2$onClick"),
             [((Sugartypes.Datatype.Type
                  (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
               (Some () -> [|TogglePause|_::(Any,Mono)|]));
               ((Sugartypes.Datatype.Type
                   (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                (Some { |wild }));
               ((Sugartypes.Datatype.Type
                   (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                (Some { |_::(Any,Mono) }));
               ((Sugartypes.Datatype.Type
                   (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                (Some { |_::(Any,Mono) }))
               ]
             )),
          [(Sugartypes.Block
              ([(Sugartypes.Fun
                   { Sugartypes.fun_binder =
                     ("_fun__g153", () -> [|TogglePause|_::(Any,Mono)|]);
                     fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                     fun_definition =
                     ([],
                      ([[]],
                       (Sugartypes.Block
                          ([],
                           (Sugartypes.ConstructorLit ("TogglePause", None,
                              (Some [|TogglePause|_::(Any,Mono)|])))))));
                     fun_location = CommonTypes.Location.Unknown;
                     fun_signature = None; fun_unsafe_signature = false;
                     fun_frozen = true })
                 ],
               (Sugartypes.FreezeVar "_fun__g153")))
            ]
          ))),
      CommonTypes.Location.Unknown, None));
   (Sugartypes.Val (
      (Sugartypes.Pattern.Variable
         ("secondsHandler",
          [|SubInterval:(Int, () {}~> [|Tick|NoOp|Reset|Stop|TogglePause|])|SubAppend:([|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|SubInterval:(Int, () {}~> [|Tick|NoOp|Reset|Stop|TogglePause|])|SubAnimationFrame:(Int) {}~> [|TogglePause|NoOp|Reset|Stop|Tick|]|SubEventHandler:MvuEvents.EventHandler ([|TogglePause|NoOp|Reset|Stop|Tick|]))|])|SubInterval:(Int, () {}~> [|Tick|NoOp|Reset|Stop|TogglePause|])|SubAnimationFrame:(Int) {}~> [|TogglePause|NoOp|Reset|Stop|Tick|]|SubEventHandler:MvuEvents.EventHandler ([|TogglePause|NoOp|Reset|Stop|Tick|]))|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|SubInterval:(Int, () {}~> [|Tick|NoOp|Reset|Stop|TogglePause|])|SubAnimationFrame:(Int) {}~> [|TogglePause|NoOp|Reset|Stop|Tick|]|SubEventHandler:MvuEvents.EventHandler ([|TogglePause|NoOp|Reset|Stop|Tick|]))|], [|SubEmpty|b|])|SubInterval:(Int, () {}~> [|Tick|NoOp|Reset|Stop|TogglePause|])|SubAnimationFrame:(Int) {}~> [|TogglePause|NoOp|Reset|Stop|Tick|]|SubEventHandler:MvuEvents.EventHandler ([|TogglePause|NoOp|Reset|Stop|Tick|]))|])|SubEmpty|SubAnimationFrame:(Int) {}~> [|TogglePause|NoOp|Reset|Stop|Tick|]|SubEventHandler:MvuEvents.EventHandler ([|TogglePause|NoOp|Reset|Stop|Tick|])|])),
      ([],
       (Sugartypes.FnAppl (
          (Sugartypes.TAppl (
             (Sugartypes.FreezeVar "MvuSubscriptions_1$getEvery"),
             [((Sugartypes.Datatype.Type
                  (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
               (Some Int));
               ((Sugartypes.Datatype.Type
                   (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                (Some () {}~> [|Tick|NoOp|Reset|Stop|TogglePause|]));
               ((Sugartypes.Datatype.Type
                   (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                (Some { |wild }));
               ((Sugartypes.Datatype.Type
                   (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                (Some { |SubAppend:([|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|SubInterval:(Int, () {}~> [|Tick|NoOp|Reset|Stop|TogglePause|])|SubAnimationFrame:(Int) {}~> [|TogglePause|NoOp|Reset|Stop|Tick|]|SubEventHandler:MvuEvents.EventHandler ([|TogglePause|NoOp|Reset|Stop|Tick|]))|])|SubInterval:(Int, () {}~> [|Tick|NoOp|Reset|Stop|TogglePause|])|SubAnimationFrame:(Int) {}~> [|TogglePause|NoOp|Reset|Stop|Tick|]|SubEventHandler:MvuEvents.EventHandler ([|TogglePause|NoOp|Reset|Stop|Tick|]))|], [|SubEmpty|(mu b . SubAppend:([|SubEmpty|(mu a . SubAppend:([|SubEmpty|a|], [|SubEmpty|b|])|SubInterval:(Int, () {}~> [|Tick|NoOp|Reset|Stop|TogglePause|])|SubAnimationFrame:(Int) {}~> [|TogglePause|NoOp|Reset|Stop|Tick|]|SubEventHandler:MvuEvents.EventHandler ([|TogglePause|NoOp|Reset|Stop|Tick|]))|], [|SubEmpty|b|])|SubInterval:(Int, () {}~> [|Tick|NoOp|Reset|Stop|TogglePause|])|SubAnimationFrame:(Int) {}~> [|TogglePause|NoOp|Reset|Stop|Tick|]|SubEventHandler:MvuEvents.EventHandler ([|TogglePause|NoOp|Reset|Stop|Tick|]))|]),SubEmpty|SubAnimationFrame:(Int) {}~> [|TogglePause|NoOp|Reset|Stop|Tick|],SubEventHandler:MvuEvents.EventHandler ([|TogglePause|NoOp|Reset|Stop|Tick|]) }))
               ]
             )),
          [(Sugartypes.Constant (CommonTypes.Constant.Int 1000));
            (Sugartypes.Block
               ([(Sugartypes.Fun
                    { Sugartypes.fun_binder =
                      ("_fun__g154",
                       () {}~> [|Tick|NoOp|Reset|Stop|TogglePause|]);
                      fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                      fun_definition =
                      ([],
                       ([[]],
                        (Sugartypes.Block
                           ([],
                            (Sugartypes.ConstructorLit ("Tick", None,
                               (Some [|Tick|NoOp|Reset|Stop|TogglePause|])))))));
                      fun_location = CommonTypes.Location.Unknown;
                      fun_signature = None; fun_unsafe_signature = false;
                      fun_frozen = true })
                  ],
                (Sugartypes.FreezeVar "_fun__g154")))
            ]
          ))),
      CommonTypes.Location.Unknown, None));
   (Sugartypes.Val (
      (Sugartypes.Pattern.Variable
         ("shortcutHandler",
          MvuSubscriptions.Sub ([|TogglePause|NoOp|Reset|Stop|Tick|]))),
      ([],
       (Sugartypes.FnAppl (
          (Sugartypes.TAppl (
             (Sugartypes.FreezeVar "MvuSubscriptions_1$onKeyDown"),
             [((Sugartypes.Datatype.Type
                  (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
               (Some [|TogglePause|NoOp|Reset|Stop|Tick|]));
               ((Sugartypes.Datatype.Type
                   (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                (Some { |wild }))
               ]
             )),
          [(Sugartypes.Block
              ([(Sugartypes.Fun
                   { Sugartypes.fun_binder =
                     ("_fun__g155",
                      ((key:String|altKey:Bool,code:Int,ctrlKey:Bool,isComposing:Bool,locale:String,location:Int,metaKey:Bool,repeat:Bool,shiftKey:Bool)) {}~> [|TogglePause|NoOp|Reset|Stop|Tick|]);
                     fun_linearity = CommonTypes.DeclaredLinearity.Unl;
                     fun_definition =
                     ([],
                      ([[(Sugartypes.Pattern.Variable
                            ("evt",
                             (key:String|altKey:Bool,code:Int,ctrlKey:Bool,isComposing:Bool,locale:String,location:Int,metaKey:Bool,repeat:Bool,shiftKey:Bool)))
                          ]
                         ],
                       (Sugartypes.Block
                          ([],
                           (Sugartypes.Conditional (
                              (Sugartypes.InfixAppl (
                                 ([String; { |wild }],
                                  (Operators.BinaryOp.Name "==")),
                                 (Sugartypes.Projection (
                                    (Sugartypes.Var "evt"), "key")),
                                 (Sugartypes.Var "pKey"))),
                              (Sugartypes.Block
                                 ([],
                                  (Sugartypes.ConstructorLit ("TogglePause",
                                     None,
                                     (Some [|TogglePause|NoOp|Reset|Stop|Tick|])
                                     )))),
                              (Sugartypes.Conditional (
                                 (Sugartypes.InfixAppl (
                                    ([String; { |wild }],
                                     (Operators.BinaryOp.Name "==")),
                                    (Sugartypes.Projection (
                                       (Sugartypes.Var "evt"), "key")),
                                    (Sugartypes.Var "rKey"))),
                                 (Sugartypes.Block
                                    ([],
                                     (Sugartypes.ConstructorLit ("Reset",
                                        None,
                                        (Some [|Reset|NoOp|Stop|TogglePause|Tick|])
                                        )))),
                                 (Sugartypes.Conditional (
                                    (Sugartypes.InfixAppl (
                                       ([String; { |wild }],
                                        (Operators.BinaryOp.Name "==")),
                                       (Sugartypes.Projection (
                                          (Sugartypes.Var "evt"), "key")),
                                       (Sugartypes.Var "sKey"))),
                                    (Sugartypes.Block
                                       ([],
                                        (Sugartypes.ConstructorLit ("Stop",
                                           None,
                                           (Some [|Stop|NoOp|Reset|TogglePause|Tick|])
                                           )))),
                                    (Sugartypes.Block
                                       ([],
                                        (Sugartypes.ConstructorLit ("NoOp",
                                           None,
                                           (Some [|NoOp|Stop|Reset|TogglePause|Tick|])
                                           ))))
                                    ))
                                 ))
                              ))))));
                     fun_location = CommonTypes.Location.Unknown;
                     fun_signature = None; fun_unsafe_signature = false;
                     fun_frozen = true })
                 ],
               (Sugartypes.FreezeVar "_fun__g155")))
            ]
          ))),
      CommonTypes.Location.Unknown, None));
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("pad", (Int) -> String);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("t", Int))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.Conditional (
                 (Sugartypes.InfixAppl (
                    ([Int; { |_ }], (Operators.BinaryOp.Name "<")),
                    (Sugartypes.Var "t"),
                    (Sugartypes.Constant (CommonTypes.Constant.Int 10)))),
                 (Sugartypes.Block
                    ([],
                     (Sugartypes.InfixAppl (
                        ([{ |_ }], (Operators.BinaryOp.Name "^^")),
                        (Sugartypes.Constant
                           (CommonTypes.Constant.String "0")),
                        (Sugartypes.FnAppl (
                           (Sugartypes.TAppl (
                              (Sugartypes.FreezeVar "intToString"),
                              [((Sugartypes.Datatype.Type
                                   (Sugartypes.Datatype.TypeVar
                                      ("$none", None, `Rigid))),
                                (Some { |_ }))]
                              )),
                           [(Sugartypes.Var "t")]))
                        )))),
                 (Sugartypes.Block
                    ([],
                     (Sugartypes.FnAppl (
                        (Sugartypes.TAppl (
                           (Sugartypes.FreezeVar "intToString"),
                           [((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some { |_ }))]
                           )),
                        [(Sugartypes.Var "t")]))))
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("updt", (Msg, Model) ~> Model);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("msg", Msg));
             (Sugartypes.Pattern.Variable ("model", Model))]
            ],
          (Sugartypes.Block
             ([],
              (Sugartypes.Switch ((Sugartypes.Var "msg"),
                 [((Sugartypes.Pattern.Variant ("Tick", None)),
                   (Sugartypes.Block
                      ([],
                       (Sugartypes.Conditional (
                          (Sugartypes.InfixAppl (
                             ([Int; { |wild|_ }],
                              (Operators.BinaryOp.Name "<")),
                             (Sugartypes.Projection (
                                (Sugartypes.Var "model"), "seconds")),
                             (Sugartypes.Constant
                                (CommonTypes.Constant.Int 59))
                             )),
                          (Sugartypes.Block
                             ([],
                              (Sugartypes.With ((Sugartypes.Var "model"),
                                 [("seconds",
                                   (Sugartypes.InfixAppl (
                                      ([{ |wild|_ }],
                                       (Operators.BinaryOp.Name "+")),
                                      (Sugartypes.Projection (
                                         (Sugartypes.Var "model"), "seconds"
                                         )),
                                      (Sugartypes.Constant
                                         (CommonTypes.Constant.Int 1))
                                      )))
                                   ]
                                 )))),
                          (Sugartypes.Block
                             ([],
                              (Sugartypes.With ((Sugartypes.Var "model"),
                                 [("minutes",
                                   (Sugartypes.InfixAppl (
                                      ([{ |wild|_ }],
                                       (Operators.BinaryOp.Name "+")),
                                      (Sugartypes.Projection (
                                         (Sugartypes.Var "model"), "minutes"
                                         )),
                                      (Sugartypes.Constant
                                         (CommonTypes.Constant.Int 1))
                                      )));
                                   ("seconds",
                                    (Sugartypes.Constant
                                       (CommonTypes.Constant.Int 0)))
                                   ]
                                 ))))
                          )))));
                   ((Sugartypes.Pattern.Variant ("Reset", None)),
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.With ((Sugartypes.Var "model"),
                           [("minutes",
                             (Sugartypes.Constant
                                (CommonTypes.Constant.Int 0)));
                             ("seconds",
                              (Sugartypes.Constant
                                 (CommonTypes.Constant.Int 0)))
                             ]
                           )))));
                   ((Sugartypes.Pattern.Variant ("TogglePause", None)),
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.With ((Sugartypes.Var "model"),
                           [("paused",
                             (Sugartypes.FnAppl (
                                (Sugartypes.TAppl (
                                   (Sugartypes.FreezeVar "not"),
                                   [((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some { |wild|_ }))]
                                   )),
                                [(Sugartypes.Projection (
                                    (Sugartypes.Var "model"), "paused"))
                                  ]
                                )))
                             ]
                           )))));
                   ((Sugartypes.Pattern.Variant ("Stop", None)),
                    (Sugartypes.Block
                       ([],
                        (Sugartypes.With ((Sugartypes.Var "model"),
                           [("minutes",
                             (Sugartypes.Constant
                                (CommonTypes.Constant.Int 0)));
                             ("seconds",
                              (Sugartypes.Constant
                                 (CommonTypes.Constant.Int 0)));
                             ("paused",
                              (Sugartypes.Constant
                                 (CommonTypes.Constant.Bool true)))
                             ]
                           )))));
                   ((Sugartypes.Pattern.Variant ("NoOp", None)),
                    (Sugartypes.Block ([], (Sugartypes.Var "model"))))
                   ],
                 (Some Model)))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Msg", []));
                    (Sugartypes.Datatype.TypeApplication ("Model", []))],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("Model", [])))),
               (Some (Msg, Model) ~> Model)));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Val (
      (Sugartypes.Pattern.Variable ("ae", [|AttrEmpty|_::Any|])),
      ([a::Row(Any,Any)],
       (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuAttrs_2$empty"),
          [((Sugartypes.Datatype.Type
               (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
            (Some { |_::Any }))]
          ))),
      CommonTypes.Location.Unknown, None));
   (Sugartypes.Val (
      (Sugartypes.Pattern.Variable ("he", [|HTMLEmpty|_::Any|])),
      ([a::Row(Any,Any)],
       (Sugartypes.TAppl ((Sugartypes.FreezeVar "MvuHTML_3$empty"),
          [((Sugartypes.Datatype.Type
               (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
            (Some { |_::Any }))]
          ))),
      CommonTypes.Location.Unknown, None));
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("ch", ([MvuHTML.HTML (a::Any)]) ~> MvuHTML.HTML (a::Any));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::(Any,Any); a::Row],
         ([[(Sugartypes.Pattern.Variable ("xs", [MvuHTML.HTML (_::Any)]))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl (
                    (Sugartypes.FreezeVar "MvuHTML_3$concat"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some _::Any));
                      ((Sugartypes.Datatype.Type
                          (Sugartypes.Datatype.TypeVar
                             ("$none", None, `Rigid))),
                       (Some { |_ }))
                      ]
                    )),
                 [(Sugartypes.Var "xs")]))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("view", (Model) ~> MvuHTML.HTML (Msg));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("model", Model))]],
          (Sugartypes.Block
             ([(Sugartypes.Val (
                  (Sugartypes.Pattern.Variable ("toggleText", String)),
                  ([],
                   (Sugartypes.Conditional (
                      (Sugartypes.Projection ((Sugartypes.Var "model"),
                         "paused")),
                      (Sugartypes.Block
                         ([],
                          (Sugartypes.Constant
                             (CommonTypes.Constant.String "Start")))),
                      (Sugartypes.Block
                         ([],
                          (Sugartypes.Constant
                             (CommonTypes.Constant.String "Pause"))))
                      ))),
                  CommonTypes.Location.Unknown, None))
                ],
              (Sugartypes.ConstructorLit ("HTMLTag",
                 (Some (Sugartypes.RecordLit (
                          [("tagName",
                            (Sugartypes.Constant
                               (CommonTypes.Constant.String "div")));
                            ("attrs",
                             (Sugartypes.FnAppl (
                                (Sugartypes.TAppl (
                                   (Sugartypes.FreezeVar "MvuAttrs_2$concat"),
                                   [((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some Msg));
                                     ((Sugartypes.Datatype.Type
                                         (Sugartypes.Datatype.TypeVar
                                            ("$none", None, `Rigid))),
                                      (Some { |_ }))
                                     ]
                                   )),
                                [(Sugartypes.ListLit (
                                    [(Sugartypes.FnAppl (
                                        (Sugartypes.TAppl (
                                           (Sugartypes.FreezeVar
                                              "MvuAttrs_2$attr"),
                                           [((Sugartypes.Datatype.Type
                                                (Sugartypes.Datatype.TypeVar
                                                   ("$none", None, `Rigid))),
                                             (Some Msg));
                                             ((Sugartypes.Datatype.Type
                                                 (Sugartypes.Datatype.TypeVar
                                                    ("$none", None, `Rigid))),
                                              (Some { |wild|_ }))
                                             ]
                                           )),
                                        [(Sugartypes.Constant
                                            (CommonTypes.Constant.String "id"));
                                          (Sugartypes.Constant
                                             (CommonTypes.Constant.String
                                                "swatch"))
                                          ]
                                        ));
                                      (Sugartypes.FnAppl (
                                         (Sugartypes.TAppl (
                                            (Sugartypes.FreezeVar
                                               "MvuAttrs_2$attr"),
                                            [((Sugartypes.Datatype.Type
                                                 (Sugartypes.Datatype.TypeVar
                                                    ("$none", None, `Rigid))),
                                              (Some Msg));
                                              ((Sugartypes.Datatype.Type
                                                  (Sugartypes.Datatype.TypeVar
                                                     ("$none", None, `Rigid))),
                                               (Some { |wild|_ }))
                                              ]
                                            )),
                                         [(Sugartypes.Constant
                                             (CommonTypes.Constant.String
                                                "class"));
                                           (Sugartypes.Constant
                                              (CommonTypes.Constant.String
                                                 "swatch"))
                                           ]
                                         ))
                                      ],
                                    (Some MvuAttrs.Attr (Msg))))
                                  ]
                                )));
                            ("children",
                             (Sugartypes.FnAppl (
                                (Sugartypes.TAppl (
                                   (Sugartypes.FreezeVar "MvuHTML_3$concat"),
                                   [((Sugartypes.Datatype.Type
                                        (Sugartypes.Datatype.TypeVar
                                           ("$none", None, `Rigid))),
                                     (Some [|TogglePause|Reset|Stop|NoOp|Tick|]));
                                     ((Sugartypes.Datatype.Type
                                         (Sugartypes.Datatype.TypeVar
                                            ("$none", None, `Rigid))),
                                      (Some { |_ }))
                                     ]
                                   )),
                                [(Sugartypes.ListLit (
                                    [(Sugartypes.ConstructorLit ("HTMLText",
                                        (Some (Sugartypes.Constant
                                                 (CommonTypes.Constant.String
                                                    "\n       "))),
                                        (Some [|HTMLText:String|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|])
                                        ));
                                      (Sugartypes.ConstructorLit ("HTMLTag",
                                         (Some (Sugartypes.RecordLit (
                                                  [("tagName",
                                                    (Sugartypes.Constant
                                                       (CommonTypes.Constant.String
                                                          "h1")));
                                                    ("attrs",
                                                     (Sugartypes.FnAppl (
                                                        (Sugartypes.TAppl (
                                                           (Sugartypes.FreezeVar
                                                              "MvuAttrs_2$concat"),
                                                           [((Sugartypes.Datatype.Type
                                                                (Sugartypes.Datatype.TypeVar
                                                                   ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                             (Some [|TogglePause|Reset|Stop|NoOp|Tick|]));
                                                             ((Sugartypes.Datatype.Type
                                                                 (Sugartypes.Datatype.TypeVar
                                                                    (
                                                                    "$none",
                                                                    None,
                                                                    `Rigid))),
                                                              (Some { |_ }))
                                                             ]
                                                           )),
                                                        [(Sugartypes.ListLit (
                                                            [],
                                                            (Some MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]))
                                                            ))
                                                          ]
                                                        )));
                                                    ("children",
                                                     (Sugartypes.FnAppl (
                                                        (Sugartypes.TAppl (
                                                           (Sugartypes.FreezeVar
                                                              "MvuHTML_3$concat"),
                                                           [((Sugartypes.Datatype.Type
                                                                (Sugartypes.Datatype.TypeVar
                                                                   ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                             (Some [|TogglePause|Reset|Stop|NoOp|Tick|]));
                                                             ((Sugartypes.Datatype.Type
                                                                 (Sugartypes.Datatype.TypeVar
                                                                    (
                                                                    "$none",
                                                                    None,
                                                                    `Rigid))),
                                                              (Some { |_ }))
                                                             ]
                                                           )),
                                                        [(Sugartypes.ListLit (
                                                            [(Sugartypes.Block
                                                                ([],
                                                                 (Sugartypes.InfixAppl (
                                                                    (
                                                                    [[|TogglePause|Reset|Stop|NoOp|Tick|];
                                                                    { |wild|_ }
                                                                    ],
                                                                    (
                                                                    Operators.BinaryOp.Name
                                                                    "MvuHTML_3$+*")),
                                                                    (
                                                                    Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "MvuHTML_3$textNode"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some String));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild|_ }));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|])),HTMLEmpty,HTMLRaw:String,HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String) }))
                                                                    ])),
                                                                    [(Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "pad"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild|_ }))
                                                                    ])),
                                                                    [(Sugartypes.Projection (
                                                                    (Sugartypes.Var
                                                                    "model"),
                                                                    "minutes"
                                                                    ))]))])),
                                                                    (
                                                                    Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "MvuHTML_3$textNode"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some String));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild|_ }));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|])),HTMLEmpty,HTMLRaw:String,HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String) }))
                                                                    ])),
                                                                    [(Sugartypes.InfixAppl (
                                                                    ([{ |wild|_ }
                                                                    ],
                                                                    (Operators.BinaryOp.Name
                                                                    "^^")),
                                                                    (Sugartypes.Constant
                                                                    (CommonTypes.Constant.String
                                                                    ":")),
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "pad"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild|_ }))
                                                                    ])),
                                                                    [(Sugartypes.Projection (
                                                                    (Sugartypes.Var
                                                                    "model"),
                                                                    "seconds"
                                                                    ))]))))]
                                                                    ))))))
                                                              ],
                                                            (Some MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))
                                                            ))
                                                          ]
                                                        )))
                                                    ],
                                                  None))),
                                         (Some [|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|HTMLText:String|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|])
                                         ));
                                      (Sugartypes.ConstructorLit ("HTMLText",
                                         (Some (Sugartypes.Constant
                                                  (CommonTypes.Constant.String
                                                     "\n       "))),
                                         (Some [|HTMLText:String|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|])
                                         ));
                                      (Sugartypes.ConstructorLit ("HTMLTag",
                                         (Some (Sugartypes.RecordLit (
                                                  [("tagName",
                                                    (Sugartypes.Constant
                                                       (CommonTypes.Constant.String
                                                          "button")));
                                                    ("attrs",
                                                     (Sugartypes.FnAppl (
                                                        (Sugartypes.TAppl (
                                                           (Sugartypes.FreezeVar
                                                              "MvuAttrs_2$concat"),
                                                           [((Sugartypes.Datatype.Type
                                                                (Sugartypes.Datatype.TypeVar
                                                                   ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                             (Some [|TogglePause|Reset|Stop|NoOp|Tick|]));
                                                             ((Sugartypes.Datatype.Type
                                                                 (Sugartypes.Datatype.TypeVar
                                                                    (
                                                                    "$none",
                                                                    None,
                                                                    `Rigid))),
                                                              (Some { |_ }))
                                                             ]
                                                           )),
                                                        [(Sugartypes.ListLit (
                                                            [(Sugartypes.FnAppl (
                                                                (Sugartypes.TAppl (
                                                                   (Sugartypes.FreezeVar
                                                                    "MvuAttrs_2$attr"),
                                                                   [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some [|TogglePause|Reset|Stop|NoOp|Tick|]));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild|_ }))
                                                                    ]
                                                                   )),
                                                                [(Sugartypes.Constant
                                                                    (
                                                                    CommonTypes.Constant.String
                                                                    "id"));
                                                                  (Sugartypes.Constant
                                                                    (CommonTypes.Constant.String
                                                                    "togglepause"))
                                                                  ]
                                                                ));
                                                              (Sugartypes.FnAppl (
                                                                 (Sugartypes.TAppl (
                                                                    (
                                                                    Sugartypes.FreezeVar
                                                                    "MvuAttrs_2$onClick"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some () {}~> [|TogglePause|Reset|Stop|NoOp|Tick|]));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild|_ }));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |KeyboardEventHandler:(MvuEvents.EventName, (MvuEvents.KeyboardEvent) {}~> Maybe ([|TogglePause|Reset|Stop|NoOp|Tick|])),MouseEventHandler:(MvuEvents.EventName, (MvuEvents.MouseEvent) {}~> Maybe ([|TogglePause|Reset|Stop|NoOp|Tick|])),PropertyHandler:(MvuEvents.EventName, MvuEvents.PropertyName, (MvuEvents.PropertyValue) {}~> Maybe ([|TogglePause|Reset|Stop|NoOp|Tick|])) }));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |AttrAppend:(MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|])),AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue),AttrEmpty }))
                                                                    ])),
                                                                 [(Sugartypes.Block
                                                                    ([],
                                                                    (Sugartypes.Block
                                                                    ([(Sugartypes.Fun
                                                                    { Sugartypes.fun_binder =
                                                                    ("_fun__g156",
                                                                    () {}~> [|TogglePause|Reset|Stop|NoOp|Tick|]);
                                                                    fun_linearity =
                                                                    CommonTypes.DeclaredLinearity.Unl;
                                                                    fun_definition =
                                                                    (
                                                                    [],
                                                                    (
                                                                    [[]],
                                                                    (
                                                                    Sugartypes.Block
                                                                    ([],
                                                                    (Sugartypes.ConstructorLit (
                                                                    "TogglePause",
                                                                    None,
                                                                    (Some [|TogglePause|Reset|Stop|NoOp|Tick|])
                                                                    ))))));
                                                                    fun_location =
                                                                    CommonTypes.Location.Unknown;
                                                                    fun_signature =
                                                                    None;
                                                                    fun_unsafe_signature =
                                                                    false;
                                                                    fun_frozen =
                                                                    true })],
                                                                    (Sugartypes.FreezeVar
                                                                    "_fun__g156")))))
                                                                   ]
                                                                 ))
                                                              ],
                                                            (Some MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]))
                                                            ))
                                                          ]
                                                        )));
                                                    ("children",
                                                     (Sugartypes.FnAppl (
                                                        (Sugartypes.TAppl (
                                                           (Sugartypes.FreezeVar
                                                              "MvuHTML_3$concat"),
                                                           [((Sugartypes.Datatype.Type
                                                                (Sugartypes.Datatype.TypeVar
                                                                   ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                             (Some [|TogglePause|Reset|Stop|NoOp|Tick|]));
                                                             ((Sugartypes.Datatype.Type
                                                                 (Sugartypes.Datatype.TypeVar
                                                                    (
                                                                    "$none",
                                                                    None,
                                                                    `Rigid))),
                                                              (Some { |_ }))
                                                             ]
                                                           )),
                                                        [(Sugartypes.ListLit (
                                                            [(Sugartypes.Block
                                                                ([],
                                                                 (Sugartypes.FnAppl (
                                                                    (
                                                                    Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "MvuHTML_3$textNode"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some String));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild|_ }));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|])),HTMLEmpty,HTMLRaw:String,HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String) }))
                                                                    ])),
                                                                    [(Sugartypes.Var
                                                                    "toggleText")
                                                                    ]))))
                                                              ],
                                                            (Some [|HTMLText:String|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|])
                                                            ))
                                                          ]
                                                        )))
                                                    ],
                                                  None))),
                                         (Some [|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|HTMLText:String|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|])
                                         ));
                                      (Sugartypes.ConstructorLit ("HTMLText",
                                         (Some (Sugartypes.Constant
                                                  (CommonTypes.Constant.String
                                                     "\n       "))),
                                         (Some [|HTMLText:String|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|])
                                         ));
                                      (Sugartypes.ConstructorLit ("HTMLTag",
                                         (Some (Sugartypes.RecordLit (
                                                  [("tagName",
                                                    (Sugartypes.Constant
                                                       (CommonTypes.Constant.String
                                                          "button")));
                                                    ("attrs",
                                                     (Sugartypes.FnAppl (
                                                        (Sugartypes.TAppl (
                                                           (Sugartypes.FreezeVar
                                                              "MvuAttrs_2$concat"),
                                                           [((Sugartypes.Datatype.Type
                                                                (Sugartypes.Datatype.TypeVar
                                                                   ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                             (Some [|Reset|TogglePause|Stop|NoOp|Tick|]));
                                                             ((Sugartypes.Datatype.Type
                                                                 (Sugartypes.Datatype.TypeVar
                                                                    (
                                                                    "$none",
                                                                    None,
                                                                    `Rigid))),
                                                              (Some { |_ }))
                                                             ]
                                                           )),
                                                        [(Sugartypes.ListLit (
                                                            [(Sugartypes.FnAppl (
                                                                (Sugartypes.TAppl (
                                                                   (Sugartypes.FreezeVar
                                                                    "MvuAttrs_2$attr"),
                                                                   [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some [|Reset|TogglePause|Stop|NoOp|Tick|]));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild|_ }))
                                                                    ]
                                                                   )),
                                                                [(Sugartypes.Constant
                                                                    (
                                                                    CommonTypes.Constant.String
                                                                    "id"));
                                                                  (Sugartypes.Constant
                                                                    (CommonTypes.Constant.String
                                                                    "reset"))
                                                                  ]
                                                                ));
                                                              (Sugartypes.FnAppl (
                                                                 (Sugartypes.TAppl (
                                                                    (
                                                                    Sugartypes.FreezeVar
                                                                    "MvuAttrs_2$onClick"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some () {}~> [|Reset|TogglePause|Stop|NoOp|Tick|]));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild|_ }));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |KeyboardEventHandler:(MvuEvents.EventName, (MvuEvents.KeyboardEvent) {}~> Maybe ([|Reset|TogglePause|Stop|NoOp|Tick|])),MouseEventHandler:(MvuEvents.EventName, (MvuEvents.MouseEvent) {}~> Maybe ([|Reset|TogglePause|Stop|NoOp|Tick|])),PropertyHandler:(MvuEvents.EventName, MvuEvents.PropertyName, (MvuEvents.PropertyValue) {}~> Maybe ([|Reset|TogglePause|Stop|NoOp|Tick|])) }));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |AttrAppend:(MvuAttrs.Attr ([|Reset|TogglePause|Stop|NoOp|Tick|]), MvuAttrs.Attr ([|Reset|TogglePause|Stop|NoOp|Tick|])),AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue),AttrEmpty }))
                                                                    ])),
                                                                 [(Sugartypes.Block
                                                                    ([],
                                                                    (Sugartypes.Block
                                                                    ([(Sugartypes.Fun
                                                                    { Sugartypes.fun_binder =
                                                                    ("_fun__g157",
                                                                    () {}~> [|Reset|TogglePause|Stop|NoOp|Tick|]);
                                                                    fun_linearity =
                                                                    CommonTypes.DeclaredLinearity.Unl;
                                                                    fun_definition =
                                                                    (
                                                                    [],
                                                                    (
                                                                    [[]],
                                                                    (
                                                                    Sugartypes.Block
                                                                    ([],
                                                                    (Sugartypes.ConstructorLit (
                                                                    "Reset",
                                                                    None,
                                                                    (Some [|Reset|TogglePause|Stop|NoOp|Tick|])
                                                                    ))))));
                                                                    fun_location =
                                                                    CommonTypes.Location.Unknown;
                                                                    fun_signature =
                                                                    None;
                                                                    fun_unsafe_signature =
                                                                    false;
                                                                    fun_frozen =
                                                                    true })],
                                                                    (Sugartypes.FreezeVar
                                                                    "_fun__g157")))))
                                                                   ]
                                                                 ))
                                                              ],
                                                            (Some MvuAttrs.Attr ([|Reset|TogglePause|Stop|NoOp|Tick|]))
                                                            ))
                                                          ]
                                                        )));
                                                    ("children",
                                                     (Sugartypes.FnAppl (
                                                        (Sugartypes.TAppl (
                                                           (Sugartypes.FreezeVar
                                                              "MvuHTML_3$concat"),
                                                           [((Sugartypes.Datatype.Type
                                                                (Sugartypes.Datatype.TypeVar
                                                                   ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                             (Some [|TogglePause|Reset|Stop|NoOp|Tick|]));
                                                             ((Sugartypes.Datatype.Type
                                                                 (Sugartypes.Datatype.TypeVar
                                                                    (
                                                                    "$none",
                                                                    None,
                                                                    `Rigid))),
                                                              (Some { |_ }))
                                                             ]
                                                           )),
                                                        [(Sugartypes.ListLit (
                                                            [(Sugartypes.ConstructorLit (
                                                                "HTMLText",
                                                                (Some (
                                                                Sugartypes.Constant
                                                                  (CommonTypes.Constant.String
                                                                    "Reset"))),
                                                                (Some [|HTMLText:String|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|])
                                                                ))
                                                              ],
                                                            (Some [|HTMLText:String|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|])
                                                            ))
                                                          ]
                                                        )))
                                                    ],
                                                  None))),
                                         (Some [|HTMLTag:(attrs:MvuAttrs.Attr ([|Reset|TogglePause|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|HTMLText:String|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|])
                                         ));
                                      (Sugartypes.ConstructorLit ("HTMLText",
                                         (Some (Sugartypes.Constant
                                                  (CommonTypes.Constant.String
                                                     "\n       "))),
                                         (Some [|HTMLText:String|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|])
                                         ));
                                      (Sugartypes.ConstructorLit ("HTMLTag",
                                         (Some (Sugartypes.RecordLit (
                                                  [("tagName",
                                                    (Sugartypes.Constant
                                                       (CommonTypes.Constant.String
                                                          "button")));
                                                    ("attrs",
                                                     (Sugartypes.FnAppl (
                                                        (Sugartypes.TAppl (
                                                           (Sugartypes.FreezeVar
                                                              "MvuAttrs_2$concat"),
                                                           [((Sugartypes.Datatype.Type
                                                                (Sugartypes.Datatype.TypeVar
                                                                   ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                             (Some [|Stop|Reset|TogglePause|NoOp|Tick|]));
                                                             ((Sugartypes.Datatype.Type
                                                                 (Sugartypes.Datatype.TypeVar
                                                                    (
                                                                    "$none",
                                                                    None,
                                                                    `Rigid))),
                                                              (Some { |_ }))
                                                             ]
                                                           )),
                                                        [(Sugartypes.ListLit (
                                                            [(Sugartypes.FnAppl (
                                                                (Sugartypes.TAppl (
                                                                   (Sugartypes.FreezeVar
                                                                    "MvuAttrs_2$attr"),
                                                                   [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some [|Stop|Reset|TogglePause|NoOp|Tick|]));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild|_ }))
                                                                    ]
                                                                   )),
                                                                [(Sugartypes.Constant
                                                                    (
                                                                    CommonTypes.Constant.String
                                                                    "id"));
                                                                  (Sugartypes.Constant
                                                                    (CommonTypes.Constant.String
                                                                    "stop"))
                                                                  ]
                                                                ));
                                                              (Sugartypes.FnAppl (
                                                                 (Sugartypes.TAppl (
                                                                    (
                                                                    Sugartypes.FreezeVar
                                                                    "MvuAttrs_2$onClick"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some () {}~> [|Stop|Reset|TogglePause|NoOp|Tick|]));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild|_ }));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |KeyboardEventHandler:(MvuEvents.EventName, (MvuEvents.KeyboardEvent) {}~> Maybe ([|Stop|Reset|TogglePause|NoOp|Tick|])),MouseEventHandler:(MvuEvents.EventName, (MvuEvents.MouseEvent) {}~> Maybe ([|Stop|Reset|TogglePause|NoOp|Tick|])),PropertyHandler:(MvuEvents.EventName, MvuEvents.PropertyName, (MvuEvents.PropertyValue) {}~> Maybe ([|Stop|Reset|TogglePause|NoOp|Tick|])) }));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |AttrAppend:(MvuAttrs.Attr ([|Stop|Reset|TogglePause|NoOp|Tick|]), MvuAttrs.Attr ([|Stop|Reset|TogglePause|NoOp|Tick|])),AttrAttribute:(MvuAttrs.AttrKey, MvuAttrs.AttrValue),AttrEmpty }))
                                                                    ])),
                                                                 [(Sugartypes.Block
                                                                    ([],
                                                                    (Sugartypes.Block
                                                                    ([(Sugartypes.Fun
                                                                    { Sugartypes.fun_binder =
                                                                    ("_fun__g158",
                                                                    () {}~> [|Stop|Reset|TogglePause|NoOp|Tick|]);
                                                                    fun_linearity =
                                                                    CommonTypes.DeclaredLinearity.Unl;
                                                                    fun_definition =
                                                                    (
                                                                    [],
                                                                    (
                                                                    [[]],
                                                                    (
                                                                    Sugartypes.Block
                                                                    ([],
                                                                    (Sugartypes.ConstructorLit (
                                                                    "Stop",
                                                                    None,
                                                                    (Some [|Stop|Reset|TogglePause|NoOp|Tick|])
                                                                    ))))));
                                                                    fun_location =
                                                                    CommonTypes.Location.Unknown;
                                                                    fun_signature =
                                                                    None;
                                                                    fun_unsafe_signature =
                                                                    false;
                                                                    fun_frozen =
                                                                    true })],
                                                                    (Sugartypes.FreezeVar
                                                                    "_fun__g158")))))
                                                                   ]
                                                                 ))
                                                              ],
                                                            (Some MvuAttrs.Attr ([|Stop|Reset|TogglePause|NoOp|Tick|]))
                                                            ))
                                                          ]
                                                        )));
                                                    ("children",
                                                     (Sugartypes.FnAppl (
                                                        (Sugartypes.TAppl (
                                                           (Sugartypes.FreezeVar
                                                              "MvuHTML_3$concat"),
                                                           [((Sugartypes.Datatype.Type
                                                                (Sugartypes.Datatype.TypeVar
                                                                   ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                             (Some [|TogglePause|Reset|Stop|NoOp|Tick|]));
                                                             ((Sugartypes.Datatype.Type
                                                                 (Sugartypes.Datatype.TypeVar
                                                                    (
                                                                    "$none",
                                                                    None,
                                                                    `Rigid))),
                                                              (Some { |_ }))
                                                             ]
                                                           )),
                                                        [(Sugartypes.ListLit (
                                                            [(Sugartypes.ConstructorLit (
                                                                "HTMLText",
                                                                (Some (
                                                                Sugartypes.Constant
                                                                  (CommonTypes.Constant.String
                                                                    "Stop"))),
                                                                (Some [|HTMLText:String|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|])
                                                                ))
                                                              ],
                                                            (Some [|HTMLText:String|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|])
                                                            ))
                                                          ]
                                                        )))
                                                    ],
                                                  None))),
                                         (Some [|HTMLTag:(attrs:MvuAttrs.Attr ([|Stop|Reset|TogglePause|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|HTMLText:String|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|])
                                         ));
                                      (Sugartypes.ConstructorLit ("HTMLText",
                                         (Some (Sugartypes.Constant
                                                  (CommonTypes.Constant.String
                                                     "\n       "))),
                                         (Some [|HTMLText:String|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|])
                                         ));
                                      (Sugartypes.ConstructorLit ("HTMLTag",
                                         (Some (Sugartypes.RecordLit (
                                                  [("tagName",
                                                    (Sugartypes.Constant
                                                       (CommonTypes.Constant.String
                                                          "div")));
                                                    ("attrs",
                                                     (Sugartypes.FnAppl (
                                                        (Sugartypes.TAppl (
                                                           (Sugartypes.FreezeVar
                                                              "MvuAttrs_2$concat"),
                                                           [((Sugartypes.Datatype.Type
                                                                (Sugartypes.Datatype.TypeVar
                                                                   ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                             (Some [|TogglePause|Reset|Stop|NoOp|Tick|]));
                                                             ((Sugartypes.Datatype.Type
                                                                 (Sugartypes.Datatype.TypeVar
                                                                    (
                                                                    "$none",
                                                                    None,
                                                                    `Rigid))),
                                                              (Some { |_ }))
                                                             ]
                                                           )),
                                                        [(Sugartypes.ListLit (
                                                            [(Sugartypes.FnAppl (
                                                                (Sugartypes.TAppl (
                                                                   (Sugartypes.FreezeVar
                                                                    "MvuAttrs_2$attr"),
                                                                   [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some [|TogglePause|Reset|Stop|NoOp|Tick|]));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |wild|_ }))
                                                                    ]
                                                                   )),
                                                                [(Sugartypes.Constant
                                                                    (
                                                                    CommonTypes.Constant.String
                                                                    "class"));
                                                                  (Sugartypes.Constant
                                                                    (CommonTypes.Constant.String
                                                                    "footer"))
                                                                  ]
                                                                ))
                                                              ],
                                                            (Some MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]))
                                                            ))
                                                          ]
                                                        )));
                                                    ("children",
                                                     (Sugartypes.FnAppl (
                                                        (Sugartypes.TAppl (
                                                           (Sugartypes.FreezeVar
                                                              "MvuHTML_3$concat"),
                                                           [((Sugartypes.Datatype.Type
                                                                (Sugartypes.Datatype.TypeVar
                                                                   ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                             (Some [|TogglePause|Reset|Stop|NoOp|Tick|]));
                                                             ((Sugartypes.Datatype.Type
                                                                 (Sugartypes.Datatype.TypeVar
                                                                    (
                                                                    "$none",
                                                                    None,
                                                                    `Rigid))),
                                                              (Some { |_ }))
                                                             ]
                                                           )),
                                                        [(Sugartypes.ListLit (
                                                            [(Sugartypes.ConstructorLit (
                                                                "HTMLText",
                                                                (Some (
                                                                Sugartypes.Constant
                                                                  (CommonTypes.Constant.String
                                                                    "\n         "))),
                                                                (Some [|HTMLText:String|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|])
                                                                ));
                                                              (Sugartypes.ConstructorLit (
                                                                 "HTMLTag",
                                                                 (Some (
                                                                 Sugartypes.RecordLit (
                                                                   [("tagName",
                                                                    (Sugartypes.Constant
                                                                    (CommonTypes.Constant.String
                                                                    "b")));
                                                                    ("attrs",
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "MvuAttrs_2$concat"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some [|TogglePause|Reset|Stop|NoOp|Tick|]));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |_ }))
                                                                    ])),
                                                                    [(Sugartypes.ListLit (
                                                                    [],
                                                                    (Some MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]))
                                                                    ))])));
                                                                    ("children",
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "MvuHTML_3$concat"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some [|TogglePause|Reset|Stop|NoOp|Tick|]));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |_ }))
                                                                    ])),
                                                                    [(Sugartypes.ListLit (
                                                                    [(Sugartypes.ConstructorLit (
                                                                    "HTMLText",
                                                                    (Some (
                                                                    Sugartypes.Constant
                                                                    (CommonTypes.Constant.String
                                                                    "Keyboard shortcuts"))),
                                                                    (Some [|HTMLText:String|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|])
                                                                    ))],
                                                                    (Some [|HTMLText:String|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|])
                                                                    ))])))],
                                                                   None))),
                                                                 (Some [|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|HTMLText:String|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|])
                                                                 ));
                                                              (Sugartypes.ConstructorLit (
                                                                 "HTMLText",
                                                                 (Some (
                                                                 Sugartypes.Constant
                                                                   (CommonTypes.Constant.String
                                                                    "\n         "))),
                                                                 (Some [|HTMLText:String|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|])
                                                                 ));
                                                              (Sugartypes.ConstructorLit (
                                                                 "HTMLTag",
                                                                 (Some (
                                                                 Sugartypes.RecordLit (
                                                                   [("tagName",
                                                                    (Sugartypes.Constant
                                                                    (CommonTypes.Constant.String
                                                                    "br")));
                                                                    ("attrs",
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "MvuAttrs_2$concat"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some [|TogglePause|Reset|Stop|NoOp|Tick|]));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |_ }))
                                                                    ])),
                                                                    [(Sugartypes.ListLit (
                                                                    [],
                                                                    (Some MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]))
                                                                    ))])));
                                                                    ("children",
                                                                    (Sugartypes.FnAppl (
                                                                    (Sugartypes.TAppl (
                                                                    (Sugartypes.FreezeVar
                                                                    "MvuHTML_3$concat"),
                                                                    [((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some [|TogglePause|Reset|Stop|NoOp|Tick|]));
                                                                    ((
                                                                    Sugartypes.Datatype.Type
                                                                    (Sugartypes.Datatype.TypeVar
                                                                    ("$none",
                                                                    None,
                                                                    `Rigid))),
                                                                    (Some { |_ }))
                                                                    ])),
                                                                    [(Sugartypes.ListLit (
                                                                    [],
                                                                    (Some MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))
                                                                    ))])))],
                                                                   None))),
                                                                 (Some [|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|HTMLText:String|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|])
                                                                 ));
                                                              (Sugartypes.ConstructorLit (
                                                                 "HTMLText",
                                                                 (Some (
                                                                 Sugartypes.Constant
                                                                   (CommonTypes.Constant.String
                                                                    "\n         | p : start/pause | r : reset | s : stop |\n       "))),
                                                                 (Some [|HTMLText:String|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|])
                                                                 ))
                                                              ],
                                                            (Some [|HTMLText:String|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|])
                                                            ))
                                                          ]
                                                        )))
                                                    ],
                                                  None))),
                                         (Some [|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|HTMLText:String|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|])
                                         ));
                                      (Sugartypes.ConstructorLit ("HTMLText",
                                         (Some (Sugartypes.Constant
                                                  (CommonTypes.Constant.String
                                                     "\n     "))),
                                         (Some [|HTMLText:String|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|])
                                         ))
                                      ],
                                    (Some [|HTMLText:String|HTMLTag:(attrs:MvuAttrs.Attr ([|TogglePause|Reset|Stop|NoOp|Tick|]),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|HTMLAppend:(MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]), MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]))|HTMLEmpty|HTMLRaw:String|])
                                    ))
                                  ]
                                )))
                            ],
                          None))),
                 (Some [|HTMLTag:(attrs:MvuAttrs.Attr (Msg),children:MvuHTML.HTML ([|TogglePause|Reset|Stop|NoOp|Tick|]),tagName:String)|HTMLAppend:(MvuHTML.HTML (Msg), MvuHTML.HTML (Msg))|HTMLEmpty|HTMLRaw:String|HTMLText:String|])
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Model", []))],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication ("MvuHTML_3$HTML",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeApplication ("Msg", [])))
                       ]
                     ))
                  )),
               (Some (Model) ~> MvuHTML.HTML (Msg))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder =
        ("subscriptions", (Model) ~> MvuSubscriptions.Sub (Msg));
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[(Sugartypes.Pattern.Variable ("model", Model))]],
          (Sugartypes.Block
             ([],
              (Sugartypes.Conditional (
                 (Sugartypes.Projection ((Sugartypes.Var "model"), "paused")),
                 (Sugartypes.Block ([], (Sugartypes.Var "shortcutHandler"))),
                 (Sugartypes.Block
                    ([],
                     (Sugartypes.InfixAppl (
                        ([{ |SubInterval:(Int, () {}~> [|Tick|NoOp|Reset|Stop|TogglePause|])|SubAnimationFrame:(Int) {}~> [|TogglePause|NoOp|Reset|Stop|Tick|],SubEventHandler:MvuEvents.EventHandler ([|TogglePause|NoOp|Reset|Stop|Tick|]) };
                           { |wild|_ }],
                         (Operators.BinaryOp.Name "MvuSubscriptions_1$+^")),
                        (Sugartypes.Var "secondsHandler"),
                        (Sugartypes.Var "shortcutHandler")))))
                 ))))));
        fun_location = CommonTypes.Location.Unknown;
        fun_signature =
        (Some ((Sugartypes.Datatype.Function (
                  [(Sugartypes.Datatype.TypeApplication ("Model", []))],
                  ([("wild",
                     (Sugartypes.Datatype.Present Sugartypes.Datatype.Unit))],
                   (Sugartypes.Datatype.Open ("$eff", None, `Rigid))),
                  (Sugartypes.Datatype.TypeApplication (
                     "MvuSubscriptions_1$Sub",
                     [(Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeApplication ("Msg", [])))
                       ]
                     ))
                  )),
               (Some (Model) ~> MvuSubscriptions.Sub (Msg))));
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("mainPage", (_) ~> Page);
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a; a::Row],
         ([[Sugartypes.Pattern.Any]],
          (Sugartypes.Block
             ([(Sugartypes.Val (
                  (Sugartypes.Pattern.Variable
                     ("initialModel", (minutes:Int,paused:Bool,seconds:Int))),
                  ([],
                   (Sugartypes.RecordLit (
                      [("seconds",
                        (Sugartypes.Constant (CommonTypes.Constant.Int 0)));
                        ("minutes",
                         (Sugartypes.Constant (CommonTypes.Constant.Int 0)));
                        ("paused",
                         (Sugartypes.Constant
                            (CommonTypes.Constant.Bool true)))
                        ],
                      None))),
                  CommonTypes.Location.Unknown, None));
                (Sugartypes.Val (
                   (Sugartypes.Pattern.Variable ("evtHandler", ())),
                   ([],
                    (Sugartypes.FnAppl (
                       (Sugartypes.TAppl ((Sugartypes.FreezeVar "Mvu_4$run"),
                          [((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some Msg));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some (minutes:Int,paused:Bool,seconds:Int)));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some { |_ }));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some { |_ }))
                            ]
                          )),
                       [(Sugartypes.Constant
                           (CommonTypes.Constant.String "placeholder"));
                         (Sugartypes.Var "initialModel");
                         (Sugartypes.TAppl ((Sugartypes.FreezeVar "view"),
                            [((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some { |_ }))]
                            ));
                         (Sugartypes.TAppl ((Sugartypes.FreezeVar "updt"),
                            [((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some { |_ }))]
                            ));
                         (Sugartypes.TAppl (
                            (Sugartypes.FreezeVar "subscriptions"),
                            [((Sugartypes.Datatype.Type
                                 (Sugartypes.Datatype.TypeVar
                                    ("$none", None, `Rigid))),
                              (Some { |_ }))]
                            ))
                         ]
                       ))),
                   CommonTypes.Location.Unknown, None))
                ],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "bodyP"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { wild|_ }))]
                    )),
                 [(Sugartypes.Xml ("html", [], None,
                     [(Sugartypes.TextNode "\n    ");
                       (Sugartypes.Xml ("head", [], None,
                          [(Sugartypes.TextNode "\n      ");
                            (Sugartypes.Xml ("title", [], None,
                               [(Sugartypes.TextNode "Stopwatch")]));
                            (Sugartypes.TextNode "\n      ");
                            (Sugartypes.Xml ("link",
                               [("rel",
                                 [(Sugartypes.Constant
                                     (CommonTypes.Constant.String
                                        "stylesheet"))
                                   ]);
                                 ("href",
                                  [(Sugartypes.Constant
                                      (CommonTypes.Constant.String
                                         "/css/stopwatch.css"))
                                    ]);
                                 ("type",
                                  [(Sugartypes.Constant
                                      (CommonTypes.Constant.String "text/css"))
                                    ])
                                 ],
                               None, []));
                            (Sugartypes.TextNode "\n    ")]
                          ));
                       (Sugartypes.TextNode "\n    ");
                       (Sugartypes.Xml ("body", [], None,
                          [(Sugartypes.TextNode "\n      ");
                            (Sugartypes.Xml ("div",
                               [("id",
                                 [(Sugartypes.Constant
                                     (CommonTypes.Constant.String
                                        "placeholder"))
                                   ])
                                 ],
                               None, []));
                            (Sugartypes.TextNode "\n    ")]
                          ));
                       (Sugartypes.TextNode "\n  ")]
                     ))
                   ]
                 ))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true });
   (Sugartypes.Fun
      { Sugartypes.fun_binder = ("main", () ~> ());
        fun_linearity = CommonTypes.DeclaredLinearity.Unl;
        fun_definition =
        ([a::Row],
         ([[]],
          (Sugartypes.Block
             ([(Sugartypes.Exp
                  (Sugartypes.FnAppl (
                     (Sugartypes.TAppl ((Sugartypes.FreezeVar "addRoute"),
                        [((Sugartypes.Datatype.Type
                             (Sugartypes.Datatype.TypeVar
                                ("$none", None, `Rigid))),
                          (Some ::Presence ({_})));
                          ((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some { |_ }))
                          ]
                        )),
                     [(Sugartypes.Constant (CommonTypes.Constant.String "/"));
                       (Sugartypes.TAppl ((Sugartypes.FreezeVar "mainPage"),
                          [((Sugartypes.Datatype.Type
                               (Sugartypes.Datatype.TypeVar
                                  ("$none", None, `Rigid))),
                            (Some String));
                            ((Sugartypes.Datatype.Type
                                (Sugartypes.Datatype.TypeVar
                                   ("$none", None, `Rigid))),
                             (Some { |hear{_} }))
                            ]
                          ))
                       ]
                     )));
                (Sugartypes.Exp
                   (Sugartypes.FnAppl (
                      (Sugartypes.TAppl (
                         (Sugartypes.FreezeVar "addStaticRoute"),
                         [((Sugartypes.Datatype.Type
                              (Sugartypes.Datatype.TypeVar
                                 ("$none", None, `Rigid))),
                           (Some { |_ }))]
                         )),
                      [(Sugartypes.Constant
                          (CommonTypes.Constant.String "/css"));
                        (Sugartypes.Constant
                           (CommonTypes.Constant.String "css"));
                        (Sugartypes.ListLit (
                           [(Sugartypes.TupleLit
                               [(Sugartypes.Constant
                                   (CommonTypes.Constant.String "css"));
                                 (Sugartypes.Constant
                                    (CommonTypes.Constant.String "text/css"))
                                 ])
                             ],
                           (Some (String, String))))
                        ]
                      )))
                ],
              (Sugartypes.FnAppl (
                 (Sugartypes.TAppl ((Sugartypes.FreezeVar "servePages"),
                    [((Sugartypes.Datatype.Type
                         (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
                      (Some { |_ }))]
                    )),
                 []))))));
        fun_location = CommonTypes.Location.Unknown; fun_signature = None;
        fun_unsafe_signature = false; fun_frozen = true })
   ],
 (Some (Sugartypes.FnAppl (
          (Sugartypes.TAppl ((Sugartypes.FreezeVar "main"),
             [((Sugartypes.Datatype.Type
                  (Sugartypes.Datatype.TypeVar ("$none", None, `Rigid))),
               (Some {  }))]
             )),
          []))))
compiling to IR
compiled IR
Starting server?

Starting server (2)?

