var db = database "organisation";

var departments = table "departments" with (dpt:String)
    		  tablekeys [["dpt"]] from db;
var employees = table "employees" with (emp:String, dpt:String, salary : Int)
    	      	tablekeys [["emp"]] from db;
var tasks = table "tasks" with (id:Int,emp:String,tsk:String)
    	  tablekeys [["id"]] from db;
var contacts = table "contacts" with (id:Int,name:String,dpt:String,"client":Bool)
    	  tablekeys [["id"]] from db;

fun time(f) {
  var start = serverTimeMilliseconds();
  ignore(query {f()});
  var total = serverTimeMilliseconds()-start;
  total
}

fun throttle (f,x) {
  if (length(asList(departments)) <= 16) {f()} else {x}
}

fun repeat(n,f) {
  if (n == 0) { [] }
  else f()::repeat(n-1,f)
}

fun median(xs) {
  var ys = sortBy(id, xs);
  hd(drop(length(ys)/2,ys))
}

fun test(t) {
  print(t.msg);
  var ts = repeat(t.iters, fun () {time(t.q)});
  var time = median(ts);
  print("Time: " ^^ intToString(time));
  (msg=t.msg,time=time)
}

sig iter : ((a) ~e~> (), [a]) ~e~> ()
fun iter(f,l) {
  switch(l) {
    case [] -> ();
    case (x::xs) -> f(x); iter(f,xs)
  }
}

# QF1 - simple selection: employee names with salary > 50000

fun selectSalary() {
  for(e <-- employees)
  where (e.salary > 50000)
  [(emp=e.emp)]
}

# QF2 - simple join:

fun employeeTasks() {
  for(e <-- employees,t <-- tasks)
  where (e.emp == t.emp)
  [(emp=e.emp,tsk=t.tsk)]
}

# QF3 - self-join: different employees with same salary

fun employeesJoin() {
  for(e1 <-- employees, e2 <-- employees)
  where(e1.dpt == e2.dpt && e1.salary == e2.salary && e1.emp <> e2.emp)
  [(emp1=e1.emp,emp2=e2.emp)]
}

# QF4 - union of selections

fun employeesUnion() {
  (for (e <-- employees)
   where (e.salary > 50000)
   [(emp=e.emp)])
  ++
  (for(t <-- tasks)
   where (t.tsk == "abstract")
   [(emp=t.emp)])
}

# QF5 - difference of selections

fun diff(t,u) {
  for(x <- t)
  where (empty(for(y <- u) where (x == y) [()]))
  [x]
}

fun employeesDiff() {
  diff(
   for(t <-- tasks)
   where (t.tsk == "abstract")
   [(emp=t.emp)],
   for (e <-- employees)
   where (e.salary < 50000)
   [(emp=e.emp)])
}

# QF6

fun employeesUnionDiff() {
  diff(
   (for(t <-- tasks)
   where (t.tsk == "abstract")
   [(emp=t.emp)]) ++
   (for (e <-- employees)
   where (e.salary < 50000)
   [(emp=e.emp)]),
   (for(t <-- tasks)
   where (t.tsk <> "enthuse")
   [(emp=t.emp)]) ++
   (for (e <-- employees)
   where (e.salary > 10000)
   [(emp=e.emp)])
   )
}

var iters = 5;
var tests = [test((iters=iters,msg="QF1",q=selectSalary)),
    	     test((iters=iters,msg="QF2",q=employeeTasks)),
	     test((iters=iters,msg="QF3",q=employeesJoin)),
	     test((iters=iters,msg="QF4",q=employeesUnion)),
	     test((iters=iters,msg="QF5",q=employeesDiff)),
	     test((iters=iters,msg="QF6",q=employeesUnionDiff))];

iter(fun (u) {
  print(u.msg ^^ ":\t" ^^ intToString(u.time))
},tests)