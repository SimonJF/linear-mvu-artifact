var db = database "organisation";

var departments = table "departments" with (dpt:String)
    		  tablekeys [["dpt"]] from db;
var employees = table "employees" with (emp:String, dpt:String, salary : Int)
    	      	tablekeys [["emp"]] from db;
var tasks = table "tasks" with (id:Int,emp:String,tsk:String)
    	  tablekeys [["id"]] from db;
var contacts = table "contacts" with (id:Int,name:String,dpt:String,"client":Bool)
    	  tablekeys [["id"]] from db;

sig iter : ((a) ~e~> (), [a]) ~e~> ()
fun iter(f,l) {
  switch(l) {
    case [] -> ();
    case (x::xs) -> f(x); iter(f,xs)
  }
}

fun time(f) {
  var start = serverTimeMilliseconds();
  ignore(query {f()});
  var total = serverTimeMilliseconds()-start;
  total
}

fun throttle (f,n,x) {
  if (length(asList(departments)) <= n) {f()} else {x}
}

fun repeat(n,f) {
  if (n == 0) { [] }
  else f()::repeat(n-1,f)
}

fun median(xs) {
  var ys = sortBy(id, xs);
  hd(drop(length(ys)/2,ys))
}

fun test(t) {
  print(t.msg);
  var ts = repeat(t.iters, fun () {time(t.q)});
  var time = median(ts);
  print("Time: " ^^ intToString(time));
  (msg=t.msg,time=time)
}

# QG1: Group by, using groupByFlat (recognized by Ferry)


fun queryg1() {
    for ((y,xs) <- groupByFlat(fun (x) {x.emp}, asList(tasks)))
    [(emp=y,num=length(xs))]
}

# QG1a: Group by, without duplicate elim.


fun queryg1a() {
    for(t <-- tasks)
    [(t.emp,length(for (u <-- tasks) where (t.emp == u.emp) [u]))]
}


# QG2: Group by, using side knowledge about db


fun queryg2() {
    for(e <-- employees)
    [(emp=e.emp,num=length(for(u <-- tasks)
    		       where(e.emp == u.emp)
		       [u]))]
}


# QG3: Number of employees in each department that can abstract

fun queryg3() {
  for(x <-- departments)
  [(a=x.dpt, b= length(for (e <-- employees,t <-- tasks)
  	     	       where (e.dpt == x.dpt && t.emp == e.emp && t.tsk == "abstract")
		       [()]))]

}





# QG4: Number of employees in each department and list of employees and number of tasks

fun queryg4() {
  for(x <-- departments)
  [(a=x.dpt, size= length(for (e <-- employees)
  	     	       where (e.dpt == x.dpt)
		       [()]),
	     emps = for(e <-- employees)
	            where (e.dpt == x.dpt)
		    [(emp = e.emp, tasks = length(for(t <-- tasks)
		    	    	   	          where (e.emp == t.emp)
						  [t]))]
  )]
}

var iters = 5;
var tests = [test((iters=iters,msg="QG1",q=queryg1)),
    	     test((iters=iters,msg="QG1a",q=queryg1a)),
    	     test((iters=iters,msg="QG2",q=queryg2)),
	     test((iters=iters,msg="QG3",q=queryg3)),
	     test((iters=iters,msg="QG4",q=queryg4))];

iter(fun (u) {
  print(u.msg ^^ ":\t" ^^ intToString(u.time))
},tests)

