var db = database "nested2";

var t1 = table "t1" with (a:Int) from db;
var t2 = table "t2" with (a:Int, b:Int) from db;
var t3 = table "t3" with (b:Int, v:Int) from db;
var t4 = table "t4" with (b:Int, v:Int) from db;

fun rand(x) {
  floatToInt(random() *. intToFloat(x))
}

fun generateData(x, y, z) {
  fun rv() {rand(1000000)}

  delete (_ <-- t1);
  delete (_ <-- t2);
  delete (_ <-- t3);
  delete (_ <-- t4);

  var _ =
    for (i <- [0..x-1]) {
      insert t1 values [(a=i)];
      [()]
    };
  var _ =
    for (i <- [0..x-1]) {
      insert t2 values (a,b) for (j <- [0..y-1]) [(a=i, b=(y*i)+j)];
      [()]
    };
  var _ =
    for (i <- [0..(x*y)-1]) {
      insert t3 values (b,v) (for (j <- [0..z-1]) [(b=i, v=rv())]);
      [()]
    };
  var _ =
    for (i <- [0..(x*y)-1]) {
      insert t4 values (b,v) (for (j <- [0..z-1]) [(b=i, v=rv())]);
      [()]
    };
  ()
}

fun time(f) {
  var start = serverTimeMilliseconds();
  ignore(query {f()});
  print("Time: " ^^ intToString(serverTimeMilliseconds()-start) ^^ " ms")
}

fun test() {
  (for (x <-- t1)
     [(for (y <-- t2) where (x.a == y.a)
        [for (z <-- t3) where (y.b == z.b)
           [z.v]])])
  ++
  (for (x <-- t1)
     [(for (y <-- t2) where (x.a == y.a)
         [for (z <-- t4) where (y.b == z.b)
            [z.v]])])
}

#generateData(10, 10, 200)
time(test)

